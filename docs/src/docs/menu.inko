import markdown (split_front_matter)
import std.clone (Clone)
import std.fs.file (ReadOnlyFile)
import std.fs.path (Path)
import std.json (Json)
import wobsite (FrontMatter)
import wobsite.url (file_url)

fn parse_front_matter(path: ref Path) -> Result[FrontMatter, String] {
  let bytes = ByteArray.new

  try ReadOnlyFile.new(path.clone).then(fn (f) { f.read_all(bytes) }).map_error(
    fn (e) { 'failed to read ${path}: ${e}' },
  )

  FrontMatter.parse(split_front_matter(bytes.into_string).0).map_error(fn (e) {
    'failed to parse the front matter of ${path}: ${e}'
  })
}

type Item {
  let @title: String
  let @url: String

  fn parent_url -> String {
    let chunks = @url.split('/').to_array

    chunks.pop
    String.join(chunks.into_iter, '/')
  }
}

impl Clone for Item {
  fn pub clone -> Item {
    Item(title: @title, url: @url)
  }
}

type Menu {
  let @items: Map[String, Array[Item]]
  let @titles: Map[String, String]

  fn static parse(source: ref Path, path: ref Path) -> Result[Menu, String] {
    let file = try ReadOnlyFile.new(path).map_error(fn (e) { e.to_string })
    let root = match Json.parse(file) {
      case Ok(Object(map)) -> map
      case Ok(_) -> throw 'the top-level value must be an object'
      case Error(e) -> throw e.to_string
    }

    let titles = Map.new
    let items = Map.new

    try root.into_iter.try_each(fn (pair) {
      let key = pair.key
      let val = match pair {
        case { @value = Array(v) } -> v
        case _ -> throw 'the values of each key must be an array'
      }

      let values = []

      try val.into_iter.try_each(fn (val) {
        let rel = match val {
          case String(v) -> v
          case _ -> throw 'each array value must be a string'
        }

        let path = source.join(rel)
        let front = try parse_front_matter(path)
        let url = file_url(source, path)

        titles.set(url, front.title)
        values.push(Item(title: front.title, url: url))
        Result.Ok(nil)
      })

      items.set(key, values)
      Result.Ok(nil)
    })

    Result.Ok(Menu(items: items, titles: titles))
  }
}

impl Clone for Menu {
  fn pub clone -> Menu {
    Menu(
      items: @items.iter.reduce(Map.new, fn (map, pair) {
        map.set(pair.key, pair.value.clone)
        map
      }),
      titles: @titles.iter.reduce(Map.new, fn (map, pair) {
        map.set(pair.key, pair.value)
        map
      }),
    )
  }
}
