import docs.url
import markdown (Document)
import std.fs.path (Path)
import std.test (Tests)
import std.time (DateTime)
import wobsite (FrontMatter, Page)

fn page(url: String) -> Page {
  Page(
    front_matter: FrontMatter(title: 'Foo', date: DateTime.utc),
    url: url,
    source_path: Path.new('foo'),
    body: Document(children: [], references: Map.new, footnotes: Map.new),
  )
}

fn pub tests(t: mut Tests) {
  t.test('url.link_from', fn (t) {
    t.equal(url.link_from(page('/'), '/css/main.css'), 'css/main.css')
    t.equal(url.link_from(page('/'), 'test.md'), 'test.md')
    t.equal(url.link_from(page('/'), 'foo/test.md'), 'foo/test.md')
    t.equal(url.link_from(page('/foo/'), '/css/main.css'), '../css/main.css')
    t.equal(url.link_from(page('/foo'), '/css/main.css'), '../css/main.css')
    t.equal(url.link_from(page('/foo'), 'test.md'), '../test.md')
    t.equal(url.link_from(page('/foo/bar'), 'test.md'), '../test.md')
    t.equal(url.link_from(page('/foo/bar'), '../test.md'), '../../test.md')
    t.equal(url.link_from(page('/foo/bar'), '../test'), '../../test')
    t.equal(
      url.link_from(page('/setup/ivm'), 'installation'),
      '../installation',
    )
    t.equal(url.link_from(page('/foo/bar'), '../a/b#foo'), '../../a/b#foo')
    t.equal(url.link_from(page('/foo/bar/'), '../a/b#foo'), '../../a/b#foo')
  })

  t.test('url.relative?', fn (t) {
    t.true(url.relative?('foo'))
    t.true(url.relative?('./foo'))
    t.true(url.relative?('../foo'))
    t.false(url.relative?('#foo'))
    t.false(url.relative?('/foo'))
    t.false(url.relative?('https://example.com'))
    t.false(url.relative?('http://example.com'))
  })
}
