---
name: Run tests
on:
  workflow_call:

env:
  CARGO_HOME: ${{ github.workspace }}/.cargo-home
  # We set an explicit version to only install the components we need for CI.
  RUSTUP_TOOLCHAIN: '1.78'

jobs:
  vale:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: errata-ai/vale-action@reviewdog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          reporter: github-check
          vale_flags: '--no-wrap --sort'

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v1

  cargo-clippy:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/inko-lang/ci:fedora
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: '${{ env.CARGO_HOME }}'
          key: cargo-clippy-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Run clippy
        run: 'cargo clippy -- -D warnings'

  cargo-fmt:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/inko-lang/ci:fedora
    steps:
      - uses: actions/checkout@v4
      - name: Run rustfmt
        run: 'cargo fmt --all --check'

  inko-fmt:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/inko-lang/ci:fedora
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: '${{ env.CARGO_HOME }}'
          key: inko-fmt-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Build the compiler
        run: cargo build
      - name: Check the formatting
        run: 'cd std && cargo run -- fmt --check'

  amd64-linux-gnu:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/inko-lang/ci:fedora
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: '${{ env.CARGO_HOME }}'
          key: amd64-linux-gnu-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Run compiler tests
        run: cargo test
      # We run tests with and without optimizations, such that we can catch any
      # potential miscompilations introduced by optimizations. We only do this
      # for this particular target as our optimizations aren't target specific.
      - name: Run stdlib tests with optimizations
        run: 'cd std && cargo run -- test'
      - name: Run stdlib tests without optimizations
        run: 'cd std && cargo run -- test --opt=none'

  amd64-linux-musl:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/inko-lang/ci:alpine
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: '${{ env.CARGO_HOME }}'
          key: amd64-linux-musl-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Run compiler tests
        run: cargo test
      - name: Run stdlib tests
        run: 'cd std && cargo run -- test'

  amd64-mac-native:
    runs-on: macos-12
    env:
      RUSTUP_HOME: ${{ github.workspace }}/.rustup-home
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ${{ env.CARGO_HOME }}
            ${{ env.RUSTUP_HOME }}
          key: amd64-mac-native-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Install dependencies
        run: ./ci/mac.sh
      - name: Run compiler tests
        run: cargo test
      - name: Run stdlib tests
        run: 'cd std && cargo run -- test'

  arm64-mac-native:
    runs-on: macos-14
    env:
      RUSTUP_HOME: ${{ github.workspace }}/.rustup-home
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ${{ env.CARGO_HOME }}
            ${{ env.RUSTUP_HOME }}
          key: arm64-mac-native-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Install dependencies
        run: ./ci/mac.sh
      - name: Run compiler tests
        run: cargo test
      - name: Run stdlib tests
        run: 'cd std && cargo run -- test'

  amd64-freebsd-native:
    runs-on: ubuntu-latest
    env:
      RUSTUP_HOME: ${{ github.workspace }}/.rustup-home
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ${{ env.CARGO_HOME }}
            ${{ env.RUSTUP_HOME }}
          key: amd64-freebsd-native-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Run tests
        uses: cross-platform-actions/action@v0.24.0
        with:
          operating_system: freebsd
          version: '14.0'
          memory: 8G
          environment_variables: 'CARGO_HOME RUSTUP_HOME'
          image_url: 'https://github.com/inko-lang/freebsd-builder/releases/download/v0.8.0/freebsd-14.0-x86-64.qcow2'
          run: ./ci/freebsd.sh
