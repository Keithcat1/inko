# The SipHash hashing algorithm.
#
# SipHash isn't cryptographically secure, instead it's intended for e.g. hashing
# of objects as part of the `Map` type.
import std.crypto.math (rotate_left_u64)
import std.hash (Hasher)

# An implementation of the SipHash 1-3 algorithm.
#
# # Examples
#
# ```inko
# import std.hash.siphash (SipHasher13)
# import std.rand (Random)
#
# let rng = Random.new
# let hasher = SipHasher13.new(key0: rng.int, key1: rng.int)
#
# hasher.write(42)
# hasher.finish
# ```
type pub SipHasher13 {
  let mut @size: Int
  let mut @m_index: Int
  let mut @m: Int
  let mut @v0: Int
  let mut @v1: Int
  let mut @v2: Int
  let mut @v3: Int

  # Returns a new hasher using two default keys.
  fn pub static default -> SipHasher13 {
    # These casts allow us to read the hash keys from the runtime state, but
    # without having to declare the entire layout (including fields we have no
    # interest in).
    let key0 = (_INKO.state as Int + 0 as Pointer[UInt64]).0 as Int
    let key1 = (_INKO.state as Int + 8 as Pointer[UInt64]).0 as Int

    new(key0, key1)
  }

  # Returns a new hasher using the two keys.
  #
  # Both keys _should_ be randomly generated. The type `std.rand.Random` can
  # be used to generate these keys.
  fn pub static new(key0: Int, key1: Int) -> SipHasher13 {
    SipHasher13(
      size: 0,
      m_index: 0,
      m: 0,
      v0: 0x736F6D6570736575 ^ key0,
      v1: 0x646F72616E646F6D ^ key1,
      v2: 0x6C7967656E657261 ^ key0,
      v3: 0x7465646279746573 ^ key1,
    )
  }

  fn inline mut round {
    @v0 = @v0.wrapping_add(@v1)
    @v2 = @v2.wrapping_add(@v3)
    @v1 = rotate_left_u64(@v1, 13)
    @v3 = rotate_left_u64(@v3, 16)

    @v1 ^= @v0
    @v3 ^= @v2
    @v0 = rotate_left_u64(@v0, 32)

    @v2 = @v2.wrapping_add(@v1)
    @v0 = @v0.wrapping_add(@v3)
    @v1 = rotate_left_u64(@v1, 17)
    @v3 = rotate_left_u64(@v3, 21)

    @v1 ^= @v2
    @v3 ^= @v0
    @v2 = rotate_left_u64(@v2, 32)
  }
}

impl Hasher for SipHasher13 {
  fn pub mut write(value: Int) {
    @size += 1
    @m |= (value & 0xFF) << ((@m_index := @m_index + 1) * 8)

    if @m_index < 8 { return }

    @v3 ^= @m
    round
    @v0 ^= @m
    @m_index = 0
    @m = 0
  }

  fn pub move finish -> Int {
    let len = @size

    while @m_index < 7 { write(0) }

    write(len)
    @v2 ^= 0xFF
    round
    round
    round

    @v0 ^ @v1 ^ @v2 ^ @v3
  }
}
