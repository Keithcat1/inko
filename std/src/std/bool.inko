# Boolean true and false.
import std.clone (Clone)
import std.cmp (Compare, Equal, Ordering)
import std.fmt (Format, Formatter)
import std.hash (Hash, Hasher)
import std.int (ToInt)
import std.string (ToString)

# The class for boolean `true` and `false`.
class builtin Bool {
  # Returns `true` if `self` is `true`.
  #
  # # Examples
  #
  # ```inko
  # true.true?  # => true
  # false.true? # => false
  # ```
  fn pub true? -> Bool {
    self
  }

  # Returns `true` if `self` is `false`.
  #
  # # Examples
  #
  # ```inko
  # true.false?  # => false
  # false.false? # => true
  # ```
  fn pub false? -> Bool {
    self == false
  }

  # Calls the supplied closure and wraps its return value in a `Some` if `self`
  # is `true`, otherwise returns a `None`.
  #
  # # Examples
  #
  # ```inko
  # true.then fn { 10 }  # => Option.Some(10)
  # false.then fn { 10 } # => Option.None
  # ```
  fn pub then[T](func: fn -> T) -> Option[T] {
    if self { Option.Some(func.call) } else { Option.None }
  }
}

impl ToInt for Bool {
  fn pub to_int -> Int {
    self as Int64 as Int
  }
}

impl ToString for Bool {
  fn pub to_string -> String {
    if self { 'true' } else { 'false' }
  }
}

impl Clone[Bool] for Bool {
  fn pub clone -> Bool {
    self
  }
}

impl Equal[ref Bool] for Bool {
  fn pub ==(other: ref Bool) -> Bool {
    _INKO.int_eq(self, other)
  }
}

impl Compare[Bool] for Bool {
  fn pub cmp(other: ref Bool) -> Ordering {
    to_int.cmp(other.to_int)
  }
}

impl Hash for Bool {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    hasher.write(to_int)
  }
}

impl Format for Bool {
  fn pub fmt(formatter: mut Formatter) {
    if self { formatter.write('true') } else { formatter.write('false') }
  }
}
