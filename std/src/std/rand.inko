# Cryptographically secure random number generation.
import std.drop (Drop)

fn extern inko_random_new(process: Pointer[UInt8]) -> Pointer[UInt8]

fn extern inko_random_from_int(seed: Int) -> Pointer[UInt8]

fn extern inko_random_drop(rng: Pointer[UInt8])

fn extern inko_random_int(rng: Pointer[UInt8]) -> Int64

fn extern inko_random_float(rng: Pointer[UInt8]) -> Float64

fn extern inko_random_int_range(
  rng: Pointer[UInt8],
  min: Int,
  max: Int,
) -> Int64

fn extern inko_random_float_range(
  rng: Pointer[UInt8],
  min: Float64,
  max: Float64,
) -> Float64

fn extern inko_random_bytes(
  state: Pointer[UInt8],
  process: Pointer[UInt8],
  rng: Pointer[UInt8],
  size: Int,
) -> ByteArray

# A cryptographically secure pseudo random number generator (CSPRNG).
#
# The algorithm used is unspecified but guaranteed to be cryptographically
# secure.
type pub Random {
  # The internal/low-level random number generator.
  let @rng: Pointer[UInt8]

  # Returns a new `Random` using the given `Int` as its seed.
  #
  # `Random` instances created using this method **are not** suitable for
  # cryptography, as a single `Int` doesn't produce enough entropy. For
  # cryptography you _must_ use `Random.new` instead.
  #
  # # Examples
  #
  # ```inko
  # import std.rand (Random)
  #
  # Random.from_int(42)
  # ```
  fn pub static from_int(seed: Int) -> Random {
    Random(inko_random_from_int(seed))
  }

  # Returns a new `Random` seeded using a cryptographically secure seed.
  #
  # Seeding is performed by the runtime using a thread-local random number
  # generator suitable for cryptography.
  #
  # # Examples
  #
  # ```inko
  # import std.rand (Random)
  #
  # Random.new
  # ```
  fn pub static new -> Random {
    Random(inko_random_new(_INKO.process))
  }

  # Returns a randomly generated `Int`.
  #
  # # Examples
  #
  # ```inko
  # import std.rand (Random)
  #
  # Random.new.int
  # ```
  fn pub mut int -> Int {
    inko_random_int(@rng) as Int
  }

  # Returns a randomly generated `Float`.
  #
  # # Examples
  #
  # ```inko
  # import std.rand (Random)
  #
  # Random.new.float
  # ```
  fn pub mut float -> Float {
    inko_random_float(@rng) as Float
  }

  # Returns a randomly generated `Int` in the given range.
  #
  # The returned value is in the range `start <= value < stop`. If
  # `start >= stop` is true, this method returns `0`.
  fn pub int_between(min: Int, max: Int) -> Int {
    inko_random_int_range(@rng, min, max) as Int
  }

  # Returns a randomly generated `Float` in the given range.
  #
  # The returned value is in the range `start <= value < stop`. If
  # `start >= stop` is true, this method returns `0.0`.
  fn pub float_between(min: Float, max: Float) -> Float {
    inko_random_float_range(@rng, min as Float64, max as Float64) as Float
  }

  # Returns a `ByteArray` containing randomly generated bytes.
  #
  # The returned `ByteArray` will contain exactly `size` bytes.
  #
  # # Panics
  #
  # This method might panic if no random bytes could be generated.
  fn pub bytes(size: Int) -> ByteArray {
    inko_random_bytes(_INKO.state, _INKO.process, @rng, size)
  }
}

impl Drop for Random {
  fn mut drop {
    inko_random_drop(@rng)
  }
}
