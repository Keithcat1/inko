# Methods for converting values to/from big-endian encoded bytes.

fn size_error(min: Int) -> Never {
  panic('the ByteArray must contain at least ${min} bytes')
}

# Writes a value interpreted as a 32-bits unsigned integer into `into` as a
# series of bytes, starting at the index `at`.
#
# If `value` is greater than the maximum value of a 32-bits unsigned integer,
# the additional bits are ignored (i.e. the value wraps around).
#
# # Panics
#
# This method panics if `into` doesn't contain at least 4 values starting at
# index `at`.
#
# # Examples
#
# ```inko
# import std.endian.big
#
# let bytes = ByteArray.filled(with: 0, times: 4)
#
# big.write_i32(123456789, into: bytes, at: 0)
# bytes # => ByteArray.from_array([7, 91, 205, 21])
# ```
fn pub write_i32(value: Int, into: mut ByteArray, at: Int) {
  if into.size - at < 4 { size_error(4) }

  (into.to_pointer as Int + at as Pointer[UInt32]).0 = value.swap_bytes >>> 32
    as UInt32
}

# Writes a value interpreted as a 64-bits signed integer into `into` as a series
# of bytes, starting at the index `at`.
#
# # Panics
#
# This method panics if `into` doesn't contain at least 8 values starting at
# index `at`.
#
# # Examples
#
# ```inko
# import std.endian.big
#
# let bytes = ByteArray.filled(with: 0, times: 8)
#
# big.write_i64(123456789, into: bytes, at: 0)
# bytes # => ByteArray.from_array([7, 91, 205, 21])
# ```
fn pub write_i64(value: Int, into: mut ByteArray, at: Int) {
  if into.size - at < 8 { size_error(8) }

  (into.to_pointer as Int + at as Pointer[UInt64]).0 = value.swap_bytes
    as UInt64
}

# Reads four bytes starting at `at` as a 32-bits signed integer.
#
# # Panics
#
# This method panics if `from` doesn't contain at least 4 values starting at
# index `at`.
#
# # Examples
#
# ```inko
# import std.endian.big
#
# let bytes = ByteArray.filled(with: 0, times: 4)
#
# big.write_i32(123456789, into: bytes, at: 0)
# big.read_i32(from: bytes, at: 0) # => 123456789
# ```
fn pub read_i32(from: ref ByteArray, at: Int) -> Int {
  if from.size - at < 4 { size_error(4) }

  ((from.to_pointer as Int + at as Pointer[UInt32]).0 as Int).swap_bytes >>> 32
}

# Reads eight bytes starting at `at` as a 64-bits signed integer.
#
# # Panics
#
# This method panics if `from` doesn't contain at least 8 values starting at
# index `at`.
#
# # Examples
#
# ```inko
# import std.endian.big
#
# let bytes = ByteArray.filled(with: 0, times: 8)
#
# big.write_i64(123456789, into: bytes, at: 0)
# big.read_i64(from: bytes, at: 0) # => 123456789
# ```
fn pub read_i64(from: ref ByteArray, at: Int) -> Int {
  if from.size - at < 8 { size_error(8) }

  ((from.to_pointer as Int + at as Pointer[UInt64]).0 as Int).swap_bytes
}
