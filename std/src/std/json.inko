# Parsing and generating of JSON.
#
# # Parsing JSON
#
# This module provides support for parsing and generating JSON, conforming to
# RFC 8259 (https://www.rfc-editor.org/rfc/rfc8259). Tests were performed
# against the test corpus provided by the article
# https://seriot.ch/projects/parsing_json.html. Extensions such as parsing
# `NaN`, `Infinity`, and comments are not supported.
#
# The easiest way to parse JSON is using `Json.parse`:
#
#     import std.json.Json
#
#     Json.parse('[10]').get # => Json.Array([Json.Int(10)])
#
# The parser enforces limits on the number of nested objects and the size of
# strings. These limits can be adjusted by using the `Parser` type directly like
# so:
#
#     import std.json.Parser
#
#     let parser = Parser.new('[10]')
#
#     parser.max_depth = 4
#     parser.max_string_size = 128
#     parser.parse
#
# # Generating JSON
#
# Generating JSON strings is done using `Json.to_string` and
# `Json.to_pretty_string`:
#
#     import std.json.Json
#
#     Json.Array([Json.Int(1), Json.Int(2)]).to_string # => '[1, 2]'
#
# When using `to_pretty_string`, the default indentation is two spaces per
# indentation level. You can change this value by using the `Generator` type
# directly:
#
#     import std.json.(Generator, Json)
#
#     let val = Json.Array([Json.Int(1), Json.Int(2)])
#     let gen = Generator.new(indent: 4)
#
#     gen.generate(val)
#
# This would then produce the following JSON:
#
#     [
#         1,
#         2
#     ]
#
# # Performance
#
# The implementation provided by this module isn't optimised for maximum
# performance or optimal memory usage. Instead this module aims to provide an
# implementation that's good enough for most cases.
import std.cmp.Equal
import std.fmt.(Format as FormatTrait, Formatter)
import std.int.Format
import std.iter.Peekable
import std.string.(Bytes, StringBuffer, ToString)
import std.utf8

let BRACKET_OPEN = 0x5B
let BRACKET_CLOSE = 0x5D
let CURLY_OPEN = 0x7B
let CURLY_CLOSE = 0x7D
let DQUOTE = 0x22
let COMMA = 0x2C
let MINUS = 0x2D
let PLUS = 0x2B
let DOT = 0x2E
let COLON = 0x3A
let SLASH = 0x2F
let BSLASH = 0x5C
let SPACE = 0x20
let BS = 0x8
let TAB = 0x9
let LF = 0xA
let CR = 0xD
let FF = 0xC
let ZERO = 0x30
let NINE = 0x39
let LOWER_A = 0x61
let UPPER_A = 0x41
let LOWER_E = 0x65
let UPPER_E = 0x45
let UPPER_F = 0x5a
let LOWER_T = 0x74
let LOWER_F = 0x66
let LOWER_N = 0x6E
let LOWER_B = 0x62
let LOWER_R = 0x72
let LOWER_U = 0x75

# A table mapping bytes that follow a "\", and the types to replace the sequence
# with. A value of `-1` means there's no replacement.
let ESCAPE_TABLE = [
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1, DQUOTE,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,  SLASH,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1, BSLASH,     -1,     -1,     -1,
  -1,     -1,     BS,     -1,     -1,     -1,     FF,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     LF,     -1,
  -1,     -1,     CR,     -1,    TAB,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
  -1,     -1,     -1,     -1,     -1,     -1,     -1,
]

# The default amount of spaces to use for indentation when pretty-printing JSON
# objects.
let DEFAULT_PRETTY_INDENT = 2

fn digit?(byte: Int) -> Bool {
  byte >= ZERO and byte <= NINE
}

fn exponent?(byte: Int) -> Bool {
  byte == LOWER_E or byte == UPPER_E
}

fn char(byte: Int) -> String {
  ByteArray.from_array([byte]).into_string
}

# A type describing an error produced while parsing a JSON document.
class pub Error {
  # A human readable description of the error.
  let pub @message: String

  # The line number of the error.
  let pub @line: Int

  # The byte offset in the input string at which the error starts.
  #
  # Managing column counts is tricky, as this involves maintaining a grapheme
  # cluster counter, which is complicated and expensive. Instead we report a
  # byte offset (relative to the start of the input), as we need to maintain
  # this anyway.
  #
  # The article at https://www.foonathan.net/2021/02/column/ contains additional
  # information regarding this topic.
  let pub @offset: Int
}

impl Equal[ref Error] for Error {
  fn pub ==(other: ref Error) -> Bool {
    @message == other.message
      and @line == other.line
      and @offset == other.offset
  }
}

impl FormatTrait for Error {
  fn pub fmt(formatter: mut Formatter) {
    formatter
      .object('Error')
      .field('message', @message)
      .field('line', @line)
      .field('offset', @offset)
      .finish
  }
}

impl ToString for Error {
  fn pub to_string -> String {
    "{@message}, on line {@line} at byte offset {@offset}"
  }
}

# A type used to query/fetch data from a JSON value.
#
# Manually extracting values from JSON objects can be cumbersome. Take the
# following JSON for example:
#
#     {
#       "name": "Alice",
#       "address": {
#         "street": "Sesame Street"
#       }
#     }
#
# If we want to get the value of the `street` key, we'd have to write the
# following:
#
#     match json {
#       case Object(root) -> match root.opt('address') {
#         case Some(Object(addr)) -> match addr.opt('street') {
#           case Some(String(v)) -> Option.Some(v)
#           case _ -> Option.None
#         }
#         case _ -> Option.None
#       }
#       case _ -> Option.None
#     }
#
# In contrast, using the `Query` type we can instead write the following:
#
#     json.query.key('address').key('street').as_string
#
# Querying is done using the methods `Query.key` to get an object key's value,
# and `Query.index` to get the value of an array index. Methods such as
# `Query.as_string` and `Query.as_int` are used to extract the final value as a
# certain type, if such a value is present.
class pub Query {
  let @value: Option[ref Json]

  # Returns a `Query` that matches the value assigned to the object key `name`,
  # if the current value the query matches against is an object.
  #
  # # Examples
  #
  #     import std.json.Json
  #
  #     let map = Map.new
  #
  #     map.set('name', 'Alice')
  #     Json.Object(map).query.key('name').as_string # => Option.Some('alice')
  #     Json.Int(42).query.key('name').as_string     # => Option.None
  fn pub move key(name: String) -> Query {
    @value = match ref @value {
      case Some(Object(v)) -> v.opt(name)
      case _ -> Option.None
    }

    self
  }

  # Returns a `Query` that matches the value assigned to the array index
  # `index`, if the current value the query matches against is an array.
  #
  # # Examples
  #
  #     import std.json.Json
  #
  #     Json.Array([Json.Int(10)]).query.index(0).as_int # => Option.Some(10)
  #     Json.Int(42).query.index(0).as_int               # => Option.None
  fn pub move index(index: Int) -> Query {
    @value = match ref @value {
      case Some(Array(v)) -> v.opt(index)
      case _ -> Option.None
    }

    self
  }

  # Returns the value `self` matches against if it's a `String`.
  #
  # # Examples
  #
  #     import std.json.Json
  #
  #     Json.Int(42).query.as_string        # => Option.None
  #     Json.String('test').query.as_string # => Option.Some('test')
  fn pub move as_string -> Option[String] {
    match @value {
      case Some(String(v)) -> Option.Some(v)
      case _ -> Option.None
    }
  }

  # Returns the value `self` matches against if it's an `Int`.
  #
  # # Examples
  #
  #     import std.json.Json
  #
  #     Json.String('test').query.as_int # => Option.None
  #     Json.Int(42).query.as_int        # => Option.Some(42)
  fn pub move as_int -> Option[Int] {
    match @value {
      case Some(Int(v)) -> Option.Some(v)
      case _ -> Option.None
    }
  }

  # Returns the value `self` matches against if it's a `Float`.
  #
  # # Examples
  #
  #     import std.json.Json
  #
  #     Json.String('test').query.as_float # => Option.None
  #     Json.Float(42.0).query.as_float    # => Option.Some(42.0)
  fn pub move as_float -> Option[Float] {
    match @value {
      case Some(Float(v)) -> Option.Some(v)
      case _ -> Option.None
    }
  }

  # Returns the value `self` matches against if it's an `Object`.
  #
  # # Examples
  #
  #     import std.json.Json
  #
  #     let map = Map.new
  #
  #     map.set('name', 'Alice')
  #     Json.Object(map).query.as_object # => Option.Some(...)
  #     Json.Int(42).query.as_object     # => Option.None
  fn pub move as_object -> Option[ref Map[String, Json]] {
    match @value {
      case Some(Object(v)) -> Option.Some(v)
      case _ -> Option.None
    }
  }

  # Returns the value `self` matches against if it's an `Array`.
  #
  # # Examples
  #
  #     import std.json.Json
  #
  #     Json.Array([Json.Int(42)]).query.as_array # => Option.Some(...)
  #     Json.Int(42).query.as_array               # => Option.None
  fn pub move as_array -> Option[ref Array[Json]] {
    match @value {
      case Some(Array(v)) -> Option.Some(v)
      case _ -> Option.None
    }
  }
}

# A JSON value, such as `true` or an array.
class pub enum Json {
  case Int(Int)
  case Float(Float)
  case String(String)
  case Array(Array[Json])
  case Object(Map[String, Json])
  case Bool(Bool)
  case Null

  # Parses a `Bytes` into a JSON object.
  #
  # # Examples
  #
  # Parsing a `String`:
  #
  #     import std.json.Json
  #
  #     Json.parse('[10]') # => Result.Ok(Json.Array([Json.Int(10)]))
  #
  # Parsing a `ByteArray`:
  #
  #     import std.json.Json
  #
  #     Json.parse('[10]'.to_byte_array) # => Result.Ok(Json.Array([Json.Int(10)]))
  fn pub static parse[T: Bytes](bytes: ref T) -> Result[Json, Error] {
    Parser.new(bytes).parse
  }

  # Formats `self` as a JSON string using indentation for nested objects.
  #
  # This method uses two spaces per indentation. To customise the amount of
  # spaces you'll need to use the `Generator` type directly.
  #
  # # Examples
  #
  #     import std.json.Json
  #
  #     Json.Int(42).to_pretty_string               # => '42'
  #     Json.Array([Json.Int(42)]).to_pretty_string # => "[\n  42\n]"
  fn pub to_pretty_string -> String {
    Generator.new(DEFAULT_PRETTY_INDENT).generate(self)
  }

  # Returns a new `Query` that starts at `self`.
  #
  # See the documentation of the `Query` type for more information.
  #
  # # Examples
  #
  #     import std.json.Json
  #
  #     Json.Int(42).query.as_int # => Option.Some(42)
  fn pub query -> Query {
    Query { @value = Option.Some(self) }
  }
}

impl ToString for Json {
  # Formats `self` as a JSON string.
  #
  # # Examples
  #
  #     import std.json.Json
  #
  #     Json.Int(42).to_string               # => '42'
  #     Json.Array([Json.Int(42)]).to_string # => '[42]'
  fn pub to_string -> String {
    Generator.new(0).generate(self)
  }
}

impl FormatTrait for Json {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Int(val) -> formatter.tuple('Int').field(val).finish
      case Float(val) -> formatter.tuple('Float').field(val).finish
      case String(val) -> formatter.tuple('String').field(val).finish
      case Array(val) -> formatter.tuple('Array').field(val).finish
      case Object(val) -> formatter.tuple('Object').field(val).finish
      case Bool(val) -> formatter.tuple('Bool').field(val).finish
      case Null -> formatter.tuple('Null').finish
    }
  }
}

impl Equal[ref Json] for Json {
  fn pub ==(other: ref Json) -> Bool {
    match self {
      case Int(lhs) -> match other {
        case Int(rhs) -> lhs == rhs
        case _ -> false
      }
      case Float(lhs) -> match other {
        case Float(rhs) -> lhs == rhs
        case _ -> false
      }
      case String(lhs) -> match other {
        case String(rhs) -> lhs == rhs
        case _ -> false
      }
      case Array(lhs) -> match other {
        case Array(rhs) -> lhs == rhs
        case _ -> false
      }
      case Object(lhs) -> match other {
        case Object(rhs) -> lhs == rhs
        case _ -> false
      }
      case Bool(lhs) -> match other {
        case Bool(rhs) -> lhs == rhs
        case _ -> false
      }
      case Null -> match other {
        case Null -> true
        case _ -> false
      }
    }
  }
}

# A type for parsing a stream of bytes into a JSON object.
#
# This parser only supports parsing `ByteArray` values as input. If you need to
# parse very large documents, it's best to separate the objects on a per line
# basis, then parse the document one line at a time.
#
# # Nested arrays and objects
#
# This parser enforces a limit on the number of nested arrays and objects. The
# default is sufficiently large that most documents won't result in an error
# being thrown. You can change this limit by adjusting the value of the
# `max_depth` field.
#
# # String sizes
#
# Strings are limited to a maximum size defined in bytes. This size defaults to
# 10 MiB _per string_. You can change this limit by adjusting the value of the
# `max_string_size` field.
class pub Parser {
  let @input: Peekable[Int]
  let @offset: Int
  let @line: Int
  let @depth: Int
  let @buffer: ByteArray

  # The maximum number of nested values.
  #
  # When parsing an array or object that exceeds this depth, an error is thrown.
  let pub @max_depth: Int

  # The maximum size of a string in bytes.
  #
  # When parsing a string that exceeds this limit, an error is thrown.
  let pub @max_string_size: Int

  # Returns a new parser that will parse the given `Bytes` value.
  fn pub static new[T: Bytes](input: ref T) -> Parser {
    Parser {
      @input = input.bytes.peekable,
      @offset = -1,
      @line = 1,
      @depth = 0,
      @max_depth = 100,
      @max_string_size = 10 * 1024 * 1024,
      @buffer = ByteArray.new,
    }
  }

  # Parses the input into a JSON object.
  #
  # If the input is invalid JSON, this method throws an `Error`.
  #
  # # Examples
  #
  #     import std.json.Parser
  #
  #     let parser = Parser.new('[10, 20]')
  #
  #     parser.parse.get # => Json.Array([Json.Int(10), Json.Int(20)])
  fn pub move parse -> Result[Json, Error] {
    let result = try value

    whitespace

    # Only trailing whitespace is allowed.
    match peek {
      case Some(val) -> throw unexpected(val)
      case _ -> {}
    }

    Result.Ok(result)
  }

  fn mut value -> Result[Json, Error] {
    if @depth >= @max_depth {
      throw error("Only up to {@max_depth} nested objects/arrays are allowed")
    }

    whitespace

    loop {
      match peek {
        case Some(MINUS) -> return number
        case Some(BRACKET_OPEN) -> return array
        case Some(CURLY_OPEN) -> return object
        case Some(LOWER_T) -> return self.true
        case Some(LOWER_F) -> return self.false
        case Some(LOWER_N) -> return null
        case Some(DQUOTE) -> return string
        case Some(byte) if digit?(byte) -> return number
        # This is to take care of any random garbage that may be included in the
        # JSON document, including Unicode BOMs. This also saves us from having
        # to explicitly check for all the different BOMs.
        case Some(byte) -> throw unexpected(byte)
        case _ -> throw unexpected_eof
      }
    }
  }

  fn mut string -> Result[Json, Error] {
    string_value.map fn (val) { Json.String(val) }
  }

  fn mut string_value -> Result[String, Error] {
    advance

    loop {
      match advance {
        case Some(BSLASH) -> match advance {
          case Some(LOWER_U) -> try escaped_unicode
          case Some(byte) -> match ESCAPE_TABLE.get(byte) {
            case -1 -> throw unexpected(byte)
            case val -> @buffer.push(val)
          }
          case _ -> throw unexpected_eof
        }
        case Some(DQUOTE) -> break
        case Some(val) if val >= 0x0 and val <= 0x001F -> {
          throw invalid_control(val)
        }
        case Some(byte) -> @buffer.push(byte)
        case _ -> throw unexpected_eof
      }
    }

    if @buffer.size > @max_string_size {
      throw error(
        "The size of this string ({@buffer.size} bytes) is greater than the maximum of {@max_string_size} bytes"
      )
    }

    Result.Ok(@buffer.drain_to_string)
  }

  fn mut escaped_unicode -> Result[Nil, Error] {
    let high = try codepoint

    if utf8.encode_scalar(high, @buffer) > 0 { return Result.Ok(nil) }

    # At this point the codepoint is either straight up invalid (e.g. "\uZZZZ"),
    # or it's a UTF-16 surrogate.
    if utf8.surrogate?(high).false? {
      throw error("'{high.format(Format.Hex)}' is an invalid UTF-16 surrogate")
    }

    try expect(BSLASH)
    try expect(LOWER_U)

    let low = try codepoint

    if utf8.surrogate?(low) {
      let codepoint = utf8.codepoint_from_surrogates(high, low)

      # The encoding may fail for pairs such as "\uDFFF\uDFFF".
      if utf8.encode_scalar(codepoint, @buffer) > 0 { return Result.Ok(nil) }
    }

    let pair = "\\u{high.format(Format.Hex)}\\u{low.format(Format.Hex)}"

    throw error("'{pair}' is an invalid UTF-16 surrogate pair")
  }

  fn mut codepoint -> Result[Int, Error] {
    let mut num = 0
    let mut idx = 0

    while idx < 4 {
      let digit = match advance {
        case Some(byte) -> {
          if byte >= ZERO and byte <= NINE {
            byte - ZERO
          } else if byte >= LOWER_A and byte <= LOWER_F {
            byte - LOWER_A + 10
          } else if byte >= UPPER_A and byte <= UPPER_F {
            byte - UPPER_A + 10
          } else {
            throw unexpected(byte)
          }
        }
        case _ -> throw unexpected_eof
      }

      num = num * 16 + digit
      idx += 1
    }

    Result.Ok(num)
  }

  fn mut true -> Result[Json, Error] {
    try identifier('true')
    Result.Ok(Json.Bool(true))
  }

  fn mut false -> Result[Json, Error] {
    try identifier('false')
    Result.Ok(Json.Bool(false))
  }

  fn mut null -> Result[Json, Error] {
    try identifier('null')
    Result.Ok(Json.Null)
  }

  fn mut array -> Result[Json, Error] {
    advance

    let values = []

    @depth += 1

    loop {
      match peek {
        case Some(BRACKET_CLOSE) -> break
        case Some(_) -> {
          values.push(try value)
          try separator(BRACKET_CLOSE)
        }
        case _ -> throw unexpected_eof
      }
    }

    @depth -= 1
    advance
    Result.Ok(Json.Array(values))
  }

  fn mut object -> Result[Json, Error] {
    advance
    whitespace

    let map = Map.new

    @depth += 1

    loop {
      match peek {
        case Some(CURLY_CLOSE) -> break
        case Some(DQUOTE) -> {
          let key = try string_value

          try expect(COLON)

          let val = try value

          try separator(CURLY_CLOSE)
          map.set(key, val)
        }
        case Some(byte) -> throw unexpected(byte)
        case _ -> throw unexpected_eof
      }
    }

    advance
    @depth -= 1
    Result.Ok(Json.Object(map))
  }

  fn mut number -> Result[Json, Error] {
    match peek {
      case Some(MINUS) -> {
        advance_and_buffer

        match peek {
          case Some(byte) if digit?(byte) -> {}
          case Some(byte) -> throw unexpected(byte)
          case _ -> throw unexpected_eof
        }
      }
      case _ -> {}
    }

    # Numbers such as 001, 010, 01.0, etc are invalid.
    match peek {
      case Some(ZERO) -> {
        advance_and_buffer

        match peek {
          case Some(byte) if digit?(byte) -> throw unexpected(byte)
          case _ -> {}
        }
      }
      case _ -> {}
    }

    buffer_digits

    match peek {
      # Examples: 1.2, 1.2e1, 1.2e+1
      case Some(DOT) -> {
        advance_and_buffer

        match peek {
          case Some(byte) if digit?(byte) -> {}
          case Some(byte) -> throw unexpected(byte)
          case _ -> throw unexpected_eof
        }

        buffer_digits

        match peek {
          case Some(byte) if exponent?(byte) -> try exponent
          case _ -> {}
        }
      }
      # Example: 1E4
      case Some(byte) if exponent?(byte) -> try exponent
      # Example: 123
      #
      # If the number is too big to fit in an Int, we'll promote it to a Float.
      case _ -> match Int.parse(@buffer, Format.Decimal) {
        case Some(val) -> {
          @buffer.clear
          return Result.Ok(Json.Int(val))
        }
        case _ -> {}
      }
    }

    # At this point we've already validated the input format, and it's
    # compatible with the underlying float parser, so no extra checks are
    # needed.
    let res = Result.Ok(Json.Float(Float.parse(@buffer).get))

    @buffer.clear
    res
  }

  fn mut exponent -> Result[Nil, Error] {
    advance_and_buffer

    match peek {
      case Some(MINUS or PLUS) -> {
        advance_and_buffer
        nil
      }
      case _ -> {}
    }

    match peek {
      case Some(byte) if digit?(byte) -> {}
      case Some(byte) -> throw unexpected(byte)
      case _ -> throw unexpected_eof
    }

    buffer_digits
    Result.Ok(nil)
  }

  fn mut buffer_digits {
    loop {
      match peek {
        case Some(byte) if digit?(byte) -> {
          advance
          @buffer.push(byte)
        }
        case _ -> break
      }
    }
  }

  fn mut advance_line {
    advance
    @line += 1
  }

  fn mut advance_and_buffer -> Option[Int] {
    match advance {
      case Some(val) -> {
        @buffer.push(val)
        Option.Some(val)
      }
      case _ -> Option.None
    }
  }

  fn mut advance -> Option[Int] {
    let res = @input.next

    if res.some? { @offset += 1 }

    res
  }

  fn mut expect(byte: Int) -> Result[Nil, Error] {
    match advance {
      case Some(val) if val == byte -> Result.Ok(nil)
      case Some(val) -> throw error(
        "The character '{char(byte)}' is expected, but '{char(val)}' was found instead"
      )
      case _ -> throw unexpected_eof
    }
  }

  fn mut peek -> Option[Int] {
    @input.peek
  }

  fn mut identifier(name: String) -> Result[Nil, Error] {
    let mut index = 0
    let max = name.size

    while index < max { try expect(name.byte(index := index + 1)) }

    Result.Ok(nil)
  }

  fn mut separator(closing: Int) -> Result[Nil, Error] {
    whitespace

    match peek {
      case Some(byte) if byte == closing -> return Result.Ok(nil)
      case Some(COMMA) -> {
        advance
        whitespace
      }
      case Some(byte) -> throw unexpected(byte)
      case _ -> throw unexpected_eof
    }

    match peek {
      case Some(byte) if byte == closing -> throw unexpected(byte)
      case _ -> Result.Ok(nil)
    }
  }

  fn mut whitespace {
    loop {
      match peek {
        case Some(SPACE or CR or TAB) -> {
          advance
          nil
        }
        case Some(LF) -> advance_line
        case _ -> break
      }
    }
  }

  fn invalid_control(byte: Int) -> Error {
    error("The control character {byte.format(Format.Hex)} must be escaped")
  }

  fn unexpected(byte: Int) -> Error {
    error("The character '{ByteArray.from_array([byte])}' is unexpected")
  }

  fn unexpected_eof -> Error {
    error("One or more tokens are required, but we ran out of input")
  }

  fn error(message: String) -> Error {
    Error { @message = message, @line = @line, @offset = @offset }
  }
}

# A type for turning a `Json` value into a JSON string.
#
# This type is used by `Json.to_string` and `Json.to_pretty_string`. Unless you
# want to use custom indentation, it's recommended to use these methods instead
# of using `Generator` directly.
class pub Generator {
  let @pretty: Bool
  let @spaces: String
  let @depth: Int
  let @buffer: StringBuffer

  # Returns a new `Generator` using the given indentation level.
  #
  # The `indent` argument specifies the number of spaces to use per indentation
  # level. If this value is less than or equal to zero, no indentation is
  # applied.
  fn pub static new(indent: Int) -> Generator {
    Generator {
      @pretty = indent > 0,
      @spaces = ' '.repeat(indent),
      @depth = 0,
      @buffer = StringBuffer.new
    }
  }

  # Generates a JSON string for the given `Json` value.
  #
  # # Examples
  #
  #     import std.json.Generator
  #
  #     Generator.new(indent: 2).generate(Json.Array([Json.Int(1)])) # => '[1]'
  fn pub mut generate(value: ref Json) -> String {
    generate_value(value)
    @buffer.to_string
  }

  fn mut generate_value(value: ref Json) {
    match value {
      case Int(val) -> @buffer.push(val.to_string)
      case Float(val) -> @buffer.push(val.to_string)
      case String(val) -> {
        @buffer.push('"')
        @buffer.push(val.escaped)
        @buffer.push('"')
      }
      case Array(vals) -> {
        @buffer.push('[')

        if vals.size > 0 {
          enter fn {
            vals.iter.each_with_index fn (index, val) {
              if index > 0 { separator }

              indent
              generate_value(val)
            }
          }
        }

        indent
        @buffer.push(']')
      }
      case Object(vals) -> {
        @buffer.push('{')

        if vals.size > 0 {
          enter fn {
            vals.iter.each_with_index fn (index, pair) {
              if index > 0 { separator }

              indent
              @buffer.push('"')
              @buffer.push(pair.key.escaped)
              @buffer.push('": ')
              generate_value(pair.value)
            }
          }
        }

        indent
        @buffer.push('}')
      }
      case Bool(val) -> @buffer.push(val.to_string)
      case Null -> @buffer.push('null')
    }
  }

  fn mut enter(block: fn) {
    newline
    @depth += 1
    block.call
    @depth -= 1
    newline
  }

  fn mut indent {
    if @pretty { @depth.times fn (_) { @buffer.push(@spaces) } }
  }

  fn mut newline {
    if @pretty { @buffer.push("\n") }
  }

  fn mut separator {
    @buffer.push(if @pretty { ",\n" } else { ', ' })
  }
}
