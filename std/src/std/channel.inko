# A multi-producer, multi-consumer FIFO queue.
import std.clone.Clone
import std.drop.Drop
import std.time.Instant

class extern AnyResult {
  let @tag: Int
  let @value: UInt64
}

fn extern inko_channel_drop(channel: Pointer[UInt8])
fn extern inko_channel_new(size: Int) -> Pointer[UInt8]
fn extern inko_channel_receive(
  process: Pointer[UInt8],
  channel: Pointer[UInt8],
) -> UInt64

fn extern inko_channel_receive_until(
  state: Pointer[UInt8],
  process: Pointer[UInt8],
  channel: Pointer[UInt8],
  time: Int,
) -> AnyResult

fn extern inko_channel_send(
  state: Pointer[UInt8],
  process: Pointer[UInt8],
  channel: Pointer[UInt8],
  message: UInt64,
)

fn extern inko_channel_try_receive(
  process: Pointer[UInt8],
  channel: Pointer[UInt8],
) -> AnyResult

# A multi-producer, multi-consumer FIFO queue.
#
# Channels allow for multiple producers and consumers, uses FIFO ordering, and
# are bounded. When sending a message to a channel that's full, the sending
# process is blocked until space becomes available.
#
# Channels use atomic reference counting and are dropped (along with any pending
# messages) when the last reference to the channel is dropped. Channels are
# treated as value types and are sendable to other processes without the need
# for the `recover` expression.
class builtin Channel[T] {
  # The synchronized inner state of the channel.
  #
  # We sadly have to use a pointer here as Rust's `Mutex` type (used to wrap the
  # state in the runtime) isn't FFI safe.
  let @state: Pointer[UInt8]

  # Returns a new channel that can store the given number of messages.
  #
  # If you specify a value less than 1, the size is set to 1.
  fn pub static new(size: Int) -> Channel[uni T] {
    Channel { @state = inko_channel_new(size) }
  }

  # Sends a message to the channel.
  #
  # If the channel is full, the current process is blocked until space is
  # available in the channel.
  #
  # # Examples
  #
  #     let chan = Channel.new(size: 4)
  #
  #     chan.send(1)
  #     chan.send(2)
  fn pub send(value: uni T) {
    inko_channel_send(_INKO.state, _INKO.process, @state, value as UInt64)
  }

  # Receives a message from the channel.
  #
  # This method blocks the current process until a message is delivered.
  #
  # # Examples
  #
  #     let chan = Channel.new(size: 1)
  #
  #     chan.send(1)
  #     chan.receive # => 1
  fn pub receive -> uni T {
    inko_channel_receive(_INKO.process, @state) as uni T
  }

  # Receives a message from the channel without blocking the sender.
  #
  # If a message is availabe, it's returned as a `Some`, otherwise a `None` is
  # returned.
  #
  # # Examples
  #
  #     let chan = Channel.new(size: 1)
  #
  #     chan.try_receive # => Option.None
  #     chan.send(1)
  #     chan.try_receive # => Option.Some(1)
  fn pub try_receive -> Option[uni T] {
    match inko_channel_try_receive(_INKO.process, @state) {
      case { @tag = 0, @value = v } -> Option.Some(v as uni T)
      case _ -> Option.None
    }
  }

  # Receives a message, returning a `None` if no message is received when the
  # deadline is met.
  #
  #     import std.time.Instant
  #     import std.time.Duration
  #
  #     let duration = Duration.from_secs(1)
  #     let chan = Channel.new(size: 1)
  #
  #     chan.receive_until(deadline: Instant.new + duration) # => Option.None
  #     chan.send(1)
  #     chan.receive_until(deadline: Instant.new + duration) # => Option.Some(1)
  fn pub receive_until(deadline: ref Instant) -> Option[uni T] {
    match inko_channel_receive_until(
      _INKO.state, _INKO.process, @state, deadline.to_int
    ) {
      case { @tag = 0, @value = v } -> Option.Some(v as uni T)
      case _ -> Option.None
    }
  }
}

impl Clone[Channel[T]] for Channel {
  fn pub clone -> Channel[T] {
    self
  }
}

impl Drop for Channel {
  fn mut drop {
    loop {
      match inko_channel_try_receive(_INKO.process, @state) {
        # The value is dropped at the end of this scope.
        case { @tag = 0, @value = v } -> v as T
        case _ -> break
      }
    }

    inko_channel_drop(@state)
  }
}
