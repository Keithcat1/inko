# Types and methods for dealing with time.
import std.clone (Clone)
import std.cmp (Compare, Equal, Ordering)
import std.float (ToFloat)
import std.fmt (Format, Formatter)
import std.int (ToInt)
import std.ops (Add, Multiply, Subtract)
import std.sys.unix.time (self as sys) if unix

let SECS_PER_MIN = 60
let SECS_PER_HOUR = 3600
let SECS_PER_DAY = 86_400
let DAYS_PER_WEEK = 7
let NANOS_PER_SEC = 1_000_000_000.0
let MICROS_PER_SEC = 1_000_000
let MILLIS_PER_SEC = 1_000

# The number of days since the start of the year for each month, for a leap
# year.
let LEAP_DAYS = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 205, 335]

# The number of days since the start of the year for each month, for a regular
# year.
let NORMAL_DAYS = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 204, 334]

fn negative_time_error(time: Int) -> Never {
  panic("Instant can't represent a negative time (${time})")
}

# A span of time measured in nanoseconds.
#
# A `Duration` can be used to measure the span of time without having to worry
# about casting the time to different scales yourself. A `Duration` can be
# created using various scales such as seconds and milliseconds.
#
# `Duration` measures a time duration in nanoseconds, limiting it to durations
# of up to 292 years. Operations producing values greater than this range will
# panic.
#
# `Duration` objects can represent negative durations such as "-5 seconds". This
# is useful when performing arithmetic on `Duration` objects, as you won't have
# to worry about overflows. It also lets you represent a duration that goes back
# in time, i.e. "something that happened 5 seconds ago".
class pub copy Duration {
  let @nanos: Int

  # Creates a new `Duration` from the given number of seconds.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Duration)
  #
  # Duration.from_secs(10.5)
  # ```
  fn pub inline static from_secs[T: ToFloat](secs: ref T) -> Duration {
    Duration((secs.to_float * NANOS_PER_SEC).to_int)
  }

  # Creates a new `Duration` from the given number of milliseconds.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Duration)
  #
  # Duration.from_millis(10)
  # ```
  fn pub inline static from_millis[T: ToInt](millis: ref T) -> Duration {
    Duration(millis.to_int * MICROS_PER_SEC)
  }

  # Creates a new `Duration` from the given number of microseconds.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Duration)
  #
  # Duration.from_micros(10)
  # ```
  fn pub inline static from_micros[T: ToInt](micros: ref T) -> Duration {
    Duration(micros.to_int * MILLIS_PER_SEC)
  }

  # Creates a new `Duration` from the given number of nanoseconds.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Duration)
  #
  # Duration.from_nanos(10)
  # ```
  fn pub inline static from_nanos[T: ToInt](nanos: ref T) -> Duration {
    Duration(nanos.to_int)
  }

  # Returns the duration in seconds.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Duration)
  #
  # Duration.from_secs(5).to_secs # => 5.0
  # ```
  fn pub inline to_secs -> Float {
    @nanos.to_float / NANOS_PER_SEC
  }

  # Returns the duration in milliseconds.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Duration)
  #
  # Duration.from_secs(5).to_millis # => 5000
  # ```
  fn pub inline to_millis -> Int {
    @nanos / MICROS_PER_SEC
  }

  # Returns the duration in microseconds.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Duration)
  #
  # Duration.from_secs(5).to_micros # => 5000000
  # ```
  fn pub inline to_micros -> Int {
    @nanos / MILLIS_PER_SEC
  }

  # Returns the duration in nanoseconds.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Duration)
  #
  # Duration.from_secs(5).to_nanos # => 5000000000
  # ```
  fn pub inline to_nanos -> Int {
    @nanos
  }
}

impl ToInstant for Duration {
  # Adds `self` to the current monotonic time, returning a new `Instant`
  # representing the resulting point in time.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Duration, Instant)
  #
  # let duration = Duration.from_secs(5)
  #
  # duration.to_instant.remaining <= duration # => true
  # ```
  #
  # # Panics
  #
  # This method panics if the resulting `Instant` is invalid, such as when it's
  # a negative time.
  fn pub inline to_instant -> Instant {
    Instant.new + self
  }
}

impl Clone[Duration] for Duration {
  fn pub inline clone -> Duration {
    Duration(@nanos)
  }
}

impl Add[Duration, Duration] for Duration {
  fn pub inline +(other: ref Duration) -> Duration {
    Duration(@nanos + other.nanos)
  }
}

impl Subtract[Duration, Duration] for Duration {
  fn pub inline -(other: ref Duration) -> Duration {
    Duration(@nanos - other.nanos)
  }
}

impl Multiply[Int, Duration] for Duration {
  fn pub inline *(other: ref Int) -> Duration {
    Duration(@nanos * other)
  }
}

impl Compare[Duration] for Duration {
  fn pub inline cmp(other: ref Duration) -> Ordering {
    @nanos.cmp(other.nanos)
  }
}

impl Equal[ref Duration] for Duration {
  fn pub inline ==(other: ref Duration) -> Bool {
    @nanos == other.nanos
  }
}

impl Format for Duration {
  fn pub fmt(formatter: mut Formatter) {
    let abs = @nanos.absolute
    let write = if abs >= 1_000_000_000 {
      '${to_secs} sec'
    } else if abs >= 1_000_000 {
      '${to_millis} msec'
    } else if abs >= 1_000 {
      '${to_micros} Âµsec'
    } else {
      '${@nanos} nsec'
    }

    formatter.write(write)
  }
}

# A type representing a date in the Gregorian calendar, without a time and
# timezone.
class pub copy Date {
  # The year, month and day packed into a single set of bits.
  #
  # The layout is as follows (starting with the least significant bits):
  #
  # 1. 5 bits for the day
  # 1. 4 bits for the month
  # 1. Up to 32 bits for the year
  #
  # For example, the date 1992-08-21 is encoded as follows:
  #
  #     11111001000 1000 10101
  let @bits: Int

  # Returns a new `Date`, provided the given components are valid.
  #
  # The arguments must be values in the following ranges:
  #
  # - `year`: -2147483648 up to and including 2147483647
  # - `month`: 1 up to and including 12
  # - `day`: 1 up to and including 31
  #
  # If any of the arguments are out of bounds, an `Option.None` is returned.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Date)
  #
  # let date = Date
  #   .new(year: 2024, month: 12, day: 17)
  #   .or_panic('the Date is invalid')
  #
  # date.year # => 2024
  # ```
  fn pub inline static new(year: Int, month: Int, day: Int) -> Option[Date] {
    if
      year >= -2147483648
        and year <= 2147483647
        and month >= 1
        and month <= 12
        and day >= 1
        and day <= 31
    {
      Option.Some(new_unchecked(year, month, day))
    } else {
      Option.None
    }
  }

  fn inline static new_unchecked(year: Int, month: Int, day: Int) -> Date {
    Date((year << 9) | (month << 5) | day)
  }

  # Returns the year.
  fn pub inline year -> Int {
    @bits >> 9
  }

  # Returns the month in the range `1` to `12`.
  fn pub inline month -> Int {
    @bits >> 5 & 0xF
  }

  # Returns the day in the range `1` to `31`.
  fn pub inline day -> Int {
    @bits & 0x1F
  }

  # Returns the number of days between `self` and the Unix epoch.
  #
  # The returned `Int` is negative if `self` is before the Unix epoch, and
  # positive for a value that is on or after the Unix epoch.
  fn pub days_since_unix_epoch -> Int {
    let year = if month <= 2 { year - 1 } else { year }
    let month = month
    let era = if year >= 0 { year } else { year - 399 } / 400
    let yoe = year - (era * 400)
    let doy = (((153 * if month > 2 { month - 3 } else { month + 9 }) + 2) / 5)
      + day
      - 1
    let doe = (yoe * 365) + (yoe / 4) - (yoe / 100) + doy

    (era * 146_097) + doe - 719_468
  }

  # Returns the day of the week from 1 to 7.
  #
  # Per ISO 8601 the first day of the week starts on Monday, not Sunday.
  fn pub day_of_week -> Int {
    # January 1st, 1970 (our anchor date) was on a Thursday. We add 3 so that
    # Monday (3 days before Thursday) becomes the anchor date.
    #
    # We later on add 1 since the % operator will return 0 for Monday (since its
    # the first value in the range), but week days range from 1 to 7; not 0 to
    # 6.
    #
    # The following table should help illustrate this:
    #
    # | Date       | Day of week | days_since_unix_epoch
    # |:-----------|:------------|:----------------------
    # | 1969-12-29 | Monday      | -3
    # | 1969-12-30 | Tuesday     | -2
    # | 1969-12-31 | Wednesday   | -1
    # | 1970-01-01 | Thursday    | 0
    # | 1970-01-02 | Friday      | 1
    # | 1970-01-03 | Saturday    | 2
    # | 1970-01-04 | Sunday      | 3
    #
    # For these dates, the calculations would be as follows:
    #
    # | Date       | Calculation        | Simplified  | Return value
    # |:-----------|:-------------------|:------------|:------------
    # | 1969-12-29 | ((-3 + 3) % 7) + 1 | (0 % 7) + 1 | 1
    # | 1969-12-30 | ((-2 + 3) % 7) + 1 | (1 % 7) + 1 | 2
    # | 1969-12-31 | ((-1 + 3) % 7) + 1 | (2 % 7) + 1 | 3
    # | 1970-01-01 | ((0 + 3) % 7) + 1  | (3 % 7) + 1 | 4
    # | 1970-01-02 | ((1 + 3) % 7) + 1  | (4 % 7) + 1 | 5
    # | 1970-01-03 | ((2 + 3) % 7) + 1  | (5 % 7) + 1 | 6
    # | 1970-01-04 | ((3 + 3) % 7) + 1  | (6 % 7) + 1 | 7
    days_since_unix_epoch + 3 % DAYS_PER_WEEK + 1
  }

  # Returns the day of the year from 1 to 366 for leap years, and from 1 to 365
  # for regular years.
  fn pub day_of_year -> Int {
    let days = if leap_year? { LEAP_DAYS } else { NORMAL_DAYS }

    days.get(month - 1) + day
  }

  # Returns `true` if the current year is a leap year.
  fn pub leap_year? -> Bool {
    let year = year

    (year % 4) == 0 and ((year % 100) > 0 or (year % 400) == 0)
  }
}

impl Equal[Date] for Date {
  fn pub ==(other: Date) -> Bool {
    @bits == other.bits
  }
}

impl Format for Date {
  fn pub fmt(formatter: mut Formatter) {
    let year = year.to_string.pad_start(with: '0', chars: 4)
    let month = month.to_string.pad_start(with: '0', chars: 2)
    let day = day.to_string.pad_start(with: '0', chars: 2)

    formatter.write('${year}-${month}-${day}')
  }
}

# A type that represents a point in time (hours, minutes and seconds) without a
# specific associated date.
class pub copy Time {
  # The hour, minute and second packed into a single set of bits.
  #
  # The layout is as follows (starting with the least significant bits):
  #
  # 1. 6 bits for the seconds
  # 1. 6 bits for the minutes
  # 1. 5 bits for the hour
  #
  # For example, the time 12:45:30 is encoded as follows:
  #
  #     1100 101101 011110
  let @bits: Int
  let @sub_second: Float

  # Returns a new `Time`, provided the given components are valid.
  #
  # The arguments must be values in the following ranges:
  #
  # - `hour`: 0 up to and including 24
  # - `minute`: 0 up to and including 59
  # - `second`: 0 up to and including 60
  #
  # If any of the arguments are out of bounds, an `Option.None` is returned.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Time)
  #
  # let time = Time
  #   .new(hour: 12, minute: 30, second: 0, sub_second: 0.0)
  #   .or_panic('the Time is invalid')
  #
  # time.hour # => 12
  # ```
  fn pub inline static new(
    hour: Int,
    minute: Int,
    second: Int,
    sub_second: Float,
  ) -> Option[Time] {
    if
      hour >= 0
        and hour <= 24
        and minute >= 0
        and minute <= 59
        and second >= 0
        and second <= 60
        and sub_second >= 0.0
    {
      Option.Some(new_unchecked(hour, minute, second, sub_second))
    } else {
      Option.None
    }
  }

  fn inline static new_unchecked(
    hour: Int,
    minute: Int,
    second: Int,
    sub_second: Float,
  ) -> Time {
    Time(bits: (hour << 12) | (minute << 6) | second, sub_second: sub_second)
  }

  # Returns the hour of the day in the range `0` to `23`.
  fn pub inline hour -> Int {
    @bits >> 12
  }

  # Returns the minute of the hour in the range `0` to `59`.
  fn pub inline minute -> Int {
    @bits >> 6 & 0x3F
  }

  # Returns the number of seconds in the range `0` to `59`.
  fn pub inline second -> Int {
    @bits & 0x3F
  }

  # Returns the number of sub seconds.
  fn pub inline sub_second -> Float {
    @sub_second
  }
}

impl Equal[Time] for Time {
  fn pub ==(other: Time) -> Bool {
    @bits == other.bits and @sub_second == other.sub_second
  }
}

impl Format for Time {
  fn pub fmt(formatter: mut Formatter) {
    let hour = hour.to_string.pad_start(with: '0', chars: 2)
    let min = minute.to_string.pad_start(with: '0', chars: 2)
    let secs = second.to_string.pad_start(with: '0', chars: 2)

    formatter.write('${hour}:${min}:${secs}')
  }
}

# A date and time based on the Gregorian calendar.
#
# Internally the time is represented as the number of seconds since the Unix
# epoch, excluding leap seconds.
#
# `DateTime` is based on the Gregorian calendar, and doesn't support additional
# calendars such as the Julian calendar.
#
# If you want to measure the duration between two events, it's best to use the
# `Instant` type, as it's not affected by external factors such as clock
# adjustments and leap seconds.
class pub inline DateTime {
  let @date: Date
  let @time: Time
  let @utc_offset: Int

  # Returns a new `DateTime` using the given components.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Date, DateTime, Time)
  #
  # let date = Date.new(year: 1992, month: 8, day: 21).get
  # let time = Time.new(hour: 12, minute: 15, second: 30, sub_second: 0.0).get
  #
  # DateTime.new(date, time, utc_offset: 3600)
  # ```
  fn pub inline static new(
    date: Date,
    time: Time,
    utc_offset: Int,
  ) -> DateTime {
    DateTime(date: date, time: time, utc_offset: utc_offset)
  }

  # Returns a new `DateTime` representing the current time using the system's
  # local time.
  #
  # # Examples
  #
  # ```inko
  # import std.time (DateTime)
  #
  # DateTime.local
  # ```
  fn pub static local -> DateTime {
    let raw = sys.local_time

    DateTime(
      date: Date.new_unchecked(raw.year, raw.month, raw.day),
      time: Time.new_unchecked(raw.hour, raw.minute, raw.second, raw.sub_second),
      utc_offset: raw.offset,
    )
  }

  # Returns a new `DateTime` representing the current system time using UTC as
  # the timezone.
  #
  # # Examples
  #
  # ```inko
  # import std.time (DateTime)
  #
  # DateTime.utc
  # ```
  fn pub static utc -> DateTime {
    let raw = sys.utc_time

    DateTime(
      date: Date.new_unchecked(raw.year, raw.month, raw.day),
      time: Time.new_unchecked(raw.hour, raw.minute, raw.second, raw.sub_second),
      utc_offset: 0,
    )
  }

  # Returns a new `DateTime` from a Unix timestamp and UTC offset.
  #
  # The `time` argument is the number of seconds since or before the Unix epoch.
  #
  # If the timestamp is invalid, an `Option.None` is returned.
  #
  # # Example
  #
  # ```inko
  # import std.time (DateTime)
  #
  # DateTime.from_timestamp(time: 1661546853, utc_offset: 0).year # => 2022
  # ```
  fn pub static from_timestamp[T: ToFloat](
    time: ref T,
    utc_offset: Int,
  ) -> Option[DateTime] {
    # This implementation is based on the algorithms as described on
    # http://howardhinnant.github.io/date_algorithms.html, specifically the
    # `civil_from_days()` algorithm.
    #
    # To be truly honest, at the time of writing I didn't fully understand the
    # algorithm, and reading through the linked article made my head spin. But
    # it works, so ship it!
    #
    # Important note: this algorithm works because Inko implements integer
    # divisions as floored divisions (like e.g. Python and Ruby), instead of
    # rounding towards zero (like Rust and C).
    let time = time.to_float
    let epoch_secs = time.to_int + utc_offset
    let epoch_days = (epoch_secs / SECS_PER_DAY) + 719_468
    let era = if epoch_days >= 0 { epoch_days } else { epoch_days - 146_096 }
      / 146_097
    let doe = epoch_days - (era * 146_097)
    let yoe = (doe - (doe / 1460) + (doe / 36_524) - (doe / 146_096)) / 365
    let doy = doe - ((365 * yoe) + (yoe / 4) - (yoe / 100))
    let mp = ((5 * doy) + 2) / 153
    let day = doy - ((153 * mp) + 2 / 5) + 1
    let month = if mp < 10 { mp + 3 } else { mp - 9 }
    let mut year = yoe + (era * 400)

    if month <= 2 { year += 1 }

    # The number of seconds since the start of the day.
    let mut day_secs = epoch_secs - ((epoch_secs / SECS_PER_DAY) * SECS_PER_DAY)
    let second = day_secs % 60
    let minute = (day_secs % SECS_PER_HOUR) / 60
    let hour = day_secs / SECS_PER_HOUR

    Option.Some(
      DateTime(
        date: try Date.new(year, month, day),
        time: try Time.new(hour, minute, second, time.fractional),
        utc_offset: utc_offset,
      ),
    )
  }

  # Returns the `Date` component of `self`.
  fn pub inline date -> Date {
    @date
  }

  # Returns the `Time` component of `self`.
  fn pub inline time -> Time {
    @time
  }

  # Returns the UTC offset in seconds.
  fn pub inline utc_offset -> Int {
    @utc_offset
  }

  # Returns `true` if UTC is used as the timezone.
  fn pub inline utc? -> Bool {
    @utc_offset == 0
  }

  # Returns the year.
  #
  # Refer to the documentation of `Date.year` for more details.
  fn pub inline year -> Int {
    @date.year
  }

  # Returns the month.
  #
  # Refer to the documentation of `Date.month` for more details.
  fn pub inline month -> Int {
    @date.month
  }

  # Returns the day.
  #
  # Refer to the documentation of `Date.day` for more details.
  fn pub inline day -> Int {
    @date.day
  }

  # Returns the hour of the day.
  #
  # Refer to the documentation of `Time.hour` for more details.
  fn pub inline hour -> Int {
    @time.hour
  }

  # Returns the minute of the hour.
  #
  # Refer to the documentation of `Time.minute` for more details.
  fn pub inline minute -> Int {
    @time.minute
  }

  # Returns the number of seconds.
  #
  # Refer to the documentation of `Time.second` for more details.
  fn pub inline second -> Int {
    @time.second
  }

  # Returns the number of sub seconds.
  #
  # Refer to the documentation of `Time.sub_second` for more details.
  fn pub inline sub_second -> Float {
    @time.sub_second
  }

  # Returns the number of days between `self` and the Unix epoch.
  #
  # Refer to the documentation of `Date.days_since_unix_epoch` for more details.
  fn pub days_since_unix_epoch -> Int {
    @date.days_since_unix_epoch
  }

  # Returns the day of the week from 1 to 7.
  #
  # Refer to the documentation of `Date.day_of_week` for more details.
  fn pub day_of_week -> Int {
    @date.day_of_week
  }

  # Returns the day of the year.
  #
  # Refer to the documentation of `Date.day_of_year` for more details.
  fn pub day_of_year -> Int {
    @date.day_of_year
  }

  # Returns `true` if the current year is a leap year.
  #
  # Refer to the documentation of `Date.leap_year?` for more details.
  fn pub leap_year? -> Bool {
    @date.leap_year?
  }

  # Converts the `DateTime` to another `DateTime` that uses UTC as the
  # timezone.
  fn pub to_utc -> DateTime {
    # Since our input is already valid at this point, this can never fail.
    DateTime.from_timestamp(time: to_float, utc_offset: 0).get
  }
}

impl Clone[DateTime] for DateTime {
  fn pub inline clone -> DateTime {
    DateTime(date: @date, time: @time, utc_offset: @utc_offset)
  }
}

impl Format for DateTime {
  fn pub fmt(formatter: mut Formatter) {
    let offset = if @utc_offset == 0 {
      ' UTC'
    } else {
      let sign = if @utc_offset > 0 { '+' } else { '-' }
      let off = @utc_offset.absolute
      let hh = (off / SECS_PER_HOUR).to_string.pad_start(with: '0', chars: 2)
      let mm = (off % SECS_PER_HOUR / SECS_PER_MIN).to_string.pad_start(
        with: '0',
        chars: 2,
      )

      ' ${sign}${hh}${mm}'
    }

    @date.fmt(formatter)
    formatter.write(' ')
    @time.fmt(formatter)
    formatter.write(offset)
  }
}

impl ToInt for DateTime {
  # Returns the number of seconds since the Unix epoch in UTC.
  #
  # This value will be negative if `self` is a `DateTime` before the Unix
  # epoch.
  fn pub to_int -> Int {
    let days = days_since_unix_epoch
    let days_sec = days.absolute * SECS_PER_DAY
    let time_sec = (@time.hour * SECS_PER_HOUR)
      + (@time.minute * SECS_PER_MIN)
      + @time.second
    let timestamp = if days < 0 {
      0 - (days_sec - time_sec)
    } else {
      days_sec + time_sec
    }

    # Timestamps are always in UTC, not in the local time.
    timestamp - @utc_offset
  }
}

impl ToFloat for DateTime {
  # Returns the timestamp since the Unix epoch, the including fractional
  # seconds.
  fn pub to_float -> Float {
    to_int.to_float + @time.sub_second
  }
}

impl Add[Duration, DateTime] for DateTime {
  # Adds the given `Duration` to `self`, returning the result as a new
  # `DateTime`.
  #
  # # Panics
  #
  # This method may panic if the result can't be expressed as a `DateTime` (e.g.
  # the year is too great).
  fn pub +(other: ref Duration) -> DateTime {
    let timestamp = to_float + other.to_secs

    DateTime.from_timestamp(timestamp, utc_offset: @utc_offset).get
  }
}

impl Subtract[Duration, DateTime] for DateTime {
  # Subtracts the given `Duration` from `self`, returning the result as a new
  # `DateTime`.
  #
  # # Panics
  #
  # This method may panic if the result can't be expressed as a `DateTime` (e.g.
  # the year is too great).
  fn pub -(other: ref Duration) -> DateTime {
    let timestamp = to_float - other.to_secs

    DateTime.from_timestamp(timestamp, utc_offset: @utc_offset).get
  }
}

impl Compare[DateTime] for DateTime {
  fn pub cmp(other: ref DateTime) -> Ordering {
    to_float.cmp(other.to_float)
  }
}

impl Equal[ref DateTime] for DateTime {
  fn pub inline ==(other: ref DateTime) -> Bool {
    @date == other.date
      and @time == other.time
      and @utc_offset == other.utc_offset
  }
}

# A type which can be converted to an `Instant`
#
# This is useful when you want create a deadline that supports both `Instant`
# and `Duration` as an input.
trait pub ToInstant {
  # Converts `self` into an `Instant`.
  fn pub to_instant -> Instant
}

# A monotonically increasing clock.
#
# The clock is measured in nanoseconds since an unspecified point in time. This
# means the maximum time span we can represent is roughly 292 years. Operations
# producing values greater than this range will panic.
#
# Unlike a system clock a monotonic clock never decreases, making it useful for
# tasks such as measuring the execution time of a block of code.
#
# The clock used for `Instant` values _doesn't_ continue ticking when the system
# is suspended.
#
# An `Instant` can never represent a negative time (e.g. -5).
class pub copy Instant {
  let @nanos: Int

  # Returns a new `Instant` representing the current time.
  fn pub inline static new -> Instant {
    Instant(sys.monotonic_time)
  }

  # Returns a `Duration` measuring the time elapsed since the point in time
  # that `self` represents.
  #
  # # Panics
  #
  # This method panics if the duration can't be expressed in nanoseconds.
  #
  # # Examples
  #
  # Obtaining the time elapsed:
  #
  # ```inko
  # import std.process
  # import std.time (Duration, Instant)
  #
  # let start = Instant.new
  #
  # process.sleep(Duration.from_secs(1))
  #
  # start.elapsed.to_secs >= 1.0 # => true
  # ```
  fn pub inline elapsed -> Duration {
    Duration(sys.monotonic_time - @nanos)
  }

  # Returns a `Duration` measuring the time remaining until reaching `self`.
  #
  # If `self` is in the past, the `Duration` represents a negative duration.
  #
  # # Examples
  #
  # ```inko
  # import std.time (Duration, Instant)
  #
  # let time = Instant.new + Duration.from_secs(5)
  #
  # time.remaining # => Duration.from_secs(5)
  # ```
  fn pub inline remaining -> Duration {
    Duration(@nanos - sys.monotonic_time)
  }
}

impl ToInstant for Instant {
  fn pub inline to_instant -> Instant {
    clone
  }
}

impl Clone[Instant] for Instant {
  fn pub inline clone -> Instant {
    Instant(@nanos)
  }
}

impl ToInt for Instant {
  fn pub inline to_int -> Int {
    @nanos.to_int
  }
}

impl ToFloat for Instant {
  fn pub inline to_float -> Float {
    @nanos.to_float
  }
}

impl Add[Duration, Instant] for Instant {
  fn pub inline +(other: ref Duration) -> Instant {
    let nanos = @nanos + other.nanos

    if nanos < 0 { negative_time_error(nanos) }

    Instant(nanos)
  }
}

impl Subtract[Duration, Instant] for Instant {
  fn pub inline -(other: ref Duration) -> Instant {
    let nanos = @nanos - other.nanos

    if nanos < 0 { negative_time_error(nanos) }

    Instant(nanos)
  }
}

impl Compare[Instant] for Instant {
  fn pub inline cmp(other: ref Instant) -> Ordering {
    @nanos.cmp(other.nanos)
  }
}

impl Equal[ref Instant] for Instant {
  fn pub inline ==(other: ref Instant) -> Bool {
    @nanos == other.nanos
  }
}

impl Format for Instant {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('+${@nanos}')
  }
}
