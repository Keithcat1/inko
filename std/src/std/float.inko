# The Float type.
import std.clone.Clone
import std.cmp.(Compare, Equal, Ordering)
import std.fmt.(Format, Formatter)
import std.hash.(Hash, Hasher)
import std.int.(MAX, MIN, ToInt)
import std.ops.(Add, Divide, Modulo, Multiply, Power, Subtract)
import std.string.ToString

class extern AnyResult {
  let @tag: Int
  let @value: Any
}

fn extern inko_float_to_string(state: Pointer[Int8], float: Float64) -> String
fn extern inko_string_to_float(
  state: Pointer[Int8],
  bytes: Pointer[Int8],
  size: Int,
) -> AnyResult

# A type that can be converted to a Float.
trait pub ToFloat {
  # Converts `self` to a `Float`
  fn pub to_float -> Float
}

# A 64-bit floating point number.
class builtin Float {
  # Returns a NaN.
  fn pub static not_a_number -> Float {
    0.0 / 0.0
  }

  # Returns the positive infinity value.
  fn pub static infinity -> Float {
    1.0 / 0.0
  }

  # Returns the negative infinity value.
  fn pub static negative_infinity -> Float {
    -1.0 / 0.0
  }

  # Returns a `Float` by interpreting the given `Int` as the bits of the float.
  #
  # # Example
  #
  #     Float.from_bits(0x4029000000000000) # => 12.5
  fn pub static from_bits(bits: Int) -> Float {
    _INKO.float_from_bits(bits)
  }

  # Parses a `Float` from a `String`.
  #
  # # Error handling
  #
  # This method will throw if the input `String` is not in the right format.
  #
  # # Format
  #
  # The input `String` is expected to be in base 10. Leading and/or trailing
  # whitespace is considered to be invalid, and will result in an error being
  # thrown.
  #
  # # Examples
  #
  # Parsing a `Float` from a `String`:
  #
  #     Float.parse('10.5') # => Option.Some(10.5)
  #
  # Parsing a `Float` with an exponent:
  #
  #     Float.parse('1.2e1') # => Option.Some(12.0)
  fn pub static parse(string: String) -> Option[Float] {
    match inko_string_to_float(_INKO.state, string.to_pointer, string.size) {
      case { @tag = 0, @value = v } -> Option.Some(v as Float)
      case _ -> Option.None
    }
  }

  # Returns the absolute value of `self`.
  #
  # # Examples
  #
  #     42.0.absolute  # => 42
  #     -42.0.absolute # => 42
  fn pub absolute -> Float {
    Float.from_bits(to_bits & MAX)
  }

  # Returns a value with the opposite sign of `self`.
  #
  # # Examples
  #
  #     42.0.opposite  # => -42
  #     -42.0.opposite # => 42
  fn pub opposite -> Float {
    Float.from_bits(to_bits ^ MIN)
  }

  # Returns `true` if `self` is not a number (NAN).
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     10.5.not_a_number? => false
  #
  # Using a NAN value:
  #
  #     Float.not_a_number.not_a_number? # => true
  fn pub not_a_number? -> Bool {
    _INKO.float_is_nan(self)
  }

  # Returns `true` if `self` is an infinite number.
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     10.5.infinite? # => false
  #
  # Using an infinite number:
  #
  #     10.0 / 0.0
  #       .infinite? # => true
  fn pub infinite? -> Bool {
    _INKO.float_is_inf(self)
  }

  # Returns the largest number less than or equal to `self`.
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     3.5.floor # => 3.0
  #
  # Using a NAN value will produce a new NAN:
  #
  #     Float.not_a_number.floor.not_a_number? # => true
  fn pub floor -> Float {
    _INKO.float_floor(self)
  }

  # Returns the smallest number greater than or equal to `self`.
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     3.5.ceil # => 4.0
  #
  # Using a NAN value will produce a new NAN:
  #
  #     Float.not_a_number.ceil.not_a_number? # => true
  fn pub ceil -> Float {
    _INKO.float_ceil(self)
  }

  # Rounds `self` to the nearest number.
  #
  # The `decimals` argument can be used to control the number of decimals of
  # the returned `Float`. When a negative value is used, the number is rounded
  # on the left hand side of the decimal point.
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     3.5.round # => 3.0
  #
  # Rounding to a given number of decimals:
  #
  #     3.123.round(1) # => 3.1
  #
  # Rounding a number using a negative number of decimals:
  #
  #     34567.89.round(-2) # => 34600.0
  #
  # Using a NAN value will produce a new NAN:
  #
  #     Float.not_a_number.round.not_a_number? # => true
  fn pub round(decimals: Int) -> Float {
    if decimals <= 0 { return _INKO.float_round(self) }
    if decimals > 4_294_967_295 { return self }

    let pow = 10.0 ** decimals
    let mul = self * pow

    if mul.infinite? { self } else { _INKO.float_round(mul) / pow }
  }

  # Returns the fractional part of this float.
  #
  # # Examples
  #
  # Returning the fractional:
  #
  #     3.5.fract => 0.5
  fn pub fractional -> Float {
    absolute % 1.0
  }

  # Returns the bitwise representation of `self`, as an `Int`.
  #
  # This does not _cast_ the `Float`, instead the returned `Int` has all
  # the bits set that make up `self`.
  #
  # # Examples
  #
  # Converting a `Float` to its bitwise representation:
  #
  #     1.0.to_bits # => 4607182418800017408
  fn pub to_bits -> Int {
    _INKO.float_to_bits(self)
  }

  # Returns `true` if `self` has a negative sign, including `-0.0`, NaNs with a
  # negative sign bit, and negative infinity.
  fn pub negative_sign? -> Bool {
    to_bits & MIN != 0
  }

  # Returns `true` if `self` has a positive sign, including `+0.0`, NaNs with a
  # positive sign bit, and positive infinity.
  fn pub positive_sign? -> Bool {
    negative_sign?.false?
  }
}

impl ToInt for Float {
  fn pub to_int -> Int {
    self as Int
  }
}

impl ToFloat for Float {
  fn pub to_float -> Float {
    clone
  }
}

impl Clone[Float] for Float {
  fn pub clone -> Float {
    self
  }
}

impl Add[Float, Float] for Float {
  fn pub +(other: ref Float) -> Float {
    _INKO.float_add(self, other)
  }
}

impl Subtract[Float, Float] for Float {
  fn pub -(other: ref Float) -> Float {
    _INKO.float_sub(self, other)
  }
}

impl Divide[Float, Float] for Float {
  fn pub /(other: ref Float) -> Float {
    _INKO.float_div(self, other)
  }
}

impl Multiply[Float, Float] for Float {
  fn pub *(other: ref Float) -> Float {
    _INKO.float_mul(self, other)
  }
}

impl Modulo[Float, Float] for Float {
  fn pub %(other: ref Float) -> Float {
    _INKO.float_mod(self, other)
  }
}

impl Compare[Float] for Float {
  # Return the ordering between `self` and `other`.
  #
  # This method implements total ordering of floats as per the IEEE 754
  # specification. Values are ordered in the following order:
  #
  # - negative quiet NaN
  # - negative signaling NaN
  # - negative infinity
  # - negative numbers
  # - negative subnormal numbers
  # - negative zero
  # - positive zero
  # - positive subnormal numbers
  # - positive numbers
  # - positive infinity
  # - positive signaling NaN
  # - positive quiet NaN
  fn pub cmp(other: ref Float) -> Ordering {
    let mut lhs = to_bits
    let mut rhs = other.to_bits

    lhs ^= lhs >> 63 >>> 1
    rhs ^= rhs >> 63 >>> 1

    lhs.cmp(rhs)
  }

  fn pub <(other: ref Float) -> Bool {
    _INKO.float_lt(self, other)
  }

  fn pub <=(other: ref Float) -> Bool {
    _INKO.float_le(self, other)
  }

  fn pub >(other: ref Float) -> Bool {
    _INKO.float_gt(self, other)
  }

  fn pub >=(other: ref Float) -> Bool {
    _INKO.float_ge(self, other)
  }
}

impl Equal[Float] for Float {
  # Returns `true` if `self` and `other` are equal to each other.
  #
  # This method uses "Units in the Last Place" or ULPs to perform an approximate
  # comparison when two values aren't exactly identical. This means most common
  # floats _can_ be compared for equality and give consistent results, but you
  # still shouldn't rely on it _always_ being accurate. Or to put it
  # differently, if you need 100% accuracy, you should use either `Int` or some
  # other data type.
  #
  # See https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/
  # for more details on how ULPs work.
  fn pub ==(other: ref Float) -> Bool {
    # Handle simple comparisons such as `1.2 == 1.2` and `0.0 == -0.0`.
    if _INKO.float_eq(self, other) { return true }
    if positive_sign? != other.positive_sign? { return false }
    if not_a_number? or other.not_a_number? { return false }

    let diff = to_bits.wrapping_sub(other.to_bits)

    diff >= -1 and diff <= 1
  }
}

impl ToString for Float {
  # Converts `self` to a `String.
  #
  # # Examples
  #
  # Converting a positive float:
  #
  #     10.5.to_string # => '10.5'
  #
  # Converting a negative float:
  #
  #     -10.5.to_string # => '-10.5'
  #
  # Converting a NAN:
  #
  #     Float.not_a_number.to_string # => 'NaN'
  #
  # Converting an infinite number:
  #
  #     Float.infinity.to_string # => 'Infinity'
  fn pub to_string -> String {
    inko_float_to_string(_INKO.state, self as Float64)
  }
}

impl Hash for Float {
  fn pub hash(hasher: mut Hasher) {
    hasher.write(to_bits)
  }
}

impl Format for Float {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write(to_string)
  }
}

impl Power[Int, Float] for Float {
  fn pub **(other: ref Int) -> Float {
    _INKO.float_powi(self, other)
  }
}
