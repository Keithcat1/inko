# STDIN, STDOUT, and STDERR streams.
import std.io (Error, Read, Write, WriteInternal)

class extern IntResult {
  let @tag: Int
  let @value: Int
}

fn extern inko_stdout_write(
  process: Pointer[UInt8],
  data: Pointer[UInt8],
  size: Int,
) -> IntResult

fn extern inko_stderr_write(
  process: Pointer[UInt8],
  data: Pointer[UInt8],
  size: Int,
) -> IntResult

fn extern inko_stdin_read(
  process: Pointer[UInt8],
  buffer: mut ByteArray,
  size: Int,
) -> IntResult

fn extern inko_stdout_flush(process: Pointer[UInt8])

fn extern inko_stderr_flush(process: Pointer[UInt8])

# The standard input stream of the current OS process.
class pub STDIN {
  # Returns a new handle to the input stream.
  fn pub static new -> STDIN {
    STDIN()
  }
}

impl Read for STDIN {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    match inko_stdin_read(_INKO.process, into, size) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

# The standard output stream of the current OS process.
class pub STDOUT {
  # Returns a new handle to the output stream.
  fn pub static new -> STDOUT {
    STDOUT()
  }
}

impl WriteInternal for STDOUT {
  fn mut write_internal(data: Pointer[UInt8], size: Int) -> Result[Int, Error] {
    match inko_stdout_write(_INKO.process, data, size) {
      case { @tag = 0, @value = n } -> Result.Ok(n)
      case { @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Write for STDOUT {
  fn pub mut write_bytes(bytes: ref ByteArray) -> Result[Nil, Error] {
    write_all_internal(bytes.to_pointer, bytes.size)
  }

  fn pub mut write_string(string: String) -> Result[Nil, Error] {
    write_all_internal(string.to_pointer, string.size)
  }

  fn pub mut flush -> Result[Nil, Never] {
    Result.Ok(inko_stdout_flush(_INKO.process))
  }
}

# The standard error stream of the current OS process.
class pub STDERR {
  # Returns a new handle to the error stream.
  fn pub static new -> STDERR {
    STDERR()
  }
}

impl WriteInternal for STDERR {
  fn mut write_internal(data: Pointer[UInt8], size: Int) -> Result[Int, Error] {
    match inko_stderr_write(_INKO.process, data, size) {
      case { @tag = 0, @value = n } -> Result.Ok(n)
      case { @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Write for STDERR {
  fn pub mut write_bytes(bytes: ref ByteArray) -> Result[Nil, Error] {
    write_all_internal(bytes.to_pointer, bytes.size)
  }

  fn pub mut write_string(string: String) -> Result[Nil, Error] {
    write_all_internal(string.to_pointer, string.size)
  }

  fn pub mut flush -> Result[Nil, Never] {
    Result.Ok(inko_stderr_flush(_INKO.process))
  }
}
