# Types for core IO functionality.
#
# The IO module provides the basic building blocks for IO operations such as
# reading from and writing to a file.
import std.cmp (Equal)
import std.fmt (Format, Formatter)
import std.iter (Stream)
import std.libc.bsd.errors if bsd
import std.libc.linux.errors if linux
import std.libc.mac.errors if mac
import std.string (Bytes, ToString)

# The initial number of bytes to read in `Read.read_all`
let INITIAL_READ_ALL_SIZE = 1024

# The maximum number of bytes to read when using `Read.read_all`.
let MAX_READ_ALL_SIZE = 1024 * 1024

# The default size of the buffer maintained by `BufferedReader`.
let DEFAULT_BUFFER_SIZE = 8 * 1024

# The error code used to signal invalid data.
#
# This error code isn't produced by libc, instead it's specific to the runtime
# library.
let INVALID_DATA = -2

# The error code used when encountering an unexpected end of the input.
let UNEXPECTED_EOF = -3

fn extern inko_last_error -> Int32

# An error type for I/O operations.
#
# This type is typically constructed from raw OS error codes such as `ENOENT` on
# Unix systems. This enum doesn't define a variant for every possible error.
# Instead, we define a variant for the most commonly used errors, and represent
# other errors using the `Other` variant.
class pub enum Error {
  # The address is already in use.
  case AddressInUse

  # The address isn't available.
  case AddressUnavailable

  # A connection is already established.
  case AlreadyConnected

  # A resource already exists.
  case AlreadyExists

  # The operation failed because a pipe was closed.
  case BrokenPipe

  # The connection was aborted by the remote server.
  case ConnectionAborted

  # The connection was refused by the remote server.
  case ConnectionRefused

  # The connection was reset by the remote server.
  case ConnectionReset

  # An operation would result in a deadlock.
  case Deadlock

  # A directory isn't empty.
  case DirectoryNotEmpty

  # A file is too large.
  case FileTooLarge

  # The remote host is unreachable.
  case HostUnreachable

  # The operation is in progress.
  case InProgress

  # The operation was interrupted.
  case Interrupted

  # One or more arguments are invalid.
  case InvalidArgument

  # The file name is invalid.
  case InvalidFileName

  # The seek operation is invalid.
  case InvalidSeek

  # The resource is a directory.
  case IsADirectory

  # The network is down.
  case NetworkDown

  # The resource isn't a directory.
  case NotADirectory

  # A connection isn't established.
  case NotConnected

  # The resource isn't found.
  case NotFound

  # The operation failed because not enough memory could be allocated.
  case OutOfMemory

  # The operation failed because it lacked the necessary privileges.
  case PermissionDenied

  # The filesystem is read-only.
  case ReadOnlyFilesystem

  # The resource is busy.
  case ResourceBusy

  # The underlying storage is full.
  case StorageFull

  # The operation timed out.
  case TimedOut

  # The operation would block.
  case WouldBlock

  # A memory address used (e.g. as an argument) is in an invalid range.
  case BadAddress

  # The data provided for the operation is invalid, such as when using an
  # invalid TLS certificate or when a TLS socket encountered invalid TLS data
  # (e.g. an invalid handshake message).
  case InvalidData

  # The operation encountered the end of the input stream, but more input is
  # required.
  #
  # An example of where this error is encountered is when reading from a TLS
  # socket that was closed without sending the `close_notify` message.
  case EndOfInput

  # An error not covered by the other variants.
  #
  # The wrapped `Int` is the raw error code.
  case Other(Int)

  # Returns an `Error` from a raw OS error code.
  #
  # # Examples
  #
  # ```inko
  # import std.unix.errors (ENOENT)
  #
  # Error.from_os_error(ENOENT) # => Error.NotFound
  # ```
  fn pub static from_os_error(code: Int) -> Error {
    match code {
      case errors.EPERM -> Error.PermissionDenied
      case errors.ENOENT -> Error.NotFound
      case errors.EINTR -> Error.Interrupted
      case errors.EAGAIN -> Error.WouldBlock
      case errors.ENOMEM -> Error.OutOfMemory
      case errors.EACCES -> Error.PermissionDenied
      case errors.EBUSY -> Error.ResourceBusy
      case errors.EEXIST -> Error.AlreadyExists
      case errors.ENOTDIR -> Error.NotADirectory
      case errors.EISDIR -> Error.IsADirectory
      case errors.EINVAL -> Error.InvalidArgument
      case errors.EFBIG -> Error.FileTooLarge
      case errors.ENOSPC -> Error.StorageFull
      case errors.ESPIPE -> Error.InvalidSeek
      case errors.EROFS -> Error.ReadOnlyFilesystem
      case errors.EPIPE -> Error.BrokenPipe
      case errors.EDEADLK -> Error.Deadlock
      case errors.ENAMETOOLONG -> Error.InvalidFileName
      case errors.ENOTEMPTY -> Error.DirectoryNotEmpty
      case errors.ETIME -> Error.TimedOut
      case errors.EADDRINUSE -> Error.AddressInUse
      case errors.EADDRNOTAVAIL -> Error.AddressUnavailable
      case errors.ENETDOWN -> Error.NetworkDown
      case errors.ENETUNREACH -> Error.NetworkDown
      case errors.ECONNABORTED -> Error.ConnectionAborted
      case errors.ECONNRESET -> Error.ConnectionReset
      case errors.EISCONN -> Error.AlreadyConnected
      case errors.ENOTCONN -> Error.NotConnected
      case errors.ETIMEDOUT -> Error.TimedOut
      case errors.ECONNREFUSED -> Error.ConnectionRefused
      case errors.EHOSTUNREACH -> Error.HostUnreachable
      case errors.EINPROGRESS -> Error.InProgress
      case errors.EFAULT -> Error.BadAddress
      case INVALID_DATA -> Error.InvalidData
      case UNEXPECTED_EOF -> Error.EndOfInput
      case val -> Error.Other(val)
    }
  }

  # Returns the last OS error produced by the current OS thread.
  fn pub static last_os_error -> Error {
    from_os_error(inko_last_error as Int)
  }
}

impl ToString for Error {
  fn pub to_string -> String {
    match self {
      case AddressInUse -> 'the address is already in use'
      case AddressUnavailable -> "the address isn't available"
      case AlreadyConnected -> 'the connection is already established'
      case AlreadyExists -> 'the resource already exists'
      case BrokenPipe -> 'the operation failed because a pipe was closed'
      case ConnectionAborted -> 'the connection was terminated by the server'
      case ConnectionRefused -> 'the connection was refused by the server'
      case ConnectionReset -> 'the connection was reset by the server'
      case Deadlock -> 'the resource would deadlock'
      case DirectoryNotEmpty -> "the directory isn't empty"
      case FileTooLarge -> 'the file is too large'
      case HostUnreachable -> 'the host is unreachable'
      case InProgress -> 'the operation is in progress'
      case Interrupted -> 'the operation was interrupted'
      case InvalidArgument -> 'one or more arguments are invalid'
      case InvalidFileName -> 'the file name is too long'
      case InvalidSeek -> 'the seek operation is invalid'
      case IsADirectory -> 'the resource is a directory'
      case NetworkDown -> 'the network is down'
      case NotADirectory -> "the resource isn't a directory"
      case NotConnected -> "a connection isn't established"
      case NotFound -> "the resource isn't found"
      case OutOfMemory -> 'we ran out of memory'
      case PermissionDenied -> 'the operation lacks the necessary privileges'
      case ReadOnlyFilesystem -> 'the file system is read-only'
      case ResourceBusy -> 'the resource is busy'
      case StorageFull -> 'the storage is full'
      case TimedOut -> 'the operation timed out'
      case WouldBlock -> 'the operation would block'
      case BadAddress -> 'a memory address is in an invalid range'
      case InvalidData -> "the data provided isn't valid for the operation"
      case EndOfInput -> {
        'the end of the input stream is reached, but more input is required'
      }
      case Other(code) -> 'an other error with code ${code} occurred'
    }
  }
}

impl Format for Error {
  fn pub fmt(formatter: mut Formatter) {
    let name = match self {
      case AddressInUse -> 'AddressInUse'
      case AddressUnavailable -> 'AddressUnavailable'
      case AlreadyConnected -> 'AlreadyConnected'
      case AlreadyExists -> 'AlreadyExists'
      case BrokenPipe -> 'BrokenPipe'
      case ConnectionAborted -> 'ConnectionAborted'
      case ConnectionRefused -> 'ConnectionRefused'
      case ConnectionReset -> 'ConnectionReset'
      case Deadlock -> 'Deadlock'
      case DirectoryNotEmpty -> 'DirectoryNotEmpty'
      case FileTooLarge -> 'FileTooLarge'
      case HostUnreachable -> 'HostUnreachable'
      case InProgress -> 'InProgress'
      case Interrupted -> 'Interrupted'
      case InvalidArgument -> 'InvalidArgument'
      case InvalidFileName -> 'InvalidFileName'
      case InvalidSeek -> 'InvalidSeek'
      case IsADirectory -> 'IsADirectory'
      case NetworkDown -> 'NetworkDown'
      case NotADirectory -> 'NotADirectory'
      case NotConnected -> 'NotConnected'
      case NotFound -> 'NotFound'
      case OutOfMemory -> 'OutOfMemory'
      case PermissionDenied -> 'PermissionDenied'
      case ReadOnlyFilesystem -> 'ReadOnlyFilesystem'
      case ResourceBusy -> 'ResourceBusy'
      case StorageFull -> 'StorageFull'
      case TimedOut -> 'TimedOut'
      case WouldBlock -> 'WouldBlock'
      case BadAddress -> 'BadAddress'
      case InvalidData -> 'InvalidData'
      case EndOfInput -> 'EndOfInput'
      case Other(code) -> {
        formatter.tuple('Other').field(code).finish
        return
      }
    }

    formatter.tuple(name).finish
  }
}

impl Equal[ref Error] for Error {
  fn pub ==(other: ref Error) -> Bool {
    match (self, other) {
      case (AddressInUse, AddressInUse) -> true
      case (AddressUnavailable, AddressUnavailable) -> true
      case (AlreadyConnected, AlreadyConnected) -> true
      case (AlreadyExists, AlreadyExists) -> true
      case (BrokenPipe, BrokenPipe) -> true
      case (ConnectionAborted, ConnectionAborted) -> true
      case (ConnectionRefused, ConnectionRefused) -> true
      case (ConnectionReset, ConnectionReset) -> true
      case (Deadlock, Deadlock) -> true
      case (DirectoryNotEmpty, DirectoryNotEmpty) -> true
      case (FileTooLarge, FileTooLarge) -> true
      case (HostUnreachable, HostUnreachable) -> true
      case (InProgress, InProgress) -> true
      case (Interrupted, Interrupted) -> true
      case (InvalidArgument, InvalidArgument) -> true
      case (InvalidFileName, InvalidFileName) -> true
      case (InvalidSeek, InvalidSeek) -> true
      case (IsADirectory, IsADirectory) -> true
      case (NetworkDown, NetworkDown) -> true
      case (NotADirectory, NotADirectory) -> true
      case (NotConnected, NotConnected) -> true
      case (NotFound, NotFound) -> true
      case (OutOfMemory, OutOfMemory) -> true
      case (PermissionDenied, PermissionDenied) -> true
      case (ReadOnlyFilesystem, ReadOnlyFilesystem) -> true
      case (ResourceBusy, ResourceBusy) -> true
      case (StorageFull, StorageFull) -> true
      case (TimedOut, TimedOut) -> true
      case (WouldBlock, WouldBlock) -> true
      case (Other(a), Other(b)) -> a == b
      case (InvalidData, InvalidData) -> true
      case (EndOfInput, EndOfInput) -> true
      case _ -> false
    }
  }
}

# Trait for retrieving the size of an IO object.
trait pub Size {
  fn pub size -> Result[Int, Error]
}

# A type data can be read from (e.g. a File).
trait pub Read {
  # Reads up to `size` bytes from `self` into the given `ByteArray`, returning
  # the number of bytes read.
  #
  # The `into` argument is the `ByteArray` to read the bytes into. The capacity
  # of this `ByteArray` is increased automatically if necessary.
  #
  # The `size` argument specifies how many bytes are to be read.
  #
  # The return value is the number of bytes read.
  #
  # The number of bytes read may be less than `size`. This can happen for
  # different reasons, such as when all input is consumed or not enough data is
  # available (yet).
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error]

  # Reads exactly `size` bytes into `into`.
  #
  # Whereas `Read.read` might return early if fewer bytes are available in the
  # input stream, `Read.read_exact` continues reading until the desired amount
  # of bytes is read.
  #
  # # Errors
  #
  # If the end of the input stream is encountered before filling the buffer, an
  # `Error.EndOfInput` error is returned.
  #
  # If an error is returned, no assumption can be made about the state of the
  # `into` buffer, i.e. there's no guarantee data read so far is in the buffer
  # in the event of an error.
  fn pub mut read_exact(into: mut ByteArray, size: Int) -> Result[Nil, Error] {
    let mut pending = size

    while pending > 0 {
      match read(into, pending) {
        case Ok(0) if pending > 0 -> throw Error.EndOfInput
        case Ok(n) -> pending -= n
        case Error(e) -> throw e
      }
    }

    Result.Ok(nil)
  }

  # Reads from `self` into the given `ByteArray`, returning when all input is
  # consumed.
  #
  # The return value is the number of bytes read.
  #
  # # Errors
  #
  # This method returns an `Error` if the underlying call to `Read.read` returns
  # an `Error`.
  fn pub mut read_all(bytes: mut ByteArray) -> Result[Int, Error] {
    let mut total = 0
    let mut read_size = INITIAL_READ_ALL_SIZE

    loop {
      match read(into: bytes, size: read_size) {
        case Ok(0) -> return Result.Ok(total)
        case Ok(n) -> {
          total += n

          # To reduce the number of calls to `Reader.read` when there's lots of
          # input to consume, we increase the read size if deemed beneficial.
          if read_size < MAX_READ_ALL_SIZE and n == read_size { read_size *= 2 }
        }
        case Error(e) -> throw e
      }
    }
  }
}

trait WriteInternal {
  # Performs a single raw write to the underlying stream.
  fn mut write_internal(data: Pointer[UInt8], size: Int) -> Result[Int, Error]

  # Writes all the data to the underlying stream.
  fn mut write_all_internal(
    data: Pointer[UInt8],
    size: Int,
  ) -> Result[Nil, Error] {
    let mut rem = size
    let mut ptr = data

    while rem > 0 {
      match write_internal(ptr, rem) {
        case Ok(n) -> {
          rem -= n
          ptr = ptr as Int + n as Pointer[UInt8]
        }
        case Error(e) -> return Result.Error(e)
      }
    }

    Result.Ok(nil)
  }
}

# A type data can be written to (e.g. a File).
trait pub Write {
  # Writes the entirety of `bytes` to the underlying stream.
  #
  # Types implementing this method must guarantee that upon returning from this
  # method, either all of the data is written and a `Ok(Nil)` is returned, _or_
  # an `Error(Error)` is returned.
  fn pub mut write_bytes(bytes: ref ByteArray) -> Result[Nil, Error]

  # Writes the entirety of `string` to the underlying stream.
  #
  # See `Write.write_bytes` for more details.
  fn pub mut write_string(string: String) -> Result[Nil, Error]

  # Writes the entirety of `string` to the underlying stream, followed by
  # writing a Unix newline to the stream.
  fn pub mut print(string: String) -> Result[Nil, Error] {
    write_string(string).then(fn (_) { write_string('\n') })
  }

  # Flushes any pending writes.
  fn pub mut flush -> Result[Nil, Error]
}

# Trait for seeking to a given offset in a stream of bytes.
trait pub Seek {
  # Seeks to the given byte offset, returning the new offset.
  #
  # If `position` is negative, seeking is performed in reverse order relative to
  # the end.
  fn pub mut seek(position: Int) -> Result[Int, Error]
}

# A `Read` type using an internal buffer, allowing more efficient reading and
# additional operations.
trait pub BufferedRead: Read {
  # Fills the internal buffer by reading from the underlying iterator.
  #
  # Upon success, this method returns `Ok(n)` where `n` is the number of bytes
  # remaining in the buffer. If the underlying read fails, an `Error` is
  # returned.
  #
  # If there are bytes remaining in the buffer, calls to this method shouldn't
  # modify it.
  fn mut fill_buffer -> Result[Int, Error]

  # Reads up to `size` bytes from the internal buffer into `into`, returning the
  # number of bytes read.
  #
  # If the buffer relies on a cursor, the cursor must be advanced by this method
  # such that multiple calls to `read_buffer` don't read the same bytes.
  fn mut read_buffer(into: mut ByteArray, size: Int) -> Int

  # Read and return a single byte.
  #
  # If a byte is read, `Ok(Some(n))` is returned where `n` is the byte. A
  # `Ok(None)` indicates the end of the input.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.file (ReadOnlyFile)
  # import std.io (BufferedReader)
  #
  # let file = ReadOnlyFile.new('README.md').get
  # let reader = BufferedReader.new(file)
  #
  # reader.read_byte # => Result.Ok(Option.Some(35))
  # ```
  fn pub mut read_byte -> Result[Option[Int], Error]

  # Read bytes into `into` up to and including the byte specified in the `byte`
  # argument.
  #
  # The `inclusive` argument specifies if the `byte` value should also be read
  # into the `ByteArray`, or if it should be discarded.
  #
  # Upon success, the return value is `Ok(n)` where `n` is the number of bytes
  # read from the input stream. If `inclusive` is set to `false`, `n` still
  # accounts for the terminal byte. That is, if the input is `abc` and the
  # terminal byte is `c`, then the returned size is 3 bytes.
  #
  # # Examples
  #
  # Reading until and including a given byte:
  #
  # ```inko
  # import std.io (Buffer, BufferedReader)
  #
  # let reader = BufferedReader.new(Buffer.new('hello\nworld'))
  # let bytes = ByteArray.new
  #
  # reader.read_until(byte: 0xA, into: bytes, inclusive: true) # => Result.Ok(6)
  # bytes.to_string # => 'hello\n'
  # ```
  #
  # Excluding the byte from the buffer:
  #
  # ```inko
  # import std.io (Buffer, BufferedReader)
  #
  # let reader = BufferedReader.new(Buffer.new('hello\nworld'))
  # let bytes = ByteArray.new
  #
  # reader.read_until(byte: 0xA, into: bytes, inclusive: false) # => Result.Ok(6)
  # bytes.to_string # => 'hello'
  # ```
  fn pub mut read_until(
    byte: Int,
    into: mut ByteArray,
    inclusive: Bool,
  ) -> Result[Int, Error] {
    let mut total = 0

    loop {
      match try read_byte {
        case Some(val) if byte == val -> {
          if inclusive { into.push(val) }

          total += 1
          break
        }
        case Some(val) -> {
          total += 1
          into.push(val)
        }
        case _ -> break
      }
    }

    Result.Ok(total)
  }

  # Read bytes into `into` up to and including the newline byte (0xA aka
  # `"\n"`).
  #
  # The `inclusive` argument specifies if the newline should also be read into
  # the `ByteArray`, or if it should be discarded.
  #
  # Upon success, the return value is `Ok(n)` where `n` is the number of bytes
  # read from the input stream. If `inclusive` is set to `false`, `n` still
  # accounts for the newline. That is, if the input is `ab\n`, then the returned
  # size is 3 bytes.
  #
  # # Examples
  #
  # Reading until and including the end of a line:
  #
  # ```inko
  # import std.io (Buffer, BufferedReader)
  #
  # let reader = BufferedReader.new(Buffer.new('hello\nworld'))
  # let bytes = ByteArray.new
  #
  # reader.read_line(into: bytes, inclusive: true) # => Result.Ok(6)
  # bytes.to_string # => 'hello\n'
  # ```
  #
  # Excluding the newline from the buffer:
  #
  # ```inko
  # import std.io (Buffer, BufferedReader)
  #
  # let reader = BufferedReader.new(Buffer.new('hello\nworld'))
  # let bytes = ByteArray.new
  #
  # reader.read_line(into: bytes, inclusive: false) # => Result.Ok(6)
  # bytes.to_string # => 'hello'
  # ```
  fn pub mut read_line(
    into: mut ByteArray,
    inclusive: Bool,
  ) -> Result[Int, Error] {
    read_until(byte: 0xA, into: into, inclusive: inclusive)
  }

  # Returns an iterator that yields the bytes in `self`.
  #
  # Each byte is wrapped in a `Result`, as reading may fail.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.file (ReadOnlyFile)
  # import std.io (BufferedReader)
  #
  # let file = ReadOnlyFile.new('README.md').get
  # let reader = BufferedReader.new(file)
  #
  # reader.bytes.next # => Option.Some(Result.Ok(35))
  # ```
  fn pub mut bytes -> Stream[Result[Int, Error]] {
    Stream.new(fn move {
      match read_byte {
        case Ok(Some(num)) -> Option.Some(Result.Ok(num))
        case Ok(None) -> Option.None
        case Error(err) -> Option.Some(Result.Error(err))
      }
    })
  }
}

# A type for performing buffered reads from a `Read` type.
#
# Using a `Read` type directly can be inefficient, as many calls to `Read.read`
# may involve many system calls. `BufferedReader` wraps a `Read` and buffers
# data into an internal buffer, reducing the total amount of system calls, at
# the cost of needing to maintain an in-memory buffer.
class pub BufferedReader[T: mut + Read] {
  let @reader: T
  let @buffer: ByteArray
  let @capacity: Int
  let @offset: Int

  # Returns a new buffered reader that wraps the given `Read` type, using the
  # default buffer size.
  fn pub static new(reader: T) -> BufferedReader[T] {
    with_capacity(reader, DEFAULT_BUFFER_SIZE)
  }

  # Returns a new buffered reader that wraps the given `Read` type, using the
  # specified buffer size.
  #
  # The `reader` argument can be any `Read` type, provided it allows mutation
  # (e.g. a `ref Reader` isn't valid).
  fn pub static with_capacity(reader: T, size: Int) -> BufferedReader[T] {
    if size <= 0 { panic('The buffer size must be greater than zero') }

    BufferedReader(
      reader: reader,
      buffer: ByteArray.new,
      capacity: size,
      offset: 0,
    )
  }
}

impl BufferedRead for BufferedReader {
  fn mut fill_buffer -> Result[Int, Error] {
    if @buffer.size > 0 and @offset < @capacity {
      return Result.Ok(@buffer.size - @offset)
    }

    @buffer.clear
    @offset = 0

    let mut pending = @capacity

    while pending > 0 {
      match @reader.read(into: @buffer, size: pending) {
        case Ok(0) -> break
        case Ok(n) -> pending -= n
        case Error(e) -> throw e
      }
    }

    Result.Ok(@buffer.size)
  }

  fn mut read_buffer(into: mut ByteArray, size: Int) -> Int {
    let copied = into.copy_from(@buffer, at: @offset, size: size)

    @offset += copied
    copied
  }

  fn pub mut read_byte -> Result[Option[Int], Error] {
    match try fill_buffer {
      case 0 -> Result.Ok(Option.None)
      case _ -> Result.Ok(Option.Some(@buffer.get(@offset := @offset + 1)))
    }
  }
}

impl Read for BufferedReader {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    let mut total = 0

    # If the read size is larger than our buffer, there's no point in buffering
    # as we can just read all data at once (of course taking account the bytes
    # still in the buffer).
    if size > @capacity {
      if @offset < @capacity and @buffer.size > 0 {
        total += read_buffer(into, size)
      }

      return match size - total {
        case 0 -> Result.Ok(total)
        case n -> Result.Ok(total + try @reader.read(into, size: n))
      }
    }

    while total < size {
      if (try fill_buffer) == 0 { break }

      match read_buffer(into, size - total) {
        case 0 -> break
        case n -> total += n
      }
    }

    Result.Ok(total)
  }
}

# An in-memory buffer that supports reads and seeks.
#
# `Buffer` supports any `Bytes` type, such as `String` and `ByteArray`.
#
# The `Buffer` type is useful when a method operates on a `Read` type (e.g. a
# `ReadOnlyFile`), and you want to test that method without performing actual IO
# operations. For example:
#
# ```inko
# import std.io (Buffer, Read)
#
# fn read_string[T: Read + mut](reader: T) -> String {
#   let bytes = ByteArray.new
#
#   reader.read_all(bytes)
#   bytes.into_string
# }
#
# let reader = Buffer.new('hello')
#
# read_string(reader) # => "hello"
# ```
class pub Buffer[T: Bytes] {
  let @bytes: T
  let @offset: Int

  # Returns a new `Buffer` wrapping the given `Bytes`.
  fn pub static new(bytes: T) -> Buffer[T] {
    Buffer(bytes: bytes, offset: 0)
  }
}

impl Read for Buffer {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Never] {
    Result.Ok(read_buffer(into, size))
  }
}

impl BufferedRead for Buffer {
  fn mut fill_buffer -> Result[Int, Never] {
    Result.Ok(@bytes.size - @offset)
  }

  fn mut read_buffer(into: mut ByteArray, size: Int) -> Int {
    let mut total = 0

    while total < size and @offset < @bytes.size {
      into.push(@bytes.byte(@offset := @offset + 1))
      total += 1
    }

    total
  }

  fn pub mut read_byte -> Result[Option[Int], Never] {
    if @offset < @bytes.size {
      Result.Ok(Option.Some(@bytes.byte(@offset := @offset + 1)))
    } else {
      Result.Ok(Option.None)
    }
  }
}

impl Seek for Buffer {
  fn pub mut seek(position: Int) -> Result[Int, Never] {
    if position < 0 {
      @offset = @bytes.size + position
    } else {
      @offset = position
    }

    Result.Ok(@offset)
  }
}
