# A double-ended queue (= "deque").
import std.alloc
import std.array (OutOfBounds, check_bounds)
import std.cmp (max)
import std.drop (Drop, drop as drop_value)
import std.iter (Iter, Stream)
import std.ptr

fn invalid_capacity(size: Int) -> Never {
  panic('the capacity (${size}) must be greater than or equal to zero')
}

# A double-ended queue (= "deque").
#
# This type is implemented as a growable ring buffer, and supports fast inserts
# and removals at the head and tail of the queue.
#
# The implementation is currently based on Rust's `VecDeque` type, which in turn
# is based on a comment by dizzy57 on [this
# article](https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/).
type pub Deque[T] {
  # The number of values stored in the deque.
  let mut @size: Int

  # The number of values that can be stored in the deque before a resize is
  # needed.
  let mut @capacity: Int

  # The index at which to perform operations that act on the head/start of the
  # deque.
  let mut @head: Int

  # The buffer storing the values.
  let mut @buffer: Pointer[T]

  # Returns a `Deque` with enough space for at least `size` values.
  #
  # # Panics
  #
  # This method panics of `size` if less than zero.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # Deque.with_capacity(42)
  # ```
  fn pub static with_capacity(size: Int) -> Deque[T] {
    if size < 0 { invalid_capacity(size) }

    Deque(
      size: 0,
      capacity: size,
      head: 0,
      buffer: alloc.resize(0 as Pointer[T], size),
    )
  }

  # Returns a `Deque` with a capacity of zero.
  #
  # See `Deque.with_capacity` for more details.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # Deque.new
  # ```
  fn pub static new -> Deque[T] {
    with_capacity(0)
  }

  # Returns the number of values in `self`.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.size # => 0
  # q.push_back(10)
  # q.size # => 1
  # ```
  fn pub size -> Int {
    @size
  }

  # Returns the number of values that can be stored in `self` before `self`
  # needs to be resized.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.with_capacity(4)
  #
  # q.capacity # => 4
  # q.push_back(10)
  # q.capacity # => 4
  # ```
  fn pub capacity -> Int {
    @capacity
  }

  # Pushes a value to the front of `self`.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.push_front(42)
  # ```
  fn pub mut push_front(value: T) {
    reserve(1)
    @head = @head.wrapping_sub(1).wrapping_add(@capacity) % @capacity
    @size += 1
    write_to(@head, value)
  }

  # Removes a value from the front of `self`, returning the removed value.
  #
  # If no value was found, a None is returned.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.push_front(10)
  # q.push_front(20)
  #
  # q.pop_front # => Option.Some(20)
  # q.pop_front # => Option.Some(10)
  # q.pop_front # => Option.None
  # ```
  fn pub mut pop_front -> Option[T] {
    if @size == 0 { return Option.None }

    @size -= 1
    Option.Some(read_from(@head := to_buffer_index(1)))
  }

  # Pushes a value to the back of `self`.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.push_back(42)
  # ```
  fn pub mut push_back(value: T) {
    reserve(1)
    write_to(to_buffer_index(@size), value)
    @size += 1
  }

  # Removes a value from the back of `self`, returning the removed value.
  #
  # If no value was found, a None is returned.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.push_back(10)
  # q.push_back(20)
  #
  # q.pop_back # => Option.Some(20)
  # q.pop_back # => Option.Some(10)
  # q.pop_back # => Option.None
  # ```
  fn pub mut pop_back -> Option[T] {
    if @size == 0 { return Option.None }

    @size -= 1
    Option.Some(read_from(to_buffer_index(@size)))
  }

  # Reserves space for `size` additional values.
  #
  # The actual space reserved may be greater to prevent frequent reallocations.
  # After calling this method, the capacity will be greater than or equal to
  # `self.size + size`.
  #
  # If the capacity is great enough or the given size is less than zero, this
  # method does nothing.
  fn pub mut reserve(size: Int) {
    if @capacity - @size >= size { return }

    let old_cap = @capacity

    @capacity = max(@capacity * 2, @capacity + size)
    @buffer = alloc.resize(@buffer, @capacity)
    handle_increase(old_cap)
  }

  # Removes all values in `self`.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.push_back(10)
  # q.push_back(20)
  # q.clear
  # q.size # => 0
  # ```
  fn pub mut clear {
    while @size > 0 {
      drop_value(read_from(@head := to_buffer_index(1)))
      @size -= 1
    }

    @head = 0
  }

  # Returns an iterator that yields immutable borrows of the values in `self`.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.push_back(10)
  # q.push_front(20)
  # q.push_back(30)
  #
  # q.iter.to_array # => [20, 10, 30]
  # ```
  fn pub iter -> Stream[ref T] {
    let mut idx = 0

    Stream.new(fn move {
      if idx < @size {
        Option.Some(get_unchecked(to_buffer_index(idx := idx + 1)))
      } else {
        Option.None
      }
    })
  }

  # Returns an iterator that moves the values out of `self`, yielding from the
  # front to the back of the deque.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.push_back(10)
  # q.push_back(20)
  # q.into_iter.to_array # => [10, 20]
  # ```
  fn pub move into_iter -> IntoIter[T] {
    IntoIter(deque: self, index: 0)
  }

  # Returns an immutable borrow of the value at the given index.
  #
  # If the index is out of bounds, a `std.bounds.OutOfBounds` error is returned.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.push_front(10)
  # q.push_front(20)
  # q.get(0) # => Result.Ok(20)
  # q.get(1) # => Result.Ok(10)
  # ```
  fn pub get(index: Int) -> Result[ref T, OutOfBounds] {
    try check_bounds(index, @size)
    Result.Ok(get_unchecked(to_buffer_index(index)))
  }

  fn inline read_from(index: Int) -> T {
    address_of(index).0
  }

  fn inline mut write_to(index: Int, value: T) {
    address_of(index).0 = value
  }

  fn inline address_of(index: Int) -> Pointer[T] {
    @buffer as Int + (index * _INKO.size_of_type_name(T)) as Pointer[T]
  }

  fn inline get_unchecked(index: Int) -> ref T {
    _INKO.ref_move(read_from(index))
  }

  fn inline to_buffer_index(index: Int) -> Int {
    @head.wrapping_add(index) % @capacity
  }

  fn mut handle_increase(old_capacity: Int) {
    if @head <= (old_capacity - @size) {
      return
      # Nothing to do for this case.
    }

    let head_size = old_capacity - @head
    let tail_size = @size - head_size

    if head_size > tail_size and @capacity - old_capacity >= tail_size {
      alloc.copy(
        from: @buffer,
        to: ptr.add(@buffer, old_capacity),
        size: tail_size,
      )
      return
    }

    let new_head = @capacity - head_size

    alloc.copy(
      from: ptr.add(@buffer, @head),
      to: ptr.add(@buffer, new_head),
      size: head_size,
    )
    @head = new_head
  }
}

impl Deque if T: mut {
  # Returns a mutable borrow of the value at the given index.
  #
  # If the index is out of bounds, a `std.bounds.OutOfBounds` error is returned.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.push_front(10)
  # q.push_front(20)
  # q.get_mut(0) # => Result.Ok(20)
  # q.get_mut(1) # => Result.Ok(10)
  # ```
  fn pub mut get_mut(index: Int) -> Result[mut T, OutOfBounds] {
    try check_bounds(index, @size)
    Result.Ok(get_unchecked_mut(to_buffer_index(index)))
  }

  # Returns an iterator that yields mutable borrows of the values in `self`.
  #
  # # Examples
  #
  # ```inko
  # import std.deque (Deque)
  #
  # let q = Deque.new
  #
  # q.push_back(10)
  # q.push_front(20)
  # q.push_back(30)
  #
  # q.iter_mut.to_array # => [20, 10, 30]
  # ```
  fn pub mut iter_mut -> Stream[mut T] {
    let mut idx = 0

    Stream.new(fn move {
      if idx < @size {
        Option.Some(get_unchecked_mut(to_buffer_index(idx := idx + 1)))
      } else {
        Option.None
      }
    })
  }

  fn inline mut get_unchecked_mut(index: Int) -> mut T {
    _INKO.mut_move(read_from(index))
  }
}

impl Drop for Deque {
  fn mut drop {
    clear
    alloc.free(@buffer)
  }
}

# An iterator that moves values out of a `Deque`.
#
# When this iterator is dropped, any values not yet moved out of the `Deque` are
# dropped.
type pub IntoIter[T] {
  let @deque: Deque[T]
  let mut @index: Int

  fn mut take_next -> T {
    @deque.read_from(@deque.to_buffer_index(@index := @index + 1))
  }
}

impl Drop for IntoIter {
  fn mut drop {
    while @index < @deque.size { take_next }

    # This is needed to prevent `Deque.clear` from dropping the data again.
    @deque.size = 0
  }
}

impl Iter[T] for IntoIter {
  fn pub mut next -> Option[T] {
    if @index < @deque.size { Option.Some(take_next) } else { Option.None }
  }
}
