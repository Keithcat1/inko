# Types and methods for manipulating files on a filesystem.
#
# Rather than using a single "File" type for all different file modes, Inko uses
# three separate file types:
#
# - `ReadOnlyFile`: read-only file operations
# - `WriteOnlyFile`: write-only file operations
# - `ReadWriteFile`: read-write file operations
#
# Using different types per file mode allows for a type-safe file API.
#
# Files are automatically closed when they are dropped. Any errors that may
# occur when closing a file are ignored.
import std.drop (Drop)
import std.fs.path (Path)
import std.io (Error, Read, Seek, Size, Write, WriteInternal)

let FILE_READ_ONLY = 0
let FILE_WRITE_ONLY = 1
let FILE_APPEND_ONLY = 2
let FILE_READ_WRITE = 3
let FILE_READ_APPEND = 4

class extern AnyResult {
  let @tag: Int
  let @value: UInt64
}

class extern IntResult {
  let @tag: Int
  let @value: Int
}

class extern PointerResult {
  let @tag: Int
  let @value: Pointer[UInt8]
}

fn extern inko_file_flush(
  process: Pointer[UInt8],
  file: Pointer[UInt8],
) -> AnyResult

fn extern inko_file_drop(file: Pointer[UInt8])

fn extern inko_file_open(
  process: Pointer[UInt8],
  path: String,
  mode: Int,
) -> PointerResult

fn extern inko_file_read(
  process: Pointer[UInt8],
  file: Pointer[UInt8],
  buffer: mut ByteArray,
  size: Int,
) -> IntResult

fn extern inko_file_seek(
  process: Pointer[UInt8],
  file: Pointer[UInt8],
  offset: Int,
) -> IntResult

fn extern inko_file_size(process: Pointer[UInt8], path: String) -> IntResult

fn extern inko_file_write(
  process: Pointer[UInt8],
  file: Pointer[UInt8],
  data: Pointer[UInt8],
  size: Int,
) -> IntResult

# A file that can only be used for reads.
class pub ReadOnlyFile {
  # The path of the file.
  let pub @path: Path

  # The internal file descriptor.
  let @fd: Pointer[UInt8]

  # Returns a new `ReadOnlyFile`.
  #
  # # Examples
  #
  # Opening a file in read-only mode:
  #
  # ```inko
  # import std.fs.file (ReadOnlyFile)
  #
  # let handle = ReadOnlyFile.new('/dev/null'.to_path).get
  # ```
  fn pub static new(path: Path) -> Result[ReadOnlyFile, Error] {
    match inko_file_open(_INKO.process, path.to_string, FILE_READ_ONLY) {
      case { @tag = 0, @value = v } -> {
        Result.Ok(ReadOnlyFile(path: path, fd: v))
      }
      case { @tag = _, @value = e } -> {
        Result.Error(Error.from_os_error(e as Int))
      }
    }
  }
}

impl Drop for ReadOnlyFile {
  fn mut drop {
    inko_file_drop(@fd)
  }
}

impl Read for ReadOnlyFile {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    match inko_file_read(_INKO.process, @fd, into, size) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Seek for ReadOnlyFile {
  fn pub mut seek(position: Int) -> Result[Int, Error] {
    match inko_file_seek(_INKO.process, @fd, position) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Size for ReadOnlyFile {
  fn pub size -> Result[Int, Error] {
    match inko_file_size(_INKO.process, @path.to_string) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

# A file that can only be used for writes.
class pub WriteOnlyFile {
  # The path of the file.
  let pub @path: Path

  # The internal file descriptor.
  let @fd: Pointer[UInt8]

  # Opens a file in write-only mode.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.file (WriteOnlyFile)
  #
  # let file = WriteOnlyFile.new('/dev/null'.to_path).get
  # ```
  fn pub static new(path: Path) -> Result[WriteOnlyFile, Error] {
    match inko_file_open(_INKO.process, path.to_string, FILE_WRITE_ONLY) {
      case { @tag = 0, @value = v } -> {
        Result.Ok(WriteOnlyFile(path: path, fd: v))
      }
      case { @tag = _, @value = e } -> {
        Result.Error(Error.from_os_error(e as Int))
      }
    }
  }

  # Opens a file in append-only mode.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.file (WriteOnlyFile)
  #
  # let file = WriteOnlyFile.append('/dev/null'.to_path).get
  # ```
  fn pub static append(path: Path) -> Result[WriteOnlyFile, Error] {
    match inko_file_open(_INKO.process, path.to_string, FILE_APPEND_ONLY) {
      case { @tag = 0, @value = v } -> {
        Result.Ok(WriteOnlyFile(path: path, fd: v))
      }
      case { @tag = _, @value = e } -> {
        Result.Error(Error.from_os_error(e as Int))
      }
    }
  }
}

impl Drop for WriteOnlyFile {
  fn mut drop {
    inko_file_drop(@fd)
  }
}

impl WriteInternal for WriteOnlyFile {
  fn mut write_internal(data: Pointer[UInt8], size: Int) -> Result[Int, Error] {
    match inko_file_write(_INKO.process, @fd, data, size) {
      case { @tag = 0, @value = n } -> Result.Ok(n)
      case { @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Write for WriteOnlyFile {
  fn pub mut write_bytes(bytes: ref ByteArray) -> Result[Nil, Error] {
    write_all_internal(bytes.to_pointer, bytes.size)
  }

  fn pub mut write_string(string: String) -> Result[Nil, Error] {
    write_all_internal(string.to_pointer, string.size)
  }

  fn pub mut flush -> Result[Nil, Error] {
    match inko_file_flush(_INKO.process, @fd) {
      case { @tag = 1, @value = _ } -> Result.Ok(nil)
      case { @tag = _, @value = e } -> {
        Result.Error(Error.from_os_error(e as Int))
      }
    }
  }
}

impl Seek for WriteOnlyFile {
  fn pub mut seek(position: Int) -> Result[Int, Error] {
    match inko_file_seek(_INKO.process, @fd, position) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

# A file that can be used for both reads and writes.
class pub ReadWriteFile {
  # The path of the file.
  let pub @path: Path

  # The internal file descriptor.
  let @fd: Pointer[UInt8]

  # Opens a file for both reading and writing:
  #
  # # Examples
  #
  # ```inko
  # import std.fs.file (ReadWriteFile)
  #
  # let handle = ReadWriteFile.new('/dev/null'.to_path).get
  # ```
  fn pub static new(path: Path) -> Result[ReadWriteFile, Error] {
    match inko_file_open(_INKO.process, path.to_string, FILE_READ_WRITE) {
      case { @tag = 0, @value = v } -> {
        Result.Ok(ReadWriteFile(path: path, fd: v))
      }
      case { @tag = _, @value = e } -> {
        Result.Error(Error.from_os_error(e as Int))
      }
    }
  }

  # Opens a file for both reading and appending:
  #
  # # Examples
  #
  # ```inko
  # import std.fs.file (ReadWriteFile)
  #
  # let handle = ReadWriteFile.append('/dev/null'.to_path).get
  # ```
  fn pub static append(path: Path) -> Result[ReadWriteFile, Error] {
    match inko_file_open(_INKO.process, path.to_string, FILE_READ_APPEND) {
      case { @tag = 0, @value = v } -> {
        Result.Ok(ReadWriteFile(path: path, fd: v))
      }
      case { @tag = _, @value = e } -> {
        Result.Error(Error.from_os_error(e as Int))
      }
    }
  }
}

impl Drop for ReadWriteFile {
  fn mut drop {
    inko_file_drop(@fd)
  }
}

impl Read for ReadWriteFile {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    match inko_file_read(_INKO.process, @fd, into, size) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl WriteInternal for ReadWriteFile {
  fn mut write_internal(data: Pointer[UInt8], size: Int) -> Result[Int, Error] {
    match inko_file_write(_INKO.process, @fd, data, size) {
      case { @tag = 0, @value = n } -> Result.Ok(n)
      case { @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Write for ReadWriteFile {
  fn pub mut write_bytes(bytes: ref ByteArray) -> Result[Nil, Error] {
    write_all_internal(bytes.to_pointer, bytes.size)
  }

  fn pub mut write_string(string: String) -> Result[Nil, Error] {
    write_all_internal(string.to_pointer, string.size)
  }

  fn pub mut flush -> Result[Nil, Error] {
    match inko_file_flush(_INKO.process, @fd) {
      case { @tag = 1, @value = _ } -> Result.Ok(nil)
      case { @tag = _, @value = e } -> {
        Result.Error(Error.from_os_error(e as Int))
      }
    }
  }
}

impl Seek for ReadWriteFile {
  fn pub mut seek(position: Int) -> Result[Int, Error] {
    match inko_file_seek(_INKO.process, @fd, position) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Size for ReadWriteFile {
  fn pub size -> Result[Int, Error] {
    match inko_file_size(_INKO.process, @path.to_string) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}
