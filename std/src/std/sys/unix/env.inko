import std.fs.path (Path)
import std.io (Error)
import std.libc (self as sys)

let BUFFER_SIZE = 512

fn inline working_directory -> Result[Path, Error] {
  let buf = ByteArray.filled(with: 0, times: BUFFER_SIZE)

  loop {
    if sys.getcwd(buf.pointer, buf.capacity as UInt64) as Int == 0 {
      match sys.errno {
        case sys.ERANGE -> buf.resize(buf.capacity * 2, value: 0)
        case e -> throw Error.from_os_error(e)
      }
    } else {
      let len = sys.strlen(buf.pointer) as Int

      buf.resize(len, value: 0)
      return Result.Ok(Path.new(buf.into_string))
    }
  }
}

fn inline working_directory=(directory: ref Path) -> Result[Nil, Error] {
  if sys.chdir(directory.path.pointer) as Int == 0 {
    Result.Ok(nil)
  } else {
    Result.Error(Error.last_os_error)
  }
}
