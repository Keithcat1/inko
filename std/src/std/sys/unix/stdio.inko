import std.io (Error, start_blocking, stop_blocking)
import std.libc
import std.sys.unix.fs

let STDIN = 0
let STDOUT = 1
let STDERR = 2

fn stdout -> Int32 {
  STDOUT as Int32
}

fn stderr -> Int32 {
  STDERR as Int32
}

fn stdin -> Int32 {
  STDIN as Int32
}

fn write(fd: Int32, data: Pointer[UInt8], size: Int) -> Result[Int, Error] {
  fs.write_file(fd, data, size)
}

fn read(fd: Int32, into: mut ByteArray, size: Int) -> Result[Int, Error] {
  fs.read_file(fd, into, size)
}

fn terminal?(fd: Int32) -> Bool {
  start_blocking

  let res = libc.isatty(fd) as Int
  let _ = stop_blocking

  res == 1
}
