import std.cmp (min)
import std.libc.mac (self as sys)
import std.ptr

fn inline random_bytes(buffer: Pointer[UInt8], size: Int) -> Int {
  let mut rem = size
  let mut buf = buffer

  # getentropy() supports a maximum size of 256, so we need to split larger
  # reads into smaller chunks.
  while rem > 0 {
    let len = min(rem, 256)
    let res = sys.getentropy(buf, size: len as UInt64) as Int

    if res == -1 { return -1 }

    rem -= len
    buf = ptr.add(buf, len)
  }

  size
}
