fn extern realloc(pointer: Pointer[UInt8], size: Int) -> Pointer[UInt8]
fn extern memmove(
  to: Pointer[UInt8],
  from: Pointer[UInt8],
  size: Int,
) -> Pointer[UInt8]

fn pub extern free(pointer: Pointer[UInt8])

fn pub resize[T](buffer: Pointer[T], size: Int) -> Pointer[T] {
  let ptr = realloc(buffer as Pointer[UInt8], size)

  # In this case there's nothing we can do but abort.
  if ptr as Int == 0 and size != 0 {
    panic('std.libc.unix.alloc.resize() failed to allocate memory')
  }

  ptr as Pointer[T]
}

fn pub copy[T](from: Pointer[T], to: Pointer[T], size: Int) {
  memmove(to as Pointer[UInt8], from as Pointer[UInt8], size)
}
