import std.drop (Drop)
import std.fs (FileType)
import std.io (Error)
import std.iter (Iter)

# Different implementations of libc use different `dirent` layouts, and even
# different names for `readdir()` (e.g. `readdir$INODE64` on macOS). To handle
# this, platform specific code (e.g. calculating the offset of `dirent.d_name`)
# is pushed into specific modules.
import std.libc.freebsd.dir (self as dir_imp) if freebsd
import std.libc.linux.dir (self as dir_imp) if linux
import std.libc.mac.amd64.dir (self as dir_imp) if mac and amd64
import std.libc.mac.arm64.dir (self as dir_imp) if mac and arm64

# These constants are the same across the various Unix platforms we support, so
# we can just define them here.
let DT_DIR = 4
let DT_LNK = 10
let DT_REG = 8

fn extern closedir(stream: Pointer[UInt8]) -> Int32

fn extern strlen(pointer: Pointer[UInt8]) -> UInt64

fn extern inko_reset_error

# The byte of the "." character.
let DOT = 46

class pub ReadDirectory {
  let @stream: Pointer[UInt8]

  fn pub static new(path: String) -> Result[ReadDirectory, Error] {
    let stream = dir_imp.opendir(path.to_pointer)
    let err = Error.last_os_error

    if stream as Int != 0 {
      Result.Ok(ReadDirectory { @stream = stream })
    } else {
      Result.Error(err)
    }
  }
}

impl Iter[Result[(String, FileType), Error]] for ReadDirectory {
  fn pub mut next -> Option[Result[(String, FileType), Error]] {
    loop {
      # This call must come _directly_ before the readdir() call, to ensure we
      # don't reschedule the process until after the call and the `errno` check.
      inko_reset_error

      let entry = dir_imp.readdir(@stream)
      let err = Error.last_os_error

      if entry as Int == 0 {
        return match err {
          case Other(0) -> Option.None
          case err -> Option.Some(Result.Error(err))
        }
      }

      let name_ptr = dir_imp.dirent_name(entry)
      let name_len = strlen(name_ptr) as Int
      let first = name_ptr.0 as Int

      # Skip "."
      if name_len == 1 and first == 46 { next }

      # Skip ".."
      if
        name_len == 2
          and first == DOT
          and (name_ptr as Int + 1 as Pointer[UInt8]).0 as Int == DOT
      {
        next
      }

      let name = String.from_pointer(name_ptr)
      let type = match dir_imp.dirent_type(entry) {
        case DT_DIR -> FileType.Directory
        case DT_REG -> FileType.File
        case DT_LNK -> FileType.SymbolicLink
        case _ -> FileType.Other
      }

      return Option.Some(Result.Ok((name, type)))
    }
  }
}

impl Drop for ReadDirectory {
  fn mut drop {
    # closedir() only errors if the stream itself is invalid, which shouldn't be
    # the case at this point.
    closedir(@stream)
  }
}
