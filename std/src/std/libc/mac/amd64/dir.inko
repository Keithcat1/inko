class extern Dirent {
  let @d_ino: UInt64
  let @d_seekoff: UInt64
  let @d_reclen: UInt16
  let @d_namlen: UInt16
  let @d_type: UInt8
}

# When using macOS on an amd64 platform, opendir/readdir produce data using
# 32-bit inodes, unless we use the $INODE64 suffix. See the following for more
# information:
#
# - <https://assert.cc/posts/darwin_use_64_bit_inode_vs_ctypes/>
# - <https://github.com/rust-lang/libc/issues/414>
fn extern opendir$INODE64(path: Pointer[UInt8]) -> Pointer[UInt8]

fn extern readdir$INODE64(stream: Pointer[UInt8]) -> Pointer[UInt8]

fn pub opendir(path: Pointer[UInt8]) -> Pointer[UInt8] {
  opendir$INODE64(path)
}

fn pub readdir(path: Pointer[UInt8]) -> Pointer[UInt8] {
  readdir$INODE64(path)
}

fn pub dirent_type(pointer: Pointer[UInt8]) -> Int {
  (pointer as Pointer[Dirent]).d_type as Int
}

fn pub dirent_name(pointer: Pointer[UInt8]) -> Pointer[UInt8] {
  pointer as Int + 21 as Pointer[UInt8]
}
