# Types for working with bytes.
import std.alloc
import std.array (bounds_check)
import std.clone (Clone)
import std.cmp (Contains, Equal, min)
import std.drop (Drop)
import std.fmt (Format, Formatter)
import std.hash (Hash, Hasher)
import std.iter (Stream)
import std.option (Option)
import std.ptr
import std.string (Bytes, IntoString, ToString, hash_bytes)

fn extern inko_string_from_bytes(
  state: Pointer[UInt8],
  bytes: Pointer[UInt8],
  size: Int,
) -> String

fn invalid_capacity(size: Int) -> Never {
  panic('the capacity (${size}) must be greater than or equal to zero')
}

fn invalid_size(size: Int) -> Never {
  panic('the size (${size}) must be greater than zero')
}

# A type from which a new `ByteArray` can be created.
trait pub ToByteArray {
  fn pub to_byte_array -> ByteArray
}

# A type which can be moved into a `ByteArray`.
trait pub IntoByteArray {
  fn pub move into_byte_array -> ByteArray
}

# An array of bytes.
#
# Byte arrays are arrays specialised for storing individual bytes in the most
# efficient way possible. Unlike a regular `Array` of `Int` values, each value
# only requires a single byte of space, instead of requiring 8 bytes of space.
#
# Byte arrays are primarily meant for reading and writing data from/to a stream,
# such as a file or a socket. If you simply want to store a list of numbers,
# you're better off using the `Array` type.
type pub ByteArray {
  # The number of bytes stored in this `ByteArray`
  let mut @size: Int

  # The number of bytes that can be stored before a resize is necessary.
  let mut @capacity: Int

  # The buffer containing the raw bytes.
  let mut @buffer: Pointer[UInt8]

  # Returns a new empty `ByteArray`.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.new
  #
  # bytes.size     # => 0
  # bytes.capacity # => 0
  # ```
  fn pub static new -> ByteArray {
    Self(size: 0, capacity: 0, buffer: 0 as Pointer[UInt8])
  }

  # Returns a `ByteArray` with enough space for at least `size` bytes.
  #
  # # Panics
  #
  # This method panics of `size` if less than zero.
  #
  # # Examples
  #
  # ```inko
  # ByteArray.with_capacity(32).capacity # => 32
  # ```
  fn pub static with_capacity(size: Int) -> ByteArray {
    if size < 0 { invalid_capacity(size) }

    Self(
      size: 0,
      capacity: size,
      buffer: alloc.resize(0 as Pointer[UInt8], size),
    )
  }

  # Returns a new `ByteArray` created from the given `Array`.
  fn pub static from_array(array: ref Array[Int]) -> ByteArray {
    let bytes = ByteArray.with_capacity(array.size)

    for v in array.iter { bytes.push(v) }

    bytes
  }

  # Returns a `ByteArray` created from a raw pointer.
  #
  # The `size` argument specifies the number of bytes to read starting at the
  # given pointer.
  #
  # The purpose of this method is to allow creating a `ByteArray` from a pointer
  # returned by C code. Avoid using this method for anything else.
  #
  # # Panics
  #
  # This method panics of `size` if less than zero.
  fn pub static from_pointer(pointer: Pointer[UInt8], size: Int) -> ByteArray {
    if size < 0 { invalid_size(size) }

    let bytes = with_capacity(size)

    alloc.copy(pointer, bytes.buffer, size)
    bytes.size = size
    bytes
  }

  # Returns a `ByteArray` filled with the given byte.
  #
  # The `times` argument specifies how many times the `with` argument must
  # exist in the byte array.
  #
  # # Panics
  #
  # This method panics of `times` if less than zero.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.filled(with: 0, times: 2)
  #
  # bytes.get(0) # => 0
  # bytes.get(1) # => 0
  # ```
  fn pub static filled(with: Int, times: Int) -> ByteArray {
    let bytes = with_capacity(times)

    alloc.write(byte: with, to: bytes.buffer, times: times)
    bytes.size = times
    bytes
  }

  # Returns the number of bytes that can be stored in `self` before `self` needs
  # to be resized.
  #
  # # Examples
  #
  # ```inko
  # ByteArray.new.capacity               # => 0
  # ByteArray.with_capacity(32).capacity # => 32
  # ```
  fn pub inline capacity -> Int {
    @capacity
  }

  # Removes all values from this `ByteArray`.
  #
  # This method has no effect on the amount of memory reserved by `self`,
  # instead it merely sets the size of `self` to zero.
  #
  # # Examples
  #
  # Removing all values:
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20, 30])
  #
  # bytes.clear
  # bytes.size # => 0
  # ```
  fn pub mut clear {
    @size = 0
  }

  # Copies the bytes from the given `ByteArray` or `String` to the end of
  # `self`.
  #
  # # Examples
  #
  # Appending a `ByteArray` to another `ByteArray`:
  #
  # ```inko
  # let a = ByteArray.from_array([10])
  # let b = ByteArray.from_array([20])
  #
  # a.append(b)
  # a # => ByteArray.from_array([10, 20])
  # ```
  #
  # Appending a `String` to a `ByteArray`:
  #
  # ```inko
  # let bytes = 'hello '.to_byte_array
  #
  # bytes.append_string('world')
  # bytes.to_string # => 'hello world'
  # ```
  fn pub mut append[T: Bytes](other: T) {
    copy_from(other, at: 0, size: other.size)
  }

  # Pushes a value to the back of the `ByteArray`, returning the pushed value.
  #
  # # Examples
  #
  # Pushing a value into a `ByteArray`:
  #
  # ```inko
  # let bytes = ByteArray.new
  #
  # bytes.push(10) # => 10
  # bytes.size     # => 1
  # ```
  fn pub mut push(value: Int) {
    reserve(1)
    write_to(@size, value)
    @size += 1
  }

  # Removes a value from the back of the `ByteArray`, returning the removed
  # value.
  #
  # If no value was found, a None is returned instead.
  #
  # # Examples
  #
  # Popping an existing value:
  #
  # ```inko
  # let bytes = ByteArray.from_array([10])
  #
  # bytes.pop  # => Option.Some(10)
  # bytes.size # => 0
  # ```
  #
  # Popping a value when the `ByteArray` is empty:
  #
  # ```inko
  # let bytes = ByteArray.new
  #
  # bytes.pop # => Option.None
  # ```
  fn pub mut pop -> Option[Int] {
    if @size == 0 { return Option.None }

    @size -= 1
    Option.Some(get_unchecked(@size))
  }

  # Removes the value at the given index, returning the removed value.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  #
  # # Examples
  #
  # Removing an existing value:
  #
  # ```inko
  # let bytes = ByteArray.from_array([10])
  #
  # bytes.remove_at(0) # => 10
  # bytes.size         # => 0
  # ```
  fn pub mut remove_at(index: Int) -> Int {
    bounds_check(index, @size)

    let addr = address_of(index)
    let val = addr.0 as Int

    alloc.copy(from: ptr.add(addr, 1), to: addr, size: @size - index - 1)
    @size -= 1
    val
  }

  # Returns a new `String` using the bytes in this `ByteArray`, draining it in
  # the process.
  #
  # After this method is finished, `self` is empty.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([105, 110, 107, 111])
  #
  # bytes.drain_to_string # => 'inko'
  # bytes.empty?          # => true
  # ```
  fn pub mut drain_to_string -> String {
    if empty? { return '' }

    let str = inko_string_from_bytes(_INKO.state, @buffer, @size)

    clear
    str
  }

  # Returns the byte at the given index.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  #
  # # Examples
  #
  # Retrieving an existing byte:
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20])
  #
  # bytes.get(0) # => 10
  # ```
  fn pub get(index: Int) -> Int {
    bounds_check(index, @size)
    get_unchecked(index)
  }

  # Writes the byte `value` to the position `index`.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20])
  #
  # bytes.set(0, 30)
  # bytes.get(0) # => 30
  # ```
  fn pub mut set(index: Int, value: Int) {
    bounds_check(index, @size)
    write_to(index, value)
  }

  # Returns `true` if `self` is empty.
  #
  # # Examples
  #
  # ```inko
  # ByteArray.new.empty? => true
  # ```
  fn pub inline empty? -> Bool {
    @size == 0
  }

  # Converts the `ByteArray` to an `Array!(Int)`.
  #
  # # Examples
  #
  # Converting a `ByteArray`:
  #
  # ```inko
  # let bytes = ByteArray.from_array([105, 110, 107, 111])
  #
  # bytes.to_array # => [105, 110, 107, 111]
  # ```
  fn pub to_array -> Array[Int] {
    iter.to_array
  }

  # Returns an iterator over the bytes in `self`.
  fn pub iter -> Stream[Int] {
    let mut idx = 0

    Stream.new(fn move {
      if idx < @size {
        Option.Some(get_unchecked(idx := idx + 1))
      } else {
        Option.None
      }
    })
  }

  # Reverses `self` in-place
  #
  # # Examples
  #
  # ```inko
  # let a = ByteArray.from_array([10, 20, 30])
  #
  # a.reverse
  #
  # a # => ByteArray.from_array([30, 20, 10])
  # ```
  fn pub mut reverse {
    reverse_at(0)
  }

  # Reverses `self` in-place starting at the given index.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # let a = ByteArray.from_array([10, 20, 30, 40])
  #
  # a.reverse_at(2)
  # a # => ByteArray.from_array([10, 20, 40, 30])
  # ```
  fn pub mut reverse_at(index: Int) {
    bounds_check(index, size)

    let mut a = index
    let mut b = size - 1

    while a < b {
      let a_val = get_unchecked(a)
      let b_val = get_unchecked(b)

      write_to(b, a_val)
      write_to(a, b_val)
      a += 1
      b -= 1
    }
  }

  # Copies up to `size` bytes from `bytes` into `self`, starting at the index
  # `at`.
  #
  # The return value is the number of bytes copied. This value may be less than
  # `size` if there are fewer bytes in `bytes`.
  #
  # If both `at` and `size` are zero, or `at` equals the size of `bytes`, this
  # method doesn't copy anything and the returned number of bytes is zero.
  #
  # # Panics
  #
  # This method panics if `at` is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # let a = ByteArray.from_array([1, 2, 3, 4])
  # let b = ByteArray.new
  #
  # b.copy_from(a, at: 0, size: 2) # => 2
  # b # => ByteArray.from_array([1, 2])
  # ```
  fn pub mut copy_from[T: Bytes](bytes: ref T, at: Int, size: Int) -> Int {
    if (bytes.size == 0 and at == 0) or at == bytes.size { return 0 }

    bounds_check(at, bytes.size)

    let len = min(bytes.size - at, size)

    reserve(len)
    alloc.copy(from: ptr.add(bytes.pointer, at), to: tail, size: len)
    @size += len
    len
  }

  # Resizes `self` to the new size.
  #
  # If the given size is greater than the current size, the `value` argument is
  # used to fill in the additional slots. If the given size is less than the
  # current size, `self` is simply truncated.
  #
  # # Panics
  #
  # This method panics if the given size is less than zero.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.new
  #
  # bytes.resize(size: 2, value: 1)
  # bytes # => ByteArray.from_array([1, 1])
  #
  # bytes.resize(size: 0, value: 0)
  # bytes # => ByteArray.new
  # ```
  fn pub mut resize(size: Int, value: Int) {
    if size < 0 {
      invalid_size(size)
    } else if size == @size {
      return
    } else if size < @size {
      @size = size
      return
    }

    let add = size - @capacity

    if add > 0 { reserve(add) }

    alloc.write(byte: value, to: tail, times: size - @size)
    @size = size
  }

  # Reserves space for exactly `size` additional values.
  #
  # If the capacity is great enough or the given size is less than zero, this
  # method does nothing.
  fn pub mut reserve(size: Int) {
    if @capacity - @size >= size { return }

    @capacity = @capacity + size
    @buffer = alloc.resize(@buffer, @capacity)
  }

  # Returns the last byte in `self`
  #
  # # Examples
  #
  # ```inko
  # ByteArray.new.last                  # => Option.None
  # ByteArray.from_array([10, 20]).last # => Option.Some(20)
  # ```
  fn pub last -> Option[Int] {
    opt(size - 1)
  }

  # Returns `true` if `self` starts with the given sequence of bytes.
  #
  # # Examples
  #
  # ```inko
  # 'hello'.to_byte_array.starts_with?('h'.to_byte_array) # => true
  # 'hello'.to_byte_array.starts_with?('h')               # => true
  # ```
  fn pub starts_with?[T: Bytes](prefix: ref T) -> Bool {
    ptr.starts_with?(@buffer, size, prefix.pointer, prefix.size)
  }

  # Returns `true` if `self` ends with the given sequence of bytes.
  #
  # # Examples
  #
  # ```inko
  # 'hello'.to_byte_array.ends_with?('o'.to_byte_array) # => true
  # 'hello'.to_byte_array.ends_with?('o')               # => true
  # ```
  fn pub ends_with?[T: Bytes](suffix: ref T) -> Bool {
    ptr.ends_with?(@buffer, size, suffix.pointer, suffix.size)
  }

  # Returns `true` if `self` is the same as the given `String`.
  #
  # # Examples
  #
  # ```inko
  # 'hello'.to_byte_array.equals_string?('hello') # => true
  # ```
  fn pub equals_string?(string: String) -> Bool {
    let size = @size

    if size == string.size {
      ptr.equal(@buffer, string.pointer, size)
    } else {
      false
    }
  }

  # Overwrites all bytes in `self` with zero bytes.
  #
  # Note that until [this issue](https://github.com/inko-lang/inko/issues/833)
  # is resolved, the compiler _might_ optimize code such that the writing of the
  # zero bytes is optimized away.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([1, 2, 3])
  #
  # bytes.zero
  # bytes # => ByteArray.from_array([0, 0, 0])
  # ```
  fn pub mut zero {
    alloc.zero(pointer, size)
  }

  fn inline tail -> Pointer[UInt8] {
    ptr.add(@buffer, @size)
  }

  fn inline get_unchecked(index: Int) -> Int {
    address_of(index).0 as Int
  }

  fn inline mut write_to(index: Int, value: Int) {
    address_of(index).0 = value as UInt8
  }

  fn inline address_of(index: Int) -> Pointer[UInt8] {
    (@buffer as Int).wrapping_add(index) as Pointer[UInt8]
  }
}

impl Bytes for ByteArray {
  # Returns the byte at the given index, returning None if the index is out of
  # bounds.
  #
  # # Examples
  #
  # Retrieving an existing byte:
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20])
  #
  # bytes.opt(0) # => Option.Some(10)
  # ```
  #
  # Retrieving a non-existing byte:
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20])
  #
  # bytes.opt(5) # => Option.None
  # ```
  fn pub opt(index: Int) -> Option[Int] {
    if index < 0 or index >= size { return Option.None }

    Option.Some(get_unchecked(index))
  }

  # An alias for `ByteArray.get`.
  fn pub byte(index: Int) -> Int {
    get(index)
  }

  # An alias for `ByteArray.iter`.
  fn pub bytes -> Stream[Int] {
    iter
  }

  # Returns the number of bytes in this `ByteArray`.
  #
  # # Examples
  #
  # Obtaining the size of a `ByteArray`
  #
  # ```inko
  # ByteArray.new.size              # => 0
  # ByteArray.from_array([10]).size # => 1
  # ```
  fn pub inline size -> Int {
    @size
  }

  # Slices `self` into a new `ByteArray`.
  #
  # Similar to slicing a `String`, slicing a `ByteArray` allows one to extract
  # a sub-array by providing a start position and the number of _bytes_ to
  # include starting at the start position.
  #
  # # Examples
  #
  # Slicing a `ByteArray`:
  #
  # ```inko
  # let bytes = ByteArray.from_array([1, 2, 3, 4])
  # let sliced = bytes.slice(start: 1, size: 2)
  #
  # sliced.get(0) # => 2
  # sliced.get(1) # => 3
  # ```
  fn pub slice(start: Int, size: Int) -> ByteArray {
    bounds_check(start, @size)

    let new = ByteArray.new
    let _ = new.copy_from(self, at: start, size: size)

    new
  }

  # Returns a raw pointer to the bytes of `self`.
  #
  # This method is meant to be used when passing byte arrays to foreign
  # functions. You should avoid using it for anything else.
  fn pub pointer -> Pointer[UInt8] {
    @buffer
  }
}

impl Drop for ByteArray {
  fn mut drop {
    if @buffer as Int != 0 { alloc.free(@buffer) }
  }
}

impl ToByteArray for ByteArray {
  fn pub to_byte_array -> ByteArray {
    clone
  }
}

impl IntoByteArray for ByteArray {
  fn pub move into_byte_array -> ByteArray {
    self
  }
}

impl ToString for ByteArray {
  # Returns a new `String` using the bytes in this `ByteArray`.
  #
  # Any invalid UTF-8 sequences will be replaced with `U+FFFD REPLACEMENT
  # CHARACTER`, which looks like this: �
  #
  # # Examples
  #
  # Converting a `ByteArray` into a `String`:
  #
  # ```inko
  # let bytes = ByteArray.from_array([105, 110, 107, 111])
  #
  # bytes.to_string # => 'inko'
  # ```
  fn pub to_string -> String {
    if empty? { return '' }

    inko_string_from_bytes(_INKO.state, @buffer, @size)
  }
}

impl IntoString for ByteArray {
  fn pub move into_string -> String {
    drain_to_string
  }
}

impl Equal for ByteArray {
  # Returns `true` if two `ByteArray` objects are equal to each other.
  #
  # Two `ByteArray` objects are considered equal if they have the exact same
  # values in the exact same order.
  #
  # # Examples
  #
  # Comparing two `ByteArray` objects:
  #
  # ```inko
  # ByteArray.from_array([10]) == ByteArray.from_array([10]) # => true
  # ByteArray.from_array([10]) == ByteArray.from_array([20]) # => false
  # ```
  fn pub ==(other: ref ByteArray) -> Bool {
    let size = self.size

    if size == other.size {
      ptr.equal(pointer, other.pointer, size: size)
    } else {
      false
    }
  }
}

impl Clone for ByteArray {
  fn pub clone -> ByteArray {
    let new = ByteArray.new
    let _ = new.copy_from(self, at: 0, size: @size)

    new
  }
}

impl Hash for ByteArray {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    hash_bytes(self, hasher)
  }
}

impl Contains[Int] for ByteArray {
  # Returns `true` if the given byte is contained in `self`.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20])
  #
  # bytes.contains?(10) # => true
  # ```
  fn pub contains?(value: ref Int) -> Bool {
    iter.any?(fn (ours) { ours == value })
  }
}

impl Format for ByteArray {
  fn pub fmt(formatter: mut Formatter) {
    let fmt = formatter.array

    for byte in iter { fmt.value(byte) }

    fmt.finish
  }
}
