import std.locale.nl (self as locale)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.test('Locale.parse_short_month', fn (t) {
    let loc = locale.Locale.new

    for (idx, name) in locale.SHORT_MONTHS.iter.with_index {
      t.equal(
        loc.parse_short_month(name, start: 0),
        Option.Some((idx, name.size)),
      )
    }

    t.equal(loc.parse_short_month('januari', start: 0), Option.Some((0, 3)))
    t.equal(loc.parse_short_month('foo jan', start: 4), Option.Some((0, 3)))
    t.equal(loc.parse_short_month('', start: 0), Option.None)
    t.equal(loc.parse_short_month('j', start: 0), Option.None)
    t.equal(loc.parse_short_month('ja', start: 0), Option.None)
    t.equal(loc.parse_short_month('JAN', start: 0), Option.None)
    t.equal(loc.parse_short_month('This does not match', start: 0), Option.None)
  })

  t.test('Locale.parse_full_month', fn (t) {
    let loc = locale.Locale.new

    for (idx, name) in locale.FULL_MONTHS.iter.with_index {
      t.equal(
        loc.parse_full_month(name, start: 0),
        Option.Some((idx, name.size)),
      )
    }

    t.equal(loc.parse_full_month('maarten', start: 0), Option.Some((2, 5)))
    t.equal(loc.parse_full_month('foo januari', start: 4), Option.Some((0, 7)))
    t.equal(loc.parse_full_month('jan', start: 0), Option.None)
    t.equal(loc.parse_full_month('janua', start: 0), Option.None)
    t.equal(loc.parse_full_month('januar', start: 0), Option.None)
    t.equal(loc.parse_full_month('JANUARI', start: 0), Option.None)
    t.equal(loc.parse_full_month('', start: 0), Option.None)
    t.equal(loc.parse_full_month('j', start: 0), Option.None)
    t.equal(loc.parse_full_month('ja', start: 0), Option.None)
    t.equal(loc.parse_full_month('This does not match', start: 0), Option.None)
  })

  t.test('Locale.parse_short_day_of_week', fn (t) {
    let loc = locale.Locale.new

    for (idx, name) in locale.SHORT_WEEKDAYS.iter.with_index {
      t.equal(
        loc.parse_short_day_of_week(name, start: 0),
        Option.Some((idx, name.size)),
      )
    }

    t.equal(loc.parse_short_day_of_week('', start: 0), Option.None)
    t.equal(
      loc.parse_short_day_of_week('This does not match', start: 0),
      Option.None,
    )
  })

  t.test('Locale.parse_full_day_of_week', fn (t) {
    let loc = locale.Locale.new

    for (idx, name) in locale.FULL_WEEKDAYS.iter.with_index {
      t.equal(
        loc.parse_full_day_of_week(name, start: 0),
        Option.Some((idx, name.size)),
      )
    }

    t.equal(loc.parse_full_day_of_week('', start: 0), Option.None)
    t.equal(
      loc.parse_full_day_of_week('This does not match', start: 0),
      Option.None,
    )
  })

  t.test('Locale.short_month', fn (t) {
    let loc = locale.Locale.new

    for (idx, name) in locale.SHORT_MONTHS.iter.with_index {
      t.equal(loc.short_month(idx), name)
    }
  })

  t.test('Locale.full_month', fn (t) {
    let loc = locale.Locale.new

    for (idx, name) in locale.FULL_MONTHS.iter.with_index {
      t.equal(loc.full_month(idx), name)
    }
  })

  t.test('Locale.short_day_of_week', fn (t) {
    let loc = locale.Locale.new

    for (idx, name) in locale.SHORT_WEEKDAYS.iter.with_index {
      t.equal(loc.short_day_of_week(idx), name)
    }
  })

  t.test('Locale.full_day_of_week', fn (t) {
    let loc = locale.Locale.new

    for (idx, name) in locale.FULL_WEEKDAYS.iter.with_index {
      t.equal(loc.full_day_of_week(idx), name)
    }
  })
}
