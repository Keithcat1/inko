import std.fmt (fmt)
import std.io (Buffer, BufferedReader, DEFAULT_BUFFER_SIZE, Error, Read, Write)
import std.libc.bsd.errors if bsd
import std.libc.linux.errors if linux
import std.libc.mac.errors if mac
import std.test (Tests)

class Reader {
  let @index: Int
  let @bytes: ByteArray

  fn static new -> Reader {
    Reader(index: 0, bytes: ByteArray.from_array([1, 2, 3]))
  }

  fn static from_array(bytes: Array[Int]) -> Reader {
    Reader(index: 0, bytes: ByteArray.from_array(bytes))
  }
}

impl Read for Reader {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Never] {
    let start = @index
    let mut max = @index + size

    if max > @bytes.size { max = @bytes.size }

    while @index < max {
      into.push(@bytes.get(@index))

      @index += 1
    }

    Result.Ok(@index - start)
  }
}

class SingleByteReader {
  let @index: Int
  let @bytes: ByteArray

  fn static new -> SingleByteReader {
    SingleByteReader(index: 0, bytes: ByteArray.from_array([1, 2, 3]))
  }
}

impl Read for SingleByteReader {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Never] {
    match @bytes.opt(@index) {
      case Some(v) -> {
        into.push(v)
        @index += 1
        Result.Ok(1)
      }
      case _ -> Result.Ok(0)
    }
  }
}

class ErrorReader {}

impl Read for ErrorReader {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    Result.Error(Error.TimedOut)
  }
}

class Writer {
  let @buffer: ByteArray

  fn static new -> Writer {
    Writer(ByteArray.new)
  }
}

impl Write for Writer {
  fn pub mut write_bytes(bytes: ref ByteArray) -> Result[Nil, Never] {
    bytes.iter.each(fn (byte) { @buffer.push(byte) })
    Result.Ok(nil)
  }

  fn pub mut write_string(string: String) -> Result[Nil, Never] {
    string.to_byte_array.iter.each(fn (byte) { @buffer.push(byte) })
    Result.Ok(nil)
  }

  fn pub mut flush -> Result[Nil, Never] {
    Result.Ok(nil)
  }
}

fn pub tests(t: mut Tests) {
  t.test('Error.from_os_error', fn (t) {
    t.equal(Error.from_os_error(errors.EPERM), Error.PermissionDenied)
    t.equal(Error.from_os_error(errors.ENOENT), Error.NotFound)
    t.equal(Error.from_os_error(errors.EINTR), Error.Interrupted)
    t.equal(Error.from_os_error(errors.EAGAIN), Error.WouldBlock)
    t.equal(Error.from_os_error(errors.ENOMEM), Error.OutOfMemory)
    t.equal(Error.from_os_error(errors.EACCES), Error.PermissionDenied)
    t.equal(Error.from_os_error(errors.EBUSY), Error.ResourceBusy)
    t.equal(Error.from_os_error(errors.EEXIST), Error.AlreadyExists)
    t.equal(Error.from_os_error(errors.ENOTDIR), Error.NotADirectory)
    t.equal(Error.from_os_error(errors.EISDIR), Error.IsADirectory)
    t.equal(Error.from_os_error(errors.EINVAL), Error.InvalidArgument)
    t.equal(Error.from_os_error(errors.EFBIG), Error.FileTooLarge)
    t.equal(Error.from_os_error(errors.ENOSPC), Error.StorageFull)
    t.equal(Error.from_os_error(errors.ESPIPE), Error.InvalidSeek)
    t.equal(Error.from_os_error(errors.EROFS), Error.ReadOnlyFilesystem)
    t.equal(Error.from_os_error(errors.EPIPE), Error.BrokenPipe)
    t.equal(Error.from_os_error(errors.EDEADLK), Error.Deadlock)
    t.equal(Error.from_os_error(errors.ENAMETOOLONG), Error.InvalidFileName)
    t.equal(Error.from_os_error(errors.ENOTEMPTY), Error.DirectoryNotEmpty)
    t.equal(Error.from_os_error(errors.ETIME), Error.TimedOut)
    t.equal(Error.from_os_error(errors.EADDRINUSE), Error.AddressInUse)
    t.equal(Error.from_os_error(errors.EADDRNOTAVAIL), Error.AddressUnavailable)
    t.equal(Error.from_os_error(errors.ENETDOWN), Error.NetworkDown)
    t.equal(Error.from_os_error(errors.ENETUNREACH), Error.NetworkUnreachable)
    t.equal(Error.from_os_error(errors.ECONNABORTED), Error.ConnectionAborted)
    t.equal(Error.from_os_error(errors.ECONNRESET), Error.ConnectionReset)
    t.equal(Error.from_os_error(errors.EISCONN), Error.AlreadyConnected)
    t.equal(Error.from_os_error(errors.ENOTCONN), Error.NotConnected)
    t.equal(Error.from_os_error(errors.ETIMEDOUT), Error.TimedOut)
    t.equal(Error.from_os_error(errors.ECONNREFUSED), Error.ConnectionRefused)
    t.equal(Error.from_os_error(errors.EHOSTUNREACH), Error.HostUnreachable)
    t.equal(Error.from_os_error(errors.EINPROGRESS), Error.InProgress)
    t.equal(Error.from_os_error(999), Error.Other(999))
  })

  t.test('Error.fmt', fn (t) {
    t.equal(fmt(Error.AddressInUse), 'AddressInUse')
    t.equal(fmt(Error.AddressUnavailable), 'AddressUnavailable')
    t.equal(fmt(Error.AlreadyConnected), 'AlreadyConnected')
    t.equal(fmt(Error.AlreadyExists), 'AlreadyExists')
    t.equal(fmt(Error.BrokenPipe), 'BrokenPipe')
    t.equal(fmt(Error.ConnectionAborted), 'ConnectionAborted')
    t.equal(fmt(Error.ConnectionRefused), 'ConnectionRefused')
    t.equal(fmt(Error.ConnectionReset), 'ConnectionReset')
    t.equal(fmt(Error.Deadlock), 'Deadlock')
    t.equal(fmt(Error.DirectoryNotEmpty), 'DirectoryNotEmpty')
    t.equal(fmt(Error.FileTooLarge), 'FileTooLarge')
    t.equal(fmt(Error.HostUnreachable), 'HostUnreachable')
    t.equal(fmt(Error.InProgress), 'InProgress')
    t.equal(fmt(Error.Interrupted), 'Interrupted')
    t.equal(fmt(Error.InvalidArgument), 'InvalidArgument')
    t.equal(fmt(Error.InvalidFileName), 'InvalidFileName')
    t.equal(fmt(Error.InvalidSeek), 'InvalidSeek')
    t.equal(fmt(Error.IsADirectory), 'IsADirectory')
    t.equal(fmt(Error.NetworkDown), 'NetworkDown')
    t.equal(fmt(Error.NetworkUnreachable), 'NetworkUnreachable')
    t.equal(fmt(Error.NotADirectory), 'NotADirectory')
    t.equal(fmt(Error.NotConnected), 'NotConnected')
    t.equal(fmt(Error.NotFound), 'NotFound')
    t.equal(fmt(Error.OutOfMemory), 'OutOfMemory')
    t.equal(fmt(Error.PermissionDenied), 'PermissionDenied')
    t.equal(fmt(Error.ReadOnlyFilesystem), 'ReadOnlyFilesystem')
    t.equal(fmt(Error.ResourceBusy), 'ResourceBusy')
    t.equal(fmt(Error.StorageFull), 'StorageFull')
    t.equal(fmt(Error.TimedOut), 'TimedOut')
    t.equal(fmt(Error.WouldBlock), 'WouldBlock')
    t.equal(fmt(Error.Other(999)), 'Other(999)')
  })

  t.test('Read.read_all', fn (t) {
    let reader = Reader.new
    let bytes = ByteArray.new
    let size = reader.read_all(bytes).get

    t.equal(size, 3)
    t.equal(bytes, ByteArray.from_array([1, 2, 3]))
  })

  t.test('Write.print', fn (t) {
    let writer = Writer.new

    writer.print('foo').get

    t.equal(writer.buffer, 'foo\n'.to_byte_array)
  })

  t.test('BufferedRead.read_until with inclusive: true', fn (t) {
    let reader = BufferedReader.new(
      Reader.from_array([0x1, 0xA, 0x2, 0xA, 0x3]),
    )
    let bytes = ByteArray.new

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: true),
      Result.Ok(2),
    )
    t.equal(bytes, ByteArray.from_array([0x1, 0xA]))

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: true),
      Result.Ok(2),
    )
    t.equal(bytes, ByteArray.from_array([0x1, 0xA, 0x2, 0xA]))

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: true),
      Result.Ok(1),
    )
    t.equal(bytes, ByteArray.from_array([0x1, 0xA, 0x2, 0xA, 0x3]))
  })

  t.test('BufferedRead.read_until with inclusive: false', fn (t) {
    let reader = BufferedReader.new(
      Reader.from_array([0x1, 0xA, 0x2, 0xA, 0x3]),
    )
    let bytes = ByteArray.new

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: false),
      Result.Ok(2),
    )
    t.equal(bytes, ByteArray.from_array([0x1]))

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: false),
      Result.Ok(2),
    )
    t.equal(bytes, ByteArray.from_array([0x1, 0x2]))

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: false),
      Result.Ok(1),
    )
    t.equal(bytes, ByteArray.from_array([0x1, 0x2, 0x3]))
  })

  t.test('BufferedRead.read_line with inclusive: true', fn (t) {
    let reader = BufferedReader.new(
      Reader.from_array([0x1, 0xA, 0x2, 0xA, 0x3]),
    )
    let bytes = ByteArray.new

    t.equal(reader.read_line(bytes, inclusive: true), Result.Ok(2))
    t.equal(bytes, ByteArray.from_array([0x1, 0xA]))

    t.equal(reader.read_line(bytes, inclusive: true), Result.Ok(2))
    t.equal(bytes, ByteArray.from_array([0x1, 0xA, 0x2, 0xA]))

    t.equal(reader.read_line(bytes, inclusive: true), Result.Ok(1))
    t.equal(bytes, ByteArray.from_array([0x1, 0xA, 0x2, 0xA, 0x3]))
  })

  t.test('BufferedRead.read_line with inclusive: false', fn (t) {
    let reader = BufferedReader.new(
      Reader.from_array([0x1, 0xA, 0x2, 0xA, 0x3]),
    )
    let bytes = ByteArray.new

    t.equal(reader.read_line(bytes, inclusive: false), Result.Ok(2))
    t.equal(bytes, ByteArray.from_array([0x1]))

    t.equal(reader.read_line(bytes, inclusive: false), Result.Ok(2))
    t.equal(bytes, ByteArray.from_array([0x1, 0x2]))

    t.equal(reader.read_line(bytes, inclusive: false), Result.Ok(1))
    t.equal(bytes, ByteArray.from_array([0x1, 0x2, 0x3]))
  })

  t.test('BufferedRead.read_line', fn (t) {
    let reader = BufferedReader.new(Reader.new)

    t.equal(reader.bytes.to_array, [Result.Ok(1), Result.Ok(2), Result.Ok(3)])
  })

  t.test('BufferedReader.new', fn (t) {
    let reader = BufferedReader.new(Reader.new)

    t.equal(reader.capacity, DEFAULT_BUFFER_SIZE)
  })

  t.test('BufferedReader.with_capacity', fn (t) {
    let reader = BufferedReader.with_capacity(Reader.new, size: 32)

    t.equal(reader.capacity, 32)
  })

  t.panic('BufferedReader.with_capacity with an invalid size', fn {
    BufferedReader.with_capacity(Reader.new, size: 0)
  })

  t.test('BufferedReader.fill_buffer', fn (t) {
    let reader = BufferedReader.with_capacity(Reader.new, size: 3)

    t.equal(reader.fill_buffer, Result.Ok(3))
    t.equal(reader.buffer, ByteArray.from_array([1, 2, 3]))

    # This is to make sure fill_buffer() doesn't somehow mess up the buffer for
    # repeated calls without reading from the buffer.
    t.equal(reader.fill_buffer, Result.Ok(3))
    t.equal(reader.buffer, ByteArray.from_array([1, 2, 3]))

    # This is to make sure that if the buffer is consumed, a call to
    # fill_buffer() resets it.
    reader.read_buffer(into: ByteArray.new, size: 3)
    reader.fill_buffer

    t.true(reader.buffer.empty?)
    t.equal(reader.offset, 0)
  })

  t.test('BufferedReader.fill_buffer when read() returns fewer bytes', fn (t) {
    let reader = BufferedReader.new(SingleByteReader.new)
    let bytes = ByteArray.new

    t.equal(reader.read_all(bytes), Result.Ok(3))
    t.equal(bytes, ByteArray.from_array([1, 2, 3]))
  })

  t.test('BufferedReader.read_buffer', fn (t) {
    let reader = BufferedReader.new(Reader.new)
    let bytes = ByteArray.new

    reader.fill_buffer
    t.equal(reader.read_buffer(into: bytes, size: 2), 2)
    t.equal(reader.offset, 2)
    t.equal(bytes, ByteArray.from_array([1, 2]))
  })

  t.test('BufferedReader.read_byte', fn (t) {
    let ok = BufferedReader.new(Reader.new)
    let err = BufferedReader.new(ErrorReader())

    t.equal(ok.read_byte, Result.Ok(Option.Some(1)))
    t.equal(ok.read_byte, Result.Ok(Option.Some(2)))
    t.equal(ok.read_byte, Result.Ok(Option.Some(3)))
    t.equal(ok.read_byte, Result.Ok(Option.None))
    t.equal(err.read_byte, Result.Error(Error.TimedOut))
  })

  t.test('BufferedReader.read with a small read size', fn (t) {
    let reader = BufferedReader.new(Reader.new)
    let bytes = ByteArray.new

    t.equal(reader.read(into: bytes, size: 2), Result.Ok(2))
    t.equal(bytes, ByteArray.from_array([1, 2]))
    t.equal(reader.buffer, ByteArray.from_array([1, 2, 3]))
    t.equal(reader.offset, 2)

    t.equal(reader.read(into: bytes, size: 2), Result.Ok(1))
    t.equal(bytes, ByteArray.from_array([1, 2, 3]))
    t.equal(reader.buffer, ByteArray.from_array([1, 2, 3]))
    t.equal(reader.offset, 3)
  })

  t.test(
    'BufferedReader.read with a size larger than the buffer size',
    fn (t) {
      let reader = BufferedReader.with_capacity(Reader.new, size: 1)
      let bytes = ByteArray.new

      t.equal(reader.read(into: bytes, size: 1), Result.Ok(1))
      t.equal(reader.read(into: bytes, size: 10), Result.Ok(2))
      t.equal(bytes, ByteArray.from_array([1, 2, 3]))
    },
  )

  t.test('Buffer.read', fn (t) {
    let buffer = Buffer.new('hello')
    let bytes = ByteArray.new

    t.equal(buffer.read(into: bytes, size: 2), Result.Ok(2))
    t.equal(bytes.to_string, 'he')

    t.equal(buffer.read(into: bytes, size: 2), Result.Ok(2))
    t.equal(bytes.to_string, 'hell')
  })

  t.test('Buffer.fill_buffer', fn (t) {
    let buffer = Buffer.new('hello')

    t.equal(buffer.fill_buffer, Result.Ok(5))
    t.equal(buffer.read(into: ByteArray.new, size: 2), Result.Ok(2))
    t.equal(buffer.fill_buffer, Result.Ok(3))
  })

  t.test('Buffer.read_buffer', fn (t) {
    let buffer = Buffer.new('hello')
    let bytes = ByteArray.new

    buffer.fill_buffer
    t.equal(buffer.read_buffer(into: bytes, size: 5), 5)
    t.equal(bytes.to_string, 'hello')
  })

  t.test('Buffer.read_byte', fn (t) {
    let buffer = Buffer.new('abc')

    t.equal(buffer.read_byte, Result.Ok(Option.Some(97)))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(98)))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(99)))
    t.equal(buffer.read_byte, Result.Ok(Option.None))
  })

  t.test('Buffer.seek', fn (t) {
    let buffer = Buffer.new('abc')

    t.equal(buffer.read_byte, Result.Ok(Option.Some(97)))

    t.equal(buffer.seek(0), Result.Ok(0))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(97)))

    t.equal(buffer.seek(10), Result.Ok(10))
    t.equal(buffer.read_byte, Result.Ok(Option.None))

    t.equal(buffer.seek(-1), Result.Ok(2))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(99)))
    t.equal(buffer.read_byte, Result.Ok(Option.None))
  })
}
