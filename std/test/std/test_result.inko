import std.fmt (fmt)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.test('Result.collect', fn (t) {
    let foo = [Result.Ok(1), Result.Error('oops!'), Result.Ok(3)]
    let bar: Array[Result[Int, String]] = [Result.Ok(1), Result.Ok(2)]

    t.equal(Result.collect(foo.into_iter), Result.Error('oops!'))
    t.equal(Result.collect(bar.into_iter), Result.Ok([1, 2]))
  })

  t.test('Result.ok?', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.true(foo.ok?)
    t.false(bar.ok?)
  })

  t.test('Result.error?', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.false(foo.error?)
    t.true(bar.error?)
  })

  t.test('Result.ok', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.equal(foo.ok, Option.Some(42))
    t.equal(bar.ok, Option.None)
  })

  t.test('Result.error', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.equal(foo.error, Option.None)
    t.equal(bar.error, Option.Some('oops!'))
  })

  t.test('Result.get with an Ok', fn (t) {
    let res: Result[Int, String] = Result.Ok(42)

    t.equal(res.get, 42)
  })

  t.panic('Result.get with an Error', fn {
    let res: Result[Int, Int] = Result.Error(0)

    res.get
  })

  t.test('Result.expect with an Ok', fn (t) {
    let res: Result[Int, String] = Result.Ok(42)

    t.equal(res.or_panic('foo'), 42)
  })

  t.panic('Result.expect with an Error', fn {
    let res: Result[Int, Int] = Result.Error(0)

    res.or_panic('foo')
  })

  t.test('Result.or', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.equal(foo.or(0), 42)
    t.equal(bar.or(0), 0)
  })

  t.test('Result.or_else', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')
    let baz: Result[Int, Int] = Result.Error(42)

    t.equal(foo.or_else(fn (_) { 0 }), 42)
    t.equal(bar.or_else(fn (_) { 0 }), 0)
    t.equal(baz.or_else(fn (v) { v }), 42)
  })

  t.test('Result.map', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.equal(foo.map(fn (v) { v.to_string }), Result.Ok('42'))
    t.equal(bar.map(fn (v) { v.to_string }), Result.Error('oops!'))
  })

  t.test('Result.map_error', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.equal(foo.map_error(fn (v) { v.to_upper }), Result.Ok(42))
    t.equal(bar.map_error(fn (v) { v.to_upper }), Result.Error('OOPS!'))
  })

  t.test('Result.then', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.equal(foo.then(fn (v) { Result.Ok(v.to_string) }), Result.Ok('42'))
    t.equal(bar.then(fn (v) { Result.Ok(v.to_string) }), Result.Error('oops!'))
  })

  t.test('Result.else', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.equal(foo.else(fn (v) { Result.Error(v.to_upper) }), Result.Ok(42))
    t.equal(
      bar.else(fn (v) { Result.Error(v.to_upper) }),
      Result.Error('OOPS!'),
    )
  })

  t.test('Result.clone', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.equal(foo.clone, Result.Ok(42))
    t.equal(bar.clone, Result.Error('oops!'))
  })

  t.test('Result.==', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.equal(foo, Result.Ok(42))
    t.equal(bar, Result.Error('oops!'))
  })

  t.test('Result.fmt', fn (t) {
    let foo: Result[Int, String] = Result.Ok(42)
    let bar: Result[Int, String] = Result.Error('oops!')

    t.equal(fmt(foo), 'Ok(42)')
    t.equal(fmt(bar), 'Error("oops!")')
  })
}
