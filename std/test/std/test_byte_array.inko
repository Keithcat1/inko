import helpers (hash)
import std.fmt (fmt)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.test('ByteArray.new', fn (t) {
    t.equal(ByteArray.new, ByteArray.from_array([]))
  })

  t.test('ByteArray.from_array', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.get(0), 10)
    t.equal(bytes.get(1), 20)
  })

  t.test('ByteArray.filled', fn (t) {
    t.equal(ByteArray.filled(with: 0, times: 0), ByteArray.new)
    t.equal(ByteArray.filled(with: 0, times: 2), ByteArray.from_array([0, 0]))
  })

  t.test('ByteArray.clear', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    bytes.clear

    t.equal(bytes, ByteArray.new)
  })

  t.test('ByteArray.append with a ByteArray', fn (t) {
    let a = ByteArray.from_array([10])
    let b = ByteArray.from_array([20])

    a.append(b)
    t.equal(a, ByteArray.from_array([10, 20]))
  })

  t.test('ByteArray.append with a String', fn (t) {
    let a = 'hello '.to_byte_array
    let b = ByteArray.new

    a.append('world')
    b.append('hello')
    t.equal(a.into_string, 'hello world')
    t.equal(b.into_string, 'hello')
  })

  t.test('ByteArray.push', fn (t) {
    let bytes = ByteArray.new

    bytes.push(10)
    bytes.push(20)

    t.equal(bytes, ByteArray.from_array([10, 20]))
  })

  t.test('ByteArray.pop', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.pop, Option.Some(20))
    t.equal(bytes.pop, Option.Some(10))
    t.equal(bytes.pop, Option.None)
  })

  t.test('ByteArray.remove_at', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])

    t.equal(bytes.remove_at(1), 20)
    t.equal(bytes, ByteArray.from_array([10, 30]))
  })

  t.test('ByteArray.drain_to_string', fn (t) {
    let bytes = ByteArray.from_array([105, 110, 107, 111])

    t.equal(bytes.drain_to_string, 'inko')
    t.equal(bytes, ByteArray.new)
  })

  t.test('ByteArray.slice', fn (t) {
    let bytes = ByteArray.from_array([105, 110, 107, 111])

    t.equal(bytes.slice(start: 0, size: 0), ByteArray.new)
    t.equal(bytes.slice(start: 0, size: 1), ByteArray.from_array([105]))
    t.equal(bytes.slice(start: 0, size: 4), bytes)
    t.equal(bytes.slice(start: 0, size: 10), bytes)
  })

  t.test('ByteArray.opt', fn (t) {
    let bytes = ByteArray.from_array([105, 110])

    t.equal(bytes.opt(0), Option.Some(105))
    t.equal(bytes.opt(1), Option.Some(110))
    t.equal(bytes.opt(2), Option.None)
  })

  t.test('ByteArray.size', fn (t) {
    t.equal(ByteArray.new.size, 0)
    t.equal(ByteArray.from_array([10]).size, 1)
  })

  t.test('ByteArray.empty?', fn (t) {
    t.true(ByteArray.new.empty?)
    t.false(ByteArray.from_array([10]).empty?)
  })

  t.test('ByteArray.to_array', fn (t) {
    t.equal(ByteArray.new.to_array, [])
    t.equal(ByteArray.from_array([10, 20]).to_array, [10, 20])
  })

  t.test('ByteArray.iter', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.iter.to_array, [10, 20])
  })

  t.test('ByteArray.bytes', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.bytes.to_array, [10, 20])
  })

  t.test('ByteArray.get', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.get(0), 10)
    t.equal(bytes.get(1), 20)
  })

  t.test('ByteArray.byte', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.byte(0), 10)
    t.equal(bytes.byte(1), 20)
  })

  t.panic('ByteArray.get with an invalid index', fn { ByteArray.new.get(0) })

  t.panic('ByteArray.byte with an invalid index', fn { ByteArray.new.byte(0) })

  t.test('ByteArray.set', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    bytes.set(0, 50)

    t.equal(bytes.get(0), 50)
  })

  t.test('ByteArray.to_byte_array', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.to_byte_array, bytes)
  })

  t.test('ByteArray.into_byte_array', fn (t) {
    t.equal(
      ByteArray.from_array([10, 20]).into_byte_array,
      ByteArray.from_array([10, 20]),
    )
  })

  t.test('ByteArray.to_string', fn (t) {
    t.equal(ByteArray.from_array([105, 110, 107, 111]).to_string, 'inko')
  })

  t.test('ByteArray.==', fn (t) {
    t.equal('a'.to_byte_array, 'a'.to_byte_array)
    t.equal('ab'.to_byte_array, 'ab'.to_byte_array)
    t.equal('abc'.to_byte_array, 'abc'.to_byte_array)
    t.equal('abcd'.to_byte_array, 'abcd'.to_byte_array)
    t.equal('abcde'.to_byte_array, 'abcde'.to_byte_array)
    t.equal('abcdef'.to_byte_array, 'abcdef'.to_byte_array)
    t.equal('abcdefg'.to_byte_array, 'abcdefg'.to_byte_array)
    t.equal('abcdefgh'.to_byte_array, 'abcdefgh'.to_byte_array)
    t.equal('abcdefghi'.to_byte_array, 'abcdefghi'.to_byte_array)
    t.equal('abcdefghij'.to_byte_array, 'abcdefghij'.to_byte_array)
    t.equal('abcdefghijk'.to_byte_array, 'abcdefghijk'.to_byte_array)
    t.equal('abcdefghijkl'.to_byte_array, 'abcdefghijkl'.to_byte_array)
    t.equal('abcdefghijklm'.to_byte_array, 'abcdefghijklm'.to_byte_array)
    t.equal('abcdefghijklmn'.to_byte_array, 'abcdefghijklmn'.to_byte_array)
    t.equal('abcdefghijklmno'.to_byte_array, 'abcdefghijklmno'.to_byte_array)
    t.equal('abcdefghijklmnop'.to_byte_array, 'abcdefghijklmnop'.to_byte_array)
    t.equal(
      'abcdefghijklmnopq'.to_byte_array,
      'abcdefghijklmnopq'.to_byte_array,
    )
    t.equal(
      'abcdefghijklmnopqr'.to_byte_array,
      'abcdefghijklmnopqr'.to_byte_array,
    )
    t.equal(
      'abcdefghijklmnopqrs'.to_byte_array,
      'abcdefghijklmnopqrs'.to_byte_array,
    )
    t.equal('Ä'.to_byte_array, 'Ä'.to_byte_array)
    t.equal('AÄ'.to_byte_array, 'AÄ'.to_byte_array)
    t.equal('쿠키'.to_byte_array, '쿠키'.to_byte_array)

    t.not_equal('foo'.to_byte_array, 'bar'.to_byte_array)
    t.not_equal('Ä'.to_byte_array, '쿠'.to_byte_array)
    t.not_equal('AÄ'.to_byte_array, 'A쿠'.to_byte_array)
    t.not_equal('쿠Ä'.to_byte_array, '쿠키'.to_byte_array)
    t.not_equal('a'.to_byte_array, 'A'.to_byte_array)
    t.not_equal('ab'.to_byte_array, 'AB'.to_byte_array)
    t.not_equal('abc'.to_byte_array, 'ABC'.to_byte_array)
    t.not_equal('abcd'.to_byte_array, 'ABCD'.to_byte_array)
    t.not_equal('abcde'.to_byte_array, 'ABCDE'.to_byte_array)
    t.not_equal('abcdef'.to_byte_array, 'ABCDEF'.to_byte_array)
    t.not_equal('abcdefg'.to_byte_array, 'ABCDEFG'.to_byte_array)
    t.not_equal('abcdefgh'.to_byte_array, 'ABCDEFGH'.to_byte_array)
    t.not_equal('abcdefghi'.to_byte_array, 'ABCDEFGHI'.to_byte_array)
    t.not_equal('abcdefghij'.to_byte_array, 'ABCDEFGHIJ'.to_byte_array)
    t.not_equal('abcdefghijk'.to_byte_array, 'ABCDEFGHIJK'.to_byte_array)
    t.not_equal('abcdefghijkl'.to_byte_array, 'ABCDEFGHIJKL'.to_byte_array)
    t.not_equal('abcdefghijklm'.to_byte_array, 'ABCDEFGHIJKLM'.to_byte_array)
    t.not_equal('abcdefghijklmn'.to_byte_array, 'ABCDEFGHIJKLMN'.to_byte_array)
    t.not_equal(
      'abcdefghijklmno'.to_byte_array,
      'ABCDEFGHIJKLMNO'.to_byte_array,
    )
    t.not_equal(
      'abcdefghijklmnop'.to_byte_array,
      'ABCDEFGHIJKLMNOP'.to_byte_array,
    )
    t.not_equal(
      'abcdefghijklmnopq'.to_byte_array,
      'ABCDEFGHIJKLMNOPQ'.to_byte_array,
    )
    t.not_equal(
      'abcdefghijklmnopqr'.to_byte_array,
      'ABCDEFGHIJKLMNOPQR'.to_byte_array,
    )
    t.not_equal(
      'abcdefghijklmnopqrs'.to_byte_array,
      'ABCDEFGHIJKLMNOPQRS'.to_byte_array,
    )
    t.not_equal('aaaaaaaaa'.to_byte_array, 'aaaaaaaab'.to_byte_array)
    t.not_equal('aaaaaaaaaaaa'.to_byte_array, 'aaaaaaaabbbb'.to_byte_array)
    t.not_equal('aaaaaaaaaa'.to_byte_array, 'aaaaaaaabb'.to_byte_array)
    t.not_equal('aaaaaaaaa'.to_byte_array, 'aaaaaaaab'.to_byte_array)
  })

  t.test('ByteArray.equals_string?', fn (t) {
    t.true('a'.to_byte_array.equals_string?('a'))
    t.true('ab'.to_byte_array.equals_string?('ab'))
    t.true('abc'.to_byte_array.equals_string?('abc'))
    t.true('abcd'.to_byte_array.equals_string?('abcd'))
    t.true('abcde'.to_byte_array.equals_string?('abcde'))
    t.true('abcdef'.to_byte_array.equals_string?('abcdef'))
    t.true('abcdefg'.to_byte_array.equals_string?('abcdefg'))
    t.true('abcdefgh'.to_byte_array.equals_string?('abcdefgh'))
    t.true('abcdefghi'.to_byte_array.equals_string?('abcdefghi'))
    t.true('abcdefghij'.to_byte_array.equals_string?('abcdefghij'))
    t.true('abcdefghijk'.to_byte_array.equals_string?('abcdefghijk'))
    t.true('abcdefghijkl'.to_byte_array.equals_string?('abcdefghijkl'))
    t.true('abcdefghijklm'.to_byte_array.equals_string?('abcdefghijklm'))
    t.true('abcdefghijklmn'.to_byte_array.equals_string?('abcdefghijklmn'))
    t.true('abcdefghijklmno'.to_byte_array.equals_string?('abcdefghijklmno'))
    t.true('abcdefghijklmnop'.to_byte_array.equals_string?('abcdefghijklmnop'))
    t.true(
      'abcdefghijklmnopq'.to_byte_array.equals_string?('abcdefghijklmnopq'),
    )
    t.true(
      'abcdefghijklmnopqr'.to_byte_array.equals_string?('abcdefghijklmnopqr'),
    )
    t.true(
      'abcdefghijklmnopqrs'.to_byte_array.equals_string?('abcdefghijklmnopqrs'),
    )
    t.true('Ä'.to_byte_array.equals_string?('Ä'))
    t.true('AÄ'.to_byte_array.equals_string?('AÄ'))
    t.true('쿠키'.to_byte_array.equals_string?('쿠키'))

    t.false('foo'.to_byte_array.equals_string?('bar'))
    t.false('Ä'.to_byte_array.equals_string?('쿠'))
    t.false('AÄ'.to_byte_array.equals_string?('A쿠'))
    t.false('쿠Ä'.to_byte_array.equals_string?('쿠키'))
    t.false('a'.to_byte_array.equals_string?('A'))
    t.false('ab'.to_byte_array.equals_string?('AB'))
    t.false('abc'.to_byte_array.equals_string?('ABC'))
    t.false('abcd'.to_byte_array.equals_string?('ABCD'))
    t.false('abcde'.to_byte_array.equals_string?('ABCDE'))
    t.false('abcdef'.to_byte_array.equals_string?('ABCDEF'))
    t.false('abcdefg'.to_byte_array.equals_string?('ABCDEFG'))
    t.false('abcdefgh'.to_byte_array.equals_string?('ABCDEFGH'))
    t.false('abcdefghi'.to_byte_array.equals_string?('ABCDEFGHI'))
    t.false('abcdefghij'.to_byte_array.equals_string?('ABCDEFGHIJ'))
    t.false('abcdefghijk'.to_byte_array.equals_string?('ABCDEFGHIJK'))
    t.false('abcdefghijkl'.to_byte_array.equals_string?('ABCDEFGHIJKL'))
    t.false('abcdefghijklm'.to_byte_array.equals_string?('ABCDEFGHIJKLM'))
    t.false('abcdefghijklmn'.to_byte_array.equals_string?('ABCDEFGHIJKLMN'))
    t.false('abcdefghijklmno'.to_byte_array.equals_string?('ABCDEFGHIJKLMNO'))
    t.false('abcdefghijklmnop'.to_byte_array.equals_string?('ABCDEFGHIJKLMNOP'))
    t.false(
      'abcdefghijklmnopq'.to_byte_array.equals_string?('ABCDEFGHIJKLMNOPQ'),
    )
    t.false(
      'abcdefghijklmnopqr'.to_byte_array.equals_string?('ABCDEFGHIJKLMNOPQR'),
    )
    t.false(
      'abcdefghijklmnopqrs'.to_byte_array.equals_string?('ABCDEFGHIJKLMNOPQRS'),
    )
    t.false('aaaaaaaaa'.to_byte_array.equals_string?('aaaaaaaab'))
    t.false('aaaaaaaaaaaa'.to_byte_array.equals_string?('aaaaaaaabbbb'))
    t.false('aaaaaaaaaa'.to_byte_array.equals_string?('aaaaaaaabb'))
    t.false('aaaaaaaaa'.to_byte_array.equals_string?('aaaaaaaab'))
  })

  t.test('ByteArray.clone', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.clone, bytes)
  })

  t.test('ByteArray.hash', fn (t) {
    [
      'a'.to_byte_array,
      'aa'.to_byte_array,
      'aaa'.to_byte_array,
      'aaaa'.to_byte_array,
      'aaaa'.to_byte_array,
      'aaaaa'.to_byte_array,
      'aaaaaa'.to_byte_array,
      'aaaaaaa'.to_byte_array,
      'aaaaaaaa'.to_byte_array,
      'aaaaaaaaa'.to_byte_array,
      'aaaaaaaaaa'.to_byte_array,
      'aaaaaaaaaaa'.to_byte_array,
    ]
      .into_iter
      .each(fn (v) { t.equal(hash(v), hash(v)) })

    t.not_equal(hash('hello'.to_byte_array), hash('world'.to_byte_array))
  })

  t.test('ByteArray.contains?', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.true(bytes.contains?(10))
    t.true(bytes.contains?(20))
    t.false(bytes.contains?(30))
  })

  t.test('ByteArray.fmt', fn (t) {
    t.equal(fmt(ByteArray.new), '[]')
    t.equal(fmt(ByteArray.from_array([10])), '[10]')
    t.equal(fmt(ByteArray.from_array([10, 20])), '[10, 20]')
  })

  t.test('ByteArray.reverse', fn (t) {
    let vals = ByteArray.from_array([10, 20, 30])

    vals.reverse

    t.equal(vals, ByteArray.from_array([30, 20, 10]))
  })

  t.test('ByteArray.reverse_at', fn (t) {
    let vals = ByteArray.from_array([10, 20, 30, 40])

    vals.reverse_at(2)

    t.equal(vals, ByteArray.from_array([10, 20, 40, 30]))
  })

  t.test('ByteArray.copy_from', fn (t) {
    let a = ByteArray.from_array([1, 2, 3, 4])
    let b = ByteArray.new
    let c = ByteArray.new
    let d = ByteArray.new

    t.equal(b.copy_from(a, at: 0, size: 2), 2)
    t.equal(a, ByteArray.from_array([1, 2, 3, 4]))
    t.equal(b, ByteArray.from_array([1, 2]))

    t.equal(b.copy_from(b, at: 0, size: 2), 2)
    t.equal(b, ByteArray.from_array([1, 2, 1, 2]))

    t.equal(c.copy_from(a, at: 3, size: 1), 1)
    t.equal(c, ByteArray.from_array([4]))

    t.equal(d.copy_from('abc', at: 0, size: 3), 3)
    t.equal(d.into_string, 'abc')
  })

  t.panic('ByteArray.copy_from with an index that is too great', fn {
    let a = ByteArray.from_array([1, 2, 3, 4])
    let b = ByteArray.new

    b.copy_from(a, at: 10, size: 2)
  })

  t.panic('ByteArray.copy_from with an index that is too small', fn {
    let a = ByteArray.from_array([1, 2, 3, 4])
    let b = ByteArray.new

    b.copy_from(a, at: -3, size: 2)
  })

  t.test('ByteArray.resize', fn (t) {
    let bytes = ByteArray.new

    bytes.resize(size: 2, value: 1)
    t.equal(bytes, ByteArray.from_array([1, 1]))

    bytes.resize(size: 0, value: 0)
    t.equal(bytes, ByteArray.new)
  })

  t.panic('ByteArray.resize with an invalid size', fn {
    ByteArray.new.resize(size: -5, value: 0)
  })

  t.test('ByteArray.from_pointer', fn (t) {
    let a = ByteArray.from_array([1, 2, 3, 4])
    let b = ByteArray.from_pointer(a.to_pointer, size: 4)

    t.equal(a, b)
  })

  t.test('ByteArray.last', fn (t) {
    t.equal(ByteArray.new.last, Option.None)
    t.equal(ByteArray.from_array([10, 20]).last, Option.Some(20))
  })

  t.test('ByteArray.starts_with?', fn (t) {
    t.true('hello'.to_byte_array.starts_with?('hello'.to_byte_array))
    t.true('😀foo'.to_byte_array.starts_with?('😀'.to_byte_array))
    t.true('foo😀'.to_byte_array.starts_with?('foo'.to_byte_array))

    t.false(''.to_byte_array.starts_with?('x'.to_byte_array))
    t.false(''.to_byte_array.starts_with?(''.to_byte_array))
    t.false('hello'.to_byte_array.starts_with?(''.to_byte_array))
    t.false('hello'.to_byte_array.starts_with?('x'.to_byte_array))
    t.false('😀foo'.to_byte_array.starts_with?('foo'.to_byte_array))

    t.true('hello'.to_byte_array.starts_with?('hello'))
    t.true('😀foo'.to_byte_array.starts_with?('😀'))
    t.true('foo😀'.to_byte_array.starts_with?('foo'))

    t.false(''.to_byte_array.starts_with?('x'))
    t.false(''.to_byte_array.starts_with?(''))
    t.false('hello'.to_byte_array.starts_with?(''))
    t.false('hello'.to_byte_array.starts_with?('x'))
    t.false('😀foo'.to_byte_array.starts_with?('foo'))
  })

  t.test('ByteArray.ends_with?', fn (t) {
    t.true('hello_world'.to_byte_array.ends_with?('world'.to_byte_array))
    t.true('hello_world'.to_byte_array.ends_with?('d'.to_byte_array))
    t.true('foo😀'.to_byte_array.ends_with?('😀'.to_byte_array))

    t.false('hello_world'.to_byte_array.ends_with?(''.to_byte_array))
    t.false(
      'hello_world'.to_byte_array.ends_with?(
        'this is a long string'.to_byte_array,
      ),
    )
    t.false('hello_world'.to_byte_array.ends_with?('x'.to_byte_array))
    t.false(''.to_byte_array.ends_with?('x'.to_byte_array))
    t.false(''.to_byte_array.ends_with?(''.to_byte_array))

    t.true('hello_world'.to_byte_array.ends_with?('world'))
    t.true('hello_world'.to_byte_array.ends_with?('d'))
    t.true('foo😀'.to_byte_array.ends_with?('😀'))

    t.false('hello_world'.to_byte_array.ends_with?(''))
    t.false('hello_world'.to_byte_array.ends_with?('this is a long string'))
    t.false('hello_world'.to_byte_array.ends_with?('x'))
    t.false(''.to_byte_array.ends_with?('x'))
    t.false(''.to_byte_array.ends_with?(''))
  })
}
