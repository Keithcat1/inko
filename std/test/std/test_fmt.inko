import std.fmt.(Formatter, fmt)
import std.test.Tests

fn pub tests(t: mut Tests) {
  t.test('Formatter.descend') fn (t) {
    let fmt1 = Formatter.new
    let fmt2 = Formatter.new

    fmt1.descend fn {
      fmt1.descend fn {
        fmt1.descend fn {
          fmt1.descend fn {
            fmt1.descend fn {
              fmt1.descend fn {
                fmt1.descend fn {
                  fmt1.descend fn {
                    fmt1.descend fn {
                      fmt1.descend fn {
                        fmt1.descend fn {
                          fmt1.descend fn {
                            fmt1.descend fn {
                              fmt1.descend fn {
                                fmt1.descend fn {
                                  fmt1.descend fn {
                                    fmt1.descend fn {
                                      fmt1.write('test')
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    fmt2.descend fn { fmt2.write('test') }

    t.equal(fmt1.into_string, '...')
    t.equal(fmt2.into_string, 'test')
  }

  t.test('Formatter.write') fn (t) {
    let fmt = Formatter.new

    fmt.write('test')

    t.equal(fmt.into_string, 'test')
  }

  t.test('fmt.fmt') fn (t) {
    t.equal(fmt('test').into_string, '"test"')
  }
}
