import std.stdio (Stderr, Stdin, Stdout)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.fork(
    'Stdin.read',
    child: fn {
      let out = Stdout.new
      let inp = Stdin.new
      let bytes = ByteArray.new
      let _ = inp.read_all(bytes)
      let _ = out.write(bytes)
    },
    test: fn (test, process) {
      process.stdin('hello')
      test.equal(process.spawn.stdout, 'hello')
    },
  )

  t.fork(
    'Stdin.terminal? in a pipe',
    child: fn {
      let stdout = Stdout.new
      let stdin = Stdin.new
      let _ = stdout.write(stdin.terminal?.to_string)
    },
    test: fn (test, process) { test.equal(process.spawn.stdout, 'false') },
  )

  t.fork(
    'Stdout.write',
    child: fn { let _ = Stdout.new.write('hello'.to_byte_array) },
    test: fn (test, process) { test.equal(process.spawn.stdout, 'hello') },
  )

  t.fork(
    'Stdout.print',
    child: fn { let _ = Stdout.new.print('hello') },
    test: fn (test, process) { test.equal(process.spawn.stdout, 'hello\n') },
  )

  t.fork(
    'Stdout.flush',
    child: fn {
      let out = Stdout.new
      let _ = out.write('hello')
      let _ = out.flush
    },
    test: fn (test, process) { test.equal(process.spawn.stdout, 'hello') },
  )

  t.fork(
    'Stdout.terminal? in a pipe',
    child: fn {
      let stdout = Stdout.new
      let _ = stdout.write(stdout.terminal?.to_string)
    },
    test: fn (test, process) { test.equal(process.spawn.stdout, 'false') },
  )

  t.fork(
    'Stderr.write',
    child: fn { let _ = Stderr.new.write('hello'.to_byte_array) },
    test: fn (test, process) { test.equal(process.spawn.stderr, 'hello') },
  )

  t.fork(
    'Stderr.print',
    child: fn { let _ = Stderr.new.print('hello') },
    test: fn (test, process) { test.equal(process.spawn.stderr, 'hello\n') },
  )

  t.fork(
    'Stderr.flush',
    child: fn {
      let out = Stderr.new
      let _ = out.write('hello')
      let _ = out.flush
    },
    test: fn (test, process) { test.equal(process.spawn.stderr, 'hello') },
  )

  t.fork(
    'Stderr.terminal? in a pipe',
    child: fn {
      let stdout = Stdout.new
      let stderr = Stderr.new
      let _ = stdout.write(stderr.terminal?.to_string)
    },
    test: fn (test, process) { test.equal(process.spawn.stdout, 'false') },
  )
}
