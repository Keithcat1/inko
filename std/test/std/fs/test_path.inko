import helpers.(fmt)
import std.env
import std.fs.(DirectoryEntry, FileType)
import std.fs.file.(self, ReadOnlyFile, WriteOnlyFile)
import std.fs.path.(self, Path)
import std.sys
import std.test.Tests

fn created_at? -> Bool {
  env.temporary_directory.created_at.ok?
}

fn modified_at? -> Bool {
  env.temporary_directory.modified_at.ok?
}

fn accessed_at? -> Bool {
  env.temporary_directory.accessed_at.ok?
}

fn read(from: ref Path) -> String {
  let file = ReadOnlyFile.new(from.clone).unwrap
  let bytes = ByteArray.new

  file.read_all(bytes).unwrap

  bytes.into_string
}

fn write(string: String, to: ref Path) {
  let file = WriteOnlyFile.new(to.clone).unwrap

  file.write_string(string).unwrap
}

fn pub tests(t: mut Tests) {
  t.test('path.SEPARATOR') fn (t) {
    t.equal(path.SEPARATOR, '/')
  }

  t.test('Path.file?') fn (t) {
    let path = env.temporary_directory.join("inko-test-{t.id}")

    t.false(path.file?)
    write('test', to: path)
    t.true(path.file?)

    path.remove_file.unwrap
  }

  t.test('Path.directory?') fn (t) {
    t.true(env.temporary_directory.directory?)
    t.false(Path.new('inko-test-doesnt-exist').directory?)
  }

  t.test('Path.exists?') fn (t) {
    t.true(env.temporary_directory.exists?)
    t.false(Path.new('inko-test-doesnt-exist').exists?)
  }

  if created_at? {
    t.test('Path.created_at') fn (t) {
      let path = env.temporary_directory

      t.true(path.created_at.ok?)
    }
  }

  if modified_at? {
    t.test('Path.modified_at') fn (t) {
      let path = env.temporary_directory

      t.true(path.modified_at.ok?)
    }
  }

  if accessed_at? {
    t.test('Path.accessed_at') fn (t) {
      let path = env.temporary_directory

      t.true(path.accessed_at.ok?)
    }
  }

  t.test('Path.absolute?') fn (t) {
    t.true(Path.new('/foo').absolute?)
    t.false(Path.new('foo').absolute?)
  }

  t.test('Path.relative?') fn (t) {
    t.true(Path.new('foo').relative?)
    t.false(Path.new('/foo').relative?)
  }

  t.test('Path.join') fn (t) {
    t.equal(Path.new('foo').join('bar'), Path.new('foo/bar'))
    t.equal(Path.new('foo').join('/').join('bar'), Path.new('/bar'))
    t.equal(Path.new('foo').join(''), Path.new('foo'))
  }

  t.test('Path.directory') fn (t) {
    t.equal(Path.new('foo').join('bar').directory, Path.new('foo'))
  }

  t.test('Path.==') fn (t) {
    t.equal(Path.new('foo'), Path.new('foo'))
    t.not_equal(Path.new('foo'), Path.new('bar'))
  }

  t.test('Path.to_string') fn (t) {
    t.equal(Path.new('foo').to_string, 'foo')
  }

  t.test('Path.into_string') fn (t) {
    t.equal(Path.new('foo').into_string, 'foo')
  }

  t.test('Path.size') fn (t) {
    t.true(env.temporary_directory.size.unwrap >= 0)
  }

  t.test('Path.clone') fn (t) {
    t.equal(Path.new('foo').clone, Path.new('foo'))
  }

  t.test('Path.to_path') fn (t) {
    t.equal(Path.new('foo').to_path, Path.new('foo'))
  }

  t.test('Path.into_path') fn (t) {
    t.equal(Path.new('foo').into_path, Path.new('foo'))
  }

  t.test('Path.fmt') fn (t) {
    t.equal(fmt(Path.new('foo')), '"foo"')
  }

  t.test('Path.expand') fn (t) {
    let temp = env.temporary_directory
    let bar = temp.join('foo').join('bar')

    bar.create_directory_all.unwrap

    let expanded = bar.join('..').join('..').expand

    t.equal(expanded, Result.Ok(temp))
    bar.remove_directory_all
  }

  t.test('Path.tail') fn (t) {
    t.equal(Path.new('foo').tail, 'foo')
    t.equal(Path.new('foo').join('bar').tail, 'bar')
    t.equal(Path.new('foo').join('bar.txt').tail, 'bar.txt')
    t.equal(Path.new('').tail, '')
    t.equal(Path.new('..').tail, '..')
  }

  t.test('Path.list with a valid directory') fn (t) {
    let root = env.temporary_directory.join("inko-test-dir-{t.id}")
    let foo = root.join('foo')

    root.create_directory.unwrap
    foo.create_directory.unwrap

    let entry = root
      .list
      .unwrap
      .select_map fn (e) { e.ok }
      .find fn (e) { e.path == foo }

    t.equal(
      entry,
      Option.Some(DirectoryEntry { @path = foo, @type = FileType.Directory })
    )

    let _ = root.remove_directory_all
  }

  t.test('Path.list with an invalid directory') fn (t) {
    let root = env.temporary_directory.join("inko-test-dir-{t.id}")

    t.true(root.list.error?)
  }

  t.test('Path.remove_file') fn (t) {
    let path = env.temporary_directory.join("inko-test-{t.id}")

    t.true(path.remove_file.error?)

    write('test', to: path)

    t.true(path.remove_file.ok?)
    t.false(path.exists?)
  }

  t.test('Path.remove_directory') fn (t) {
    let path = env.temporary_directory.join("inko-test-dir-{t.id}")

    t.true(path.remove_directory.error?)

    path.create_directory.unwrap

    t.true(path.remove_directory.ok?)
    t.false(path.directory?)
  }

  t.test('Path.create_directory') fn (t) {
    let path = env.temporary_directory.join("inko-test-dir-{t.id}")

    t.true(path.create_directory.ok?)
    t.true(path.directory?)
    t.true(path.create_directory.error?)

    path.remove_directory.unwrap
  }

  t.test('Path.create_directory_all') fn (t) {
    let root = env.temporary_directory.join("inko-test-dir-{t.id}")
    let path = root.join('foo').join('bar')

    t.true(path.create_directory_all.ok?)
    t.true(path.directory?)
    t.true(path.create_directory_all.ok?)

    root.remove_directory_all.unwrap
  }

  t.test('Path.remove_directory') fn (t) {
    let path = env.temporary_directory.join("inko-test-dir-{t.id}")

    path.create_directory.unwrap

    t.true(path.remove_directory.ok?)
    t.true(path.remove_directory.error?)
    t.false(path.directory?)
  }

  t.test('Path.remove_directory_all') fn (t) {
    let root = env.temporary_directory.join("inko-test-dir-{t.id}")
    let path = root.join('foo').join('bar')

    path.create_directory_all.unwrap

    t.true(root.remove_directory_all.ok?)
    t.true(root.remove_directory_all.error?)
    t.false(root.directory?)
  }

  t.test('Path.copy') fn (t) {
    let path1 = env.temporary_directory.join("inko-test-{t.id}-1")
    let path2 = env.temporary_directory.join("inko-test-{t.id}-2")

    write('test', to: path1)

    t.true(path1.copy(to: path2).ok?)
    t.equal(read(path2), 'test')

    path1.remove_file.unwrap
    path2.remove_file.unwrap
  }
}
