type copy A {
  let @value: Int
}

fn owned[T](value: T) {}

fn mutable_owned[T: mut](value: T) {}

fn mutable_borrow[T: mut](value: mut T) {}

fn immutable_borrow[T](value: ref T) {}

fn example {
  owned(1)
  owned(1.0)
  owned('test')
  owned(A(1))

  immutable_borrow(1)
  immutable_borrow(1.0)
  immutable_borrow('test')
  immutable_borrow(A(1))

  mutable_owned(1)
  mutable_owned(1.0)
  mutable_owned('test')
  mutable_owned(A(1))

  mutable_borrow(1)
  mutable_borrow(1.0)
  mutable_borrow('test')
  mutable_borrow(A(1))
}

# value_types_passed_to_mutable_arguments.inko:24:17 error(invalid-type): expected a value of type 'T: mut', found 'Int'
# value_types_passed_to_mutable_arguments.inko:25:17 error(invalid-type): expected a value of type 'T: mut', found 'Float'
# value_types_passed_to_mutable_arguments.inko:26:17 error(invalid-type): expected a value of type 'T: mut', found 'String'
# value_types_passed_to_mutable_arguments.inko:27:17 error(invalid-type): expected a value of type 'T: mut', found 'A'
# value_types_passed_to_mutable_arguments.inko:29:18 error(invalid-type): expected a value of type 'mut T: mut', found 'Int'
# value_types_passed_to_mutable_arguments.inko:30:18 error(invalid-type): expected a value of type 'mut T: mut', found 'Float'
# value_types_passed_to_mutable_arguments.inko:31:18 error(invalid-type): expected a value of type 'mut T: mut', found 'String'
# value_types_passed_to_mutable_arguments.inko:32:18 error(invalid-type): expected a value of type 'mut T: mut', found 'A'
