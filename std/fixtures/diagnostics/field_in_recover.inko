class List {
  let @values: Array[Int]
  let @sendable: uni Array[Int]

  fn example1 {
    recover {
      @values # This is fine, as the field is exposed as `uni ref` or `uni mut`
      nil
    }
  }

  fn example2 {
    recover @values.clone # This _is_ allowed, as cloning returns a new value
  }

  fn example3 {
    recover @values # The field type isn't recoverable, so this isn't allowed
  }

  fn mut example4 {
    recover {
      @values = [10, 20] # Not allowed, as references might escape

      nil
    }
  }

  fn mut example5 {
    recover {
      @sendable = recover [10] # This _is_ OK because the value is sendable.
      nil
    }
  }

  fn mut example6 {
    recover {
      self.values = [10]
      self.sendable = recover [10]
    }
  }

  fn mut example7 {
    recover @values := recover [10]
  }
}

# field_in_recover.inko:17:5 error(invalid-type): values of type 'uni ref Array[Int]' can't be recovered
# field_in_recover.inko:22:7 error(invalid-symbol): the field 'values' can't be assigned a value of type 'Array[Int]', as it's not sendable
# field_in_recover.inko:37:12 error(invalid-symbol): the field 'values' can't be assigned a value of type 'Array[Int]', as it's not sendable
# field_in_recover.inko:43:13 error(invalid-assign): the value of 'values' can't be replaced inside a 'recover', as the old value isn't sendable
