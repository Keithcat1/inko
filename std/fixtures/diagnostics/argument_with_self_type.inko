trait Trait {
  fn method(value: Self)
}

type Type {}

impl Trait for Type {
  fn method(value: Self) {}
}

type List[T] {
  fn accept(value: ref Self) {}
}

fn example1 {
  Type().method(10)
}

fn example2[T: Trait](value: T) {
  value.method(10)
}

fn example3 {
  let a: List[Int] = List()

  a.accept(a)
}

# argument_with_self_type.inko:16:17 error(invalid-type): expected a value of type 'Type', found 'Int'
# argument_with_self_type.inko:20:16 error(invalid-type): expected a value of type 'T', found 'Int'
