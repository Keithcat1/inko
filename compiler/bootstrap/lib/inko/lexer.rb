
# line 1 "lib/inko/lexer.rl"

# line 3 "lib/inko/lexer.rl"
module Inko
  class Lexer
    
# line 9 "lib/inko/lexer.rb"
class << self
	attr_accessor :_inko_lexer_trans_keys
	private :_inko_lexer_trans_keys, :_inko_lexer_trans_keys=
end
self._inko_lexer_trans_keys = [
	0, 0, 34, 92, 0, 0, 
	39, 92, 0, 0, 43, 
	57, 48, 57, 48, 57, 
	42, 42, 42, 47, 0, 127, 
	0, 127, 10, 10, 61, 
	91, 34, 92, 10, 10, 
	61, 61, 38, 61, 39, 92, 
	42, 61, 48, 64, 46, 
	95, 48, 95, 48, 64, 
	46, 46, 46, 46, 42, 61, 
	0, 127, 0, 127, 9, 
	32, 10, 10, 60, 61, 
	62, 62, 61, 61, 61, 62, 
	0, 127, 0, 127, 0, 
	127, 61, 61, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 61, 124, 
	9, 32, 9, 32, 0, 
	127, 0, 127, 0
]

class << self
	attr_accessor :_inko_lexer_key_spans
	private :_inko_lexer_key_spans, :_inko_lexer_key_spans=
end
self._inko_lexer_key_spans = [
	0, 59, 0, 54, 0, 15, 10, 10, 
	1, 6, 128, 128, 1, 31, 59, 1, 
	1, 24, 54, 20, 17, 50, 48, 17, 
	1, 1, 20, 128, 128, 24, 1, 2, 
	1, 1, 2, 128, 128, 128, 1, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 64, 24, 24, 128, 128
]

class << self
	attr_accessor :_inko_lexer_index_offsets
	private :_inko_lexer_index_offsets, :_inko_lexer_index_offsets=
end
self._inko_lexer_index_offsets = [
	0, 0, 60, 61, 116, 117, 133, 144, 
	155, 157, 164, 293, 422, 424, 456, 516, 
	518, 520, 545, 600, 621, 639, 690, 739, 
	757, 759, 761, 782, 911, 1040, 1065, 1067, 
	1070, 1072, 1074, 1077, 1206, 1335, 1464, 1466, 
	1595, 1724, 1853, 1982, 2111, 2240, 2369, 2498, 
	2627, 2756, 2885, 3014, 3143, 3272, 3401, 3530, 
	3659, 3788, 3917, 4046, 4175, 4304, 4433, 4562, 
	4691, 4820, 4949, 5078, 5207, 5336, 5465, 5594, 
	5723, 5852, 5981, 6110, 6239, 6368, 6497, 6626, 
	6755, 6884, 7013, 7142, 7271, 7400, 7529, 7658, 
	7787, 7916, 8045, 8174, 8303, 8432, 8561, 8690, 
	8819, 8948, 9077, 9142, 9167, 9192, 9321
]

class << self
	attr_accessor :_inko_lexer_indicies
	private :_inko_lexer_indicies, :_inko_lexer_indicies=
end
self._inko_lexer_indicies = [
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 1, 1, 5, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 6, 4, 4, 8, 7, 8, 
	7, 7, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 10, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 14, 13, 14, 13, 13, 
	13, 13, 15, 13, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 18, 17, 
	17, 19, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 20, 21, 22, 
	17, 23, 24, 25, 26, 27, 28, 29, 
	30, 31, 32, 33, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 34, 17, 
	35, 36, 37, 17, 38, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 40, 
	17, 41, 42, 16, 17, 43, 44, 45, 
	46, 47, 48, 16, 16, 49, 16, 16, 
	50, 51, 52, 16, 16, 16, 53, 54, 
	55, 16, 16, 16, 16, 16, 16, 56, 
	57, 58, 17, 17, 16, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 59, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 10, 
	10, 10, 10, 10, 59, 10, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	10, 10, 10, 10, 16, 10, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	10, 10, 10, 10, 10, 16, 18, 60, 
	62, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 63, 61, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 1, 10, 64, 66, 65, 
	68, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 69, 
	67, 5, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 6, 4, 
	71, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 72, 70, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 73, 
	73, 73, 74, 73, 73, 75, 73, 77, 
	76, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	78, 76, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 8, 79, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 80, 80, 80, 
	81, 82, 80, 83, 80, 85, 84, 87, 
	86, 13, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 89, 88, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 92, 
	93, 91, 91, 94, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 92, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	95, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 90, 91, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 91, 91, 91, 91, 91, 90, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	97, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 96, 96, 96, 96, 96, 97, 96, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 96, 96, 96, 96, 90, 96, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 96, 96, 96, 96, 96, 90, 
	92, 93, 91, 91, 94, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 92, 
	91, 93, 98, 100, 101, 99, 103, 102, 
	105, 104, 107, 108, 106, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 109, 60, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	60, 60, 60, 60, 60, 109, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 111, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	110, 110, 110, 110, 110, 111, 110, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 110, 110, 110, 110, 109, 110, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 110, 110, 110, 110, 110, 109, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 112, 112, 112, 112, 112, 112, 112, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 112, 112, 112, 112, 39, 112, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 112, 112, 112, 112, 112, 39, 
	114, 113, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 59, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 59, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 16, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 116, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 16, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 59, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 59, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 16, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 117, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 16, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 59, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 59, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 16, 115, 16, 16, 16, 
	16, 118, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 16, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 59, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 59, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 16, 115, 119, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 16, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 59, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 59, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 16, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 120, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 16, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	59, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 59, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 16, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 121, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 16, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 59, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 59, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 16, 
	115, 122, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	16, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 59, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	59, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	16, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 123, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 16, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 59, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 59, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 16, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 124, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 16, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 59, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 59, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 16, 115, 16, 16, 16, 16, 
	125, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 126, 16, 115, 115, 
	115, 115, 115, 16, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 59, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 59, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 16, 115, 16, 16, 16, 
	16, 16, 127, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 16, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 59, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 59, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 16, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 128, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 16, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 59, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 59, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 16, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 129, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 130, 16, 
	16, 115, 115, 115, 115, 115, 16, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	59, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 59, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 16, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 131, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 16, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 59, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 59, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 16, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 132, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	16, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 59, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	59, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	16, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 133, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 16, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 59, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 59, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 16, 115, 16, 16, 16, 16, 134, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 16, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 59, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 59, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 16, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 135, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 16, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 59, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 59, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 16, 115, 16, 16, 16, 
	136, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 16, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 59, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 59, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 16, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	137, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 16, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 59, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 59, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 16, 115, 138, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 16, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	59, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 59, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 16, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 139, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 16, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 59, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 59, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 16, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 140, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	16, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 59, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	59, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	16, 115, 16, 16, 16, 16, 141, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 16, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 59, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 59, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 16, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 142, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 16, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 59, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 59, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 16, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 143, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 16, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 59, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 59, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 16, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	144, 16, 16, 145, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 16, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 59, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 59, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 16, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 146, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 16, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 59, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 59, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 16, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 147, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 16, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	59, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 59, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 16, 115, 
	16, 16, 16, 16, 148, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 16, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 59, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 59, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 16, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 149, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	16, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 59, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	59, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	16, 115, 16, 16, 16, 16, 150, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	151, 16, 16, 16, 16, 16, 152, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 16, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 59, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 59, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 16, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 153, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 16, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 59, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 59, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 16, 115, 16, 154, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 16, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 59, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 59, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 16, 115, 16, 16, 16, 
	16, 155, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 16, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 59, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 59, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 16, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 156, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 16, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 59, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 59, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 16, 115, 16, 
	16, 16, 157, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 16, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	59, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 59, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 16, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 158, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 16, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 59, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 59, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 16, 
	115, 16, 16, 16, 16, 159, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	16, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 59, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	59, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	16, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 160, 16, 16, 115, 115, 115, 115, 
	115, 16, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 59, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 59, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 16, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 161, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 16, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 59, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 59, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 16, 115, 16, 16, 16, 16, 
	162, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 16, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 59, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 59, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 16, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	163, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 16, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 59, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 59, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 16, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 164, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 16, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 59, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 59, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 16, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	165, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 16, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	59, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 59, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 16, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 166, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 16, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 59, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 59, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 16, 
	115, 16, 16, 16, 16, 167, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 168, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	16, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 59, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	59, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	16, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 169, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 16, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 59, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 59, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 16, 115, 16, 16, 16, 16, 16, 
	170, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 16, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 59, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 59, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 16, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 171, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 16, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 59, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 59, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 16, 115, 16, 16, 16, 
	16, 172, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 16, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 59, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 59, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 16, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 173, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 16, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 59, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	115, 115, 115, 115, 115, 59, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 16, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	174, 16, 16, 16, 16, 16, 16, 175, 
	16, 115, 115, 115, 115, 115, 16, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	59, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 115, 115, 115, 115, 115, 59, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 16, 115, 
	176, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 177, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 16, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 59, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 115, 115, 115, 115, 115, 59, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 16, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 178, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	16, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 59, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 115, 115, 115, 115, 115, 
	59, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	16, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 179, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 16, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 59, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 115, 115, 115, 115, 
	115, 59, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 16, 115, 16, 16, 16, 16, 180, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 16, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 59, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 115, 115, 115, 
	115, 115, 59, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 16, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 181, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 16, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 59, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 115, 115, 
	115, 115, 115, 59, 115, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 16, 115, 16, 16, 16, 
	16, 182, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 115, 
	115, 115, 115, 115, 16, 184, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 185, 183, 187, 188, 
	188, 188, 188, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 187, 186, 191, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 191, 190, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 193, 193, 193, 193, 193, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	193, 194, 194, 194, 194, 194, 194, 194, 
	195, 196, 194, 194, 197, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 198, 194, 192, 
	194, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 194, 194, 194, 194, 194, 
	192, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 200, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 199, 199, 199, 199, 199, 
	200, 199, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 199, 199, 199, 199, 
	192, 199, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 199, 199, 199, 199, 
	199, 192, 0
]

class << self
	attr_accessor :_inko_lexer_trans_targs
	private :_inko_lexer_trans_targs, :_inko_lexer_trans_targs=
end
self._inko_lexer_trans_targs = [
	10, 1, 10, 2, 3, 10, 4, 10, 
	6, 22, 10, 21, 10, 8, 9, 10, 
	11, 10, 10, 12, 13, 14, 15, 16, 
	17, 18, 10, 10, 19, 20, 10, 23, 
	24, 26, 27, 31, 33, 34, 35, 37, 
	10, 10, 38, 39, 40, 44, 48, 51, 
	59, 63, 68, 70, 77, 80, 85, 91, 
	10, 98, 10, 10, 10, 10, 10, 10, 
	15, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 5, 7, 10, 
	10, 10, 10, 10, 10, 25, 10, 10, 
	10, 10, 28, 10, 29, 10, 30, 10, 
	10, 10, 10, 10, 10, 32, 10, 10, 
	10, 10, 10, 10, 10, 36, 10, 10, 
	10, 10, 10, 10, 11, 41, 42, 43, 
	11, 45, 46, 47, 11, 49, 50, 11, 
	11, 52, 54, 53, 11, 55, 56, 57, 
	58, 11, 60, 61, 62, 11, 64, 65, 
	11, 66, 67, 11, 69, 11, 71, 75, 
	76, 72, 73, 74, 11, 11, 11, 78, 
	79, 11, 81, 82, 83, 84, 11, 86, 
	88, 87, 11, 89, 90, 11, 92, 96, 
	93, 95, 94, 11, 11, 97, 11, 10, 
	10, 10, 99, 100, 99, 99, 99, 100, 
	102, 101, 0, 101, 101, 101, 101, 101, 
	101
]

class << self
	attr_accessor :_inko_lexer_trans_actions
	private :_inko_lexer_trans_actions, :_inko_lexer_trans_actions=
end
self._inko_lexer_trans_actions = [
	1, 0, 2, 0, 0, 3, 0, 4, 
	0, 5, 6, 7, 8, 0, 0, 9, 
	12, 13, 14, 0, 0, 15, 16, 0, 
	0, 15, 17, 18, 0, 0, 19, 0, 
	0, 15, 0, 0, 0, 0, 0, 0, 
	20, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	22, 0, 23, 24, 25, 26, 27, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 38, 39, 40, 41, 0, 0, 42, 
	43, 44, 45, 46, 47, 0, 48, 49, 
	50, 51, 0, 52, 0, 53, 0, 54, 
	55, 56, 57, 58, 59, 0, 60, 61, 
	62, 63, 64, 65, 66, 0, 67, 68, 
	69, 70, 71, 72, 73, 0, 0, 0, 
	74, 0, 0, 0, 75, 0, 0, 76, 
	77, 0, 0, 0, 78, 0, 0, 0, 
	0, 79, 0, 0, 0, 80, 0, 0, 
	81, 0, 0, 82, 0, 83, 0, 0, 
	0, 0, 0, 0, 84, 85, 86, 0, 
	0, 87, 0, 0, 0, 0, 88, 0, 
	0, 0, 89, 0, 0, 90, 0, 0, 
	0, 0, 0, 91, 92, 0, 93, 94, 
	95, 96, 97, 98, 99, 100, 101, 102, 
	0, 103, 0, 104, 105, 106, 107, 108, 
	109
]

class << self
	attr_accessor :_inko_lexer_to_state_actions
	private :_inko_lexer_to_state_actions, :_inko_lexer_to_state_actions=
end
self._inko_lexer_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 10, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 10, 0, 10, 0
]

class << self
	attr_accessor :_inko_lexer_from_state_actions
	private :_inko_lexer_from_state_actions, :_inko_lexer_from_state_actions=
end
self._inko_lexer_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 11, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 11, 0, 11, 0
]

class << self
	attr_accessor :_inko_lexer_eof_trans
	private :_inko_lexer_eof_trans, :_inko_lexer_eof_trans=
end
self._inko_lexer_eof_trans = [
	0, 1, 1, 1, 1, 8, 11, 8, 
	13, 13, 0, 11, 61, 62, 61, 11, 
	66, 68, 61, 71, 74, 77, 80, 81, 
	85, 87, 89, 61, 97, 99, 99, 100, 
	103, 105, 107, 61, 111, 113, 114, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 184, 0, 190, 0, 200
]

class << self
	attr_accessor :inko_lexer_start
end
self.inko_lexer_start = 10;
class << self
	attr_accessor :inko_lexer_first_final
end
self.inko_lexer_first_final = 10;
class << self
	attr_accessor :inko_lexer_error
end
self.inko_lexer_error = 0;

class << self
	attr_accessor :inko_lexer_en_line_start
end
self.inko_lexer_en_line_start = 99;
class << self
	attr_accessor :inko_lexer_en_compile_flag
end
self.inko_lexer_en_compile_flag = 101;
class << self
	attr_accessor :inko_lexer_en_main
end
self.inko_lexer_en_main = 10;


# line 6 "lib/inko/lexer.rl"

    # % fix highlight

    def initialize(data)
      @data  = data
      @ts    = 0
      @te    = 0
      @top   = 0
      @cs    = self.class.inko_lexer_start
      @act   = 0
      @eof   = @data.bytesize
      @p     = 0
      @pe    = @eof

      @emit_unindent_eol = false
      @emit_indent       = false
      @indent_stack      = []
      @curly_count       = 0

      @line   = 1
      @column = 1
    end

    def lex
      token = nil

      _inko_lexer_eof_trans          = self.class.send(:_inko_lexer_eof_trans)
      _inko_lexer_from_state_actions = self.class.send(:_inko_lexer_from_state_actions)
      _inko_lexer_index_offsets      = self.class.send(:_inko_lexer_index_offsets)
      _inko_lexer_indicies           = self.class.send(:_inko_lexer_indicies)
      _inko_lexer_key_spans          = self.class.send(:_inko_lexer_key_spans)
      _inko_lexer_to_state_actions   = self.class.send(:_inko_lexer_to_state_actions)
      _inko_lexer_trans_actions      = self.class.send(:_inko_lexer_trans_actions)
      _inko_lexer_trans_keys         = self.class.send(:_inko_lexer_trans_keys)
      _inko_lexer_trans_targs        = self.class.send(:_inko_lexer_trans_targs)

      
# line 1476 "lib/inko/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if    @p ==   @pe
		_goto_level = _test_eof
		next
	end
	if   @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _inko_lexer_from_state_actions[  @cs] 
	when 11 then
# line 1 "NONE"
		begin
  @ts =    @p
		end
# line 1504 "lib/inko/lexer.rb"
	end
	_keys =   @cs << 1
	_inds = _inko_lexer_index_offsets[  @cs]
	_slen = _inko_lexer_key_spans[  @cs]
	_wide = ( (@data.getbyte(@p) || 0))
	_trans = if (   _slen > 0 && 
			_inko_lexer_trans_keys[_keys] <= _wide && 
			_wide <= _inko_lexer_trans_keys[_keys + 1] 
		    ) then
			_inko_lexer_indicies[ _inds + _wide - _inko_lexer_trans_keys[_keys] ] 
		 else 
			_inko_lexer_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	  @cs = _inko_lexer_trans_targs[_trans]
	if _inko_lexer_trans_actions[_trans] != 0
	case _inko_lexer_trans_actions[_trans]
	when 15 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
	when 101 then
# line 231 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          indent = (@te - @ts) - 1
          last   = @indent_stack.last || 0

          # We only want to emit an indent when explicitly told. This allows
          # for code such as:
          #
          #     foo
          #       .bar
          #       .baz
          #
          # Which will then be treated as:
          #
          #     foo.bar.baz
          if @emit_indent
            @emit_indent = false

            if indent > last
              token = indent_token(:Indent)

              @indent_stack.push(indent)
            end
          elsif indent < last
            token = indent_token(:Unindent)

            @indent_stack.pop
          end

          @column += indent

             @p =    @p - 1;
            @cs = 10;

          if token
            	begin
		   @p += 1
		_goto_level = _out
		next
	end

          end
         end
		end
	when 97 then
# line 270 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          last = @indent_stack.last || 0

          if last > 0
            token = indent_token(:Unindent)

            @indent_stack.pop

               @p =    @p - 1;
            	begin
		   @p += 1
		_goto_level = _out
		next
	end

          else
               @p =    @p - 1;
              @cs = 10;
          end
         end
		end
	when 99 then
# line 287 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
             @p =    @p - 1;
            @cs = 10;
         end
		end
	when 100 then
# line 1 "NONE"
		begin
	case  @act
	when 1 then
	begin begin    @p = ((  @te))-1; end

          indent = (@te - @ts) - 1
          last   = @indent_stack.last || 0

          # We only want to emit an indent when explicitly told. This allows
          # for code such as:
          #
          #     foo
          #       .bar
          #       .baz
          #
          # Which will then be treated as:
          #
          #     foo.bar.baz
          if @emit_indent
            @emit_indent = false

            if indent > last
              token = indent_token(:Indent)

              @indent_stack.push(indent)
            end
          elsif indent < last
            token = indent_token(:Unindent)

            @indent_stack.pop
          end

          @column += indent

             @p =    @p - 1;
            @cs = 10;

          if token
            	begin
		   @p += 1
		_goto_level = _out
		next
	end

          end
        end
	when 3 then
	begin begin    @p = ((  @te))-1; end

             @p =    @p - 1;
            @cs = 10;
        end
end 
			end
	when 103 then
# line 294 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
		end
	when 109 then
# line 144 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
        token = token(:Identifier)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 104 then
# line 179 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
        token = token(:ParenOpen)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 105 then
# line 184 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
        token = token(:ParenClose)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 106 then
# line 174 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
        token = token(:Comma)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 107 then
# line 301 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:CompileFlagClose)
            @cs = 10;
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 108 then
# line 144 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
        token = token(:Identifier)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 28 then
# line 311 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:CompileFlagOpen)
            @cs = 101;
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 9 then
# line 423 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = offset_token(:Docstring, @ts + 2, @te - 2, 4)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 2 then
# line 438 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = string_token("\\\"", "\"", :DoubleString)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 3 then
# line 443 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = string_token("\\'", "'", :SingleString)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 68 then
# line 448 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = offset_token(:InstanceVariable, @ts + 1, @te, 1)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 56 then
# line 453 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          value = to_string(@ts + 1, @te)
          token = new_token(:Symbol, value, value.length)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 24 then
# line 144 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
        token = token(:Identifier)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 54 then
# line 466 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:ColonColon)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 45 then
# line 471 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:Arrow)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 17 then
# line 179 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
        token = token(:ParenOpen)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 18 then
# line 184 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
        token = token(:ParenClose)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 20 then
# line 479 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:BrackOpen)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 21 then
# line 484 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:BrackClose)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 39 then
# line 489 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:PlusAssign)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 44 then
# line 494 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:MinAssign)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 51 then
# line 499 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:DivAssign)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 31 then
# line 504 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:ModAssign)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 37 then
# line 509 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:MulAssign)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 71 then
# line 514 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:BitwiseExclOrAssign)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 95 then
# line 519 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:PipeAssign)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 34 then
# line 524 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:AmpersandAssign)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 27 then
# line 529 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:NotEqual)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 61 then
# line 534 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:Compare)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 63 then
# line 549 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:Equal)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 19 then
# line 174 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
        token = token(:Comma)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 40 then
# line 571 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:PlusPrefix)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 46 then
# line 576 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:MinusPrefix)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 33 then
# line 596 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:And)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 96 then
# line 601 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:Or)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 49 then
# line 621 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:RangeExcl)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 65 then
# line 631 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:GreaterEqual)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 36 then
# line 636 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:Power)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 59 then
# line 646 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:ShiftLeft)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 66 then
# line 651 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:ShiftRight)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 22 then
# line 666 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:CurlyOpen)

          @curly_count += 1

          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 23 then
# line 674 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          token = token(:CurlyClose)

          @curly_count -= 1

          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 52 then
# line 683 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          if @curly_count == 0
            @emit_unindent_eol = true

            token = indent_token(:Indent)

            @column += (@te - @ts) - 1
          else
            token = offset_token(:Colon, @ts, @ts + 1, 0)

            # The above return token already increments the column by 1,
            # so we have to manually add one _less_.
            @column += (@te - @ts) - 2
          end

             @p =    @p - 1;
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 53 then
# line 704 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
          if @curly_count > 0
            token = offset_token(:Colon, @ts, @ts + 1, 0)
          end

          @line  += 1;
          @column = 1;

          if token
            	begin
		   @p += 1
		_goto_level = _out
		next
	end

          elsif @curly_count == 0
            @emit_indent = true

              @cs = 99;
          end
         end
		end
	when 14 then
# line 114 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
        if @emit_unindent_eol
          @emit_unindent_eol = false

          token = indent_token(:Unindent)
        end

        @line  += 1;
        @column = 1;

          @cs = 99;

        if token
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 13 then
# line 131 "lib/inko/lexer.rl"
		begin
  @te =    @p+1
 begin 
        @column += 1
       end
		end
	when 41 then
# line 428 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Integer)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 42 then
# line 433 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Float)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 67 then
# line 448 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = offset_token(:InstanceVariable, @ts + 1, @te, 1)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 55 then
# line 453 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          value = to_string(@ts + 1, @te)
          token = new_token(:Symbol, value, value.length)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 72 then
# line 144 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
        token = token(:Identifier)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 69 then
# line 461 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Constant)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 26 then
# line 539 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Not)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 62 then
# line 544 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Assign)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 47 then
# line 556 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Dot)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 38 then
# line 561 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Plus)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 43 then
# line 566 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Minus)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 50 then
# line 581 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Div)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 30 then
# line 586 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Modulo)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 35 then
# line 591 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Star)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 94 then
# line 606 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Pipe)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 32 then
# line 611 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Ampersand)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 48 then
# line 616 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:RangeInc)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 60 then
# line 626 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:LowerEqual)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 70 then
# line 641 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:BitwiseExclOr)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 58 then
# line 656 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Lower)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 64 then
# line 661 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          token = token(:Greater)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 57 then
# line 683 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
          if @curly_count == 0
            @emit_unindent_eol = true

            token = indent_token(:Indent)

            @column += (@te - @ts) - 1
          else
            token = offset_token(:Colon, @ts, @ts + 1, 0)

            # The above return token already increments the column by 1,
            # so we have to manually add one _less_.
            @column += (@te - @ts) - 2
          end

             @p =    @p - 1;
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 25 then
# line 131 "lib/inko/lexer.rl"
		begin
  @te =    @p
   @p =    @p - 1; begin 
        @column += 1
       end
		end
	when 4 then
# line 428 "lib/inko/lexer.rl"
		begin
 begin    @p = ((  @te))-1; end
 begin 
          token = token(:Integer)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 8 then
# line 581 "lib/inko/lexer.rl"
		begin
 begin    @p = ((  @te))-1; end
 begin 
          token = token(:Div)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

         end
		end
	when 1 then
# line 131 "lib/inko/lexer.rl"
		begin
 begin    @p = ((  @te))-1; end
 begin 
        @column += 1
       end
		end
	when 6 then
# line 1 "NONE"
		begin
	case  @act
	when 12 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Trait)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 13 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Class)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 14 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Extends)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 15 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Module)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 16 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Def)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 17 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Enum)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 18 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Member)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 19 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Implement)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 20 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Import)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 21 then
	begin begin    @p = ((  @te))-1; end

          token = token(:As)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 22 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Let)

          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 23 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Mutable)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 24 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Return)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 25 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Super)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 26 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Break)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 27 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Next)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 28 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Dynamic)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 29 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Type)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 30 then
	begin begin    @p = ((  @te))-1; end

          token = token(:True)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 31 then
	begin begin    @p = ((  @te))-1; end

          token = token(:False)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 32 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Self)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 34 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Integer)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 35 then
	begin begin    @p = ((  @te))-1; end

          token = token(:Float)
          	begin
		   @p += 1
		_goto_level = _out
		next
	end

        end
	when 40 then
	begin begin    @p = ((  @te))-1; end

        token = token(:Identifier)
        	begin
		   @p += 1
		_goto_level = _out
		next
	end

      end
	when 89 then
	begin begin    @p = ((  @te))-1; end

        @column += 1
      end
	else
	begin begin    @p = ((  @te))-1; end
end
end 
			end
	when 102 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 231 "lib/inko/lexer.rl"
		begin
 @act = 1;		end
	when 98 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 287 "lib/inko/lexer.rl"
		begin
 @act = 3;		end
	when 29 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 309 "lib/inko/lexer.rl"
		begin
 @act = 10;		end
	when 91 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 317 "lib/inko/lexer.rl"
		begin
 @act = 12;		end
	when 75 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 322 "lib/inko/lexer.rl"
		begin
 @act = 13;		end
	when 79 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 327 "lib/inko/lexer.rl"
		begin
 @act = 14;		end
	when 85 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 332 "lib/inko/lexer.rl"
		begin
 @act = 15;		end
	when 76 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 337 "lib/inko/lexer.rl"
		begin
 @act = 16;		end
	when 78 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 342 "lib/inko/lexer.rl"
		begin
 @act = 17;		end
	when 84 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 347 "lib/inko/lexer.rl"
		begin
 @act = 18;		end
	when 81 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 352 "lib/inko/lexer.rl"
		begin
 @act = 19;		end
	when 82 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 357 "lib/inko/lexer.rl"
		begin
 @act = 20;		end
	when 73 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 362 "lib/inko/lexer.rl"
		begin
 @act = 21;		end
	when 83 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 367 "lib/inko/lexer.rl"
		begin
 @act = 22;		end
	when 86 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 373 "lib/inko/lexer.rl"
		begin
 @act = 23;		end
	when 88 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 378 "lib/inko/lexer.rl"
		begin
 @act = 24;		end
	when 90 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 383 "lib/inko/lexer.rl"
		begin
 @act = 25;		end
	when 74 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 388 "lib/inko/lexer.rl"
		begin
 @act = 26;		end
	when 87 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 393 "lib/inko/lexer.rl"
		begin
 @act = 27;		end
	when 77 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 398 "lib/inko/lexer.rl"
		begin
 @act = 28;		end
	when 93 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 403 "lib/inko/lexer.rl"
		begin
 @act = 29;		end
	when 92 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 408 "lib/inko/lexer.rl"
		begin
 @act = 30;		end
	when 80 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 413 "lib/inko/lexer.rl"
		begin
 @act = 31;		end
	when 89 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 418 "lib/inko/lexer.rl"
		begin
 @act = 32;		end
	when 7 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 428 "lib/inko/lexer.rl"
		begin
 @act = 34;		end
	when 5 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 433 "lib/inko/lexer.rl"
		begin
 @act = 35;		end
	when 12 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 144 "lib/inko/lexer.rl"
		begin
 @act = 40;		end
	when 16 then
# line 1 "NONE"
		begin
  @te =    @p+1
		end
# line 131 "lib/inko/lexer.rl"
		begin
 @act = 89;		end
# line 3225 "lib/inko/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _inko_lexer_to_state_actions[  @cs] 
	when 10 then
# line 1 "NONE"
		begin
  @ts = nil;		end
# line 3235 "lib/inko/lexer.rb"
	end

	if   @cs == 0
		_goto_level = _out
		next
	end
	   @p += 1
	if    @p !=   @pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if    @p ==  @eof
	if _inko_lexer_eof_trans[  @cs] > 0
		_trans = _inko_lexer_eof_trans[  @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 43 "lib/inko/lexer.rl"

      # % fix highlight

      return token if token

      if @emit_unindent_eol
        @emit_unindent_eol = false

        return indent_token(:Unindent)
      end

      while @indent_stack.length > 0
        @indent_stack.pop

        return indent_token(:Unindent)
      end

      nil
    end

    private

    def to_string(start, stop)
      return @data.byteslice(start, stop - start)
    end

    def new_token(type, value, length)
      token = Token.new(type, value, @line, @column)

      @column += length

      token
    end

    def token(type)
      value  = to_string(@ts, @te)
      length = value.length

      new_token(type, value, length)
    end

    def offset_token(type, start, stop, offset)
      value  = to_string(start, stop)
      length = value.length + offset

      new_token(type, value, length)
    end

    def string_token(find, replace, type)
      slice  = to_string(@ts + 1, @te - 1)
      length = slice.length + 2
      string = slice.gsub(find, replace)

      new_token(type, string, length)
    end

    def indent_token(type)
      Token.new(type, '', @line, @column)
    end

    
# line 724 "lib/inko/lexer.rl"

  end
end
