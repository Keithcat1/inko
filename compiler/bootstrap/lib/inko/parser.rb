# This file is automatically generated by ruby-ll. Manually changing this file
# is not recommended as any changes will be lost the next time this parser is
# re-generated.
require 'll/setup'

module Inko
class Parser < LL::Driver
  CONFIG = LL::DriverConfig.new

  CONFIG.terminals = [
    :$EOF, # 0
    :Arrow, # 1
    :BrackClose, # 2
    :BrackOpen, # 3
    :Colon, # 4
    :ColonColon, # 5
    :Comma, # 6
    :Constant, # 7
    :CurlyClose, # 8
    :CurlyOpen, # 9
    :Docstring, # 10
    :Dot, # 11
    :Assign, # 12
    :Float, # 13
    :Greater, # 14
    :Identifier, # 15
    :InstanceVariable, # 16
    :Integer, # 17
    :Lower, # 18
    :ParenClose, # 19
    :ParenOpen, # 20
    :Pipe, # 21
    :Equal, # 22
    :Trait, # 23
    :Class, # 24
    :Def, # 25
    :Enum, # 26
    :Implement, # 27
    :Import, # 28
    :As, # 29
    :Let, # 30
    :Mutable, # 31
    :Return, # 32
    :Super, # 33
    :Break, # 34
    :Next, # 35
    :Dynamic, # 36
    :Indent, # 37
    :Unindent, # 38
    :True, # 39
    :False, # 40
    :Member, # 41
    :Plus, # 42
    :Minus, # 43
    :Modulo, # 44
    :Div, # 45
    :Star, # 46
    :And, # 47
    :Or, # 48
    :Ampersand, # 49
    :LowerEqual, # 50
    :GreaterEqual, # 51
    :Power, # 52
    :PlusAssign, # 53
    :MinAssign, # 54
    :DivAssign, # 55
    :ModAssign, # 56
    :MulAssign, # 57
    :PipeAssign, # 58
    :AmpersandAssign, # 59
    :Compare, # 60
    :Not, # 61
    :NotEqual, # 62
    :RangeInc, # 63
    :RangeExcl, # 64
    :BitwiseExclOr, # 65
    :BitwiseExclOrAssign, # 66
    :ShiftLeft, # 67
    :ShiftRight, # 68
    :Type, # 69
    :PlusPrefix, # 70
    :MinPrefix, # 71
    :Module, # 72
    :Self, # 73
    :SingleString, # 74
    :DoubleString, # 75
    :Extends, # 76
    :CompileFlagOpen, # 77
    :CompileFlagClose, # 78
    :Symbol, # 79
  ].freeze

  CONFIG.rules = [
    [3, 0, 4, 119, 6, 0], # 0
    [3, 1, 0, 2], # 1
    [3, 2, 4, 120, 6, 0, 0, 4], # 2
    [3, 3, 0, 4, 1, 48], # 3
    [3, 4, 4, 121, 6, 0, 0, 6], # 4
    [3, 5, 0, 6, 1, 47], # 5
    [3, 6, 4, 122, 6, 0, 0, 9], # 6
    [3, 7, 0, 9, 0, 8], # 7
    [3, 8, 1, 60], # 8
    [3, 9, 1, 22], # 9
    [3, 10, 1, 62], # 10
    [3, 11, 4, 123, 6, 0, 0, 12], # 11
    [3, 12, 0, 12, 0, 11], # 12
    [3, 13, 1, 50], # 13
    [3, 14, 1, 18], # 14
    [3, 15, 1, 14], # 15
    [3, 16, 1, 51], # 16
    [3, 17, 4, 124, 6, 0, 0, 15], # 17
    [3, 18, 0, 15, 0, 14], # 18
    [3, 19, 1, 21], # 19
    [3, 20, 1, 65], # 20
    [3, 21, 4, 125, 6, 0, 0, 17], # 21
    [3, 22, 0, 17, 1, 49], # 22
    [3, 23, 4, 126, 6, 0, 0, 20], # 23
    [3, 24, 0, 20, 0, 19], # 24
    [3, 25, 1, 67], # 25
    [3, 26, 1, 68], # 26
    [3, 27, 4, 127, 6, 0, 0, 23], # 27
    [3, 28, 0, 23, 0, 22], # 28
    [3, 29, 1, 42], # 29
    [3, 30, 1, 43], # 30
    [3, 31, 4, 128, 6, 0, 0, 26], # 31
    [3, 32, 0, 26, 0, 25], # 32
    [3, 33, 1, 45], # 33
    [3, 34, 1, 44], # 34
    [3, 35, 1, 46], # 35
    [3, 36, 4, 129, 6, 0, 0, 28], # 36
    [3, 37, 0, 28, 1, 52], # 37
    [3, 38, 8, 130, 0, 30], # 38
    [3, 39, 0, 1, 1, 63], # 39
    [3, 40, 8, 131, 1, 64], # 40
    [3, 41, 8, 132, 0, 33], # 41
    [3, 42, 8, 133, 0, 44], # 42
    [3, 43, 0, 1, 1, 12], # 43
    [3, 44, 0, 35, 0, 34], # 44
    [3, 45, 0, 35], # 45
    [3, 46, 1, 61], # 46
    [3, 47, 1, 42], # 47
    [3, 48, 1, 43], # 48
    [3, 49, 0, 36, 0, 39], # 49
    [3, 50, 4, 134, 6, 0, 0, 37], # 50
    [3, 51, 2, 0], # 51
    [3, 52, 8, 135, 0, 38, 1, 11], # 52
    [3, 53, 1, 15], # 53
    [3, 54, 1, 24], # 54
    [3, 55, 1, 23], # 55
    [3, 56, 1, 26], # 56
    [3, 57, 1, 72], # 57
    [3, 58, 1, 35], # 58
    [3, 59, 0, 40], # 59
    [3, 60, 0, 41], # 60
    [3, 61, 0, 42], # 61
    [3, 62, 0, 44], # 62
    [3, 63, 0, 47], # 63
    [3, 64, 0, 59], # 64
    [3, 65, 0, 64], # 65
    [3, 66, 1, 19, 0, 0, 1, 20], # 66
    [3, 67, 0, 66], # 67
    [3, 68, 0, 52], # 68
    [3, 69, 0, 70], # 69
    [3, 70, 0, 71], # 70
    [3, 71, 0, 72], # 71
    [3, 72, 0, 85], # 72
    [3, 73, 0, 86], # 73
    [3, 74, 0, 88], # 74
    [3, 75, 0, 89], # 75
    [3, 76, 0, 98], # 76
    [3, 77, 0, 107], # 77
    [3, 78, 0, 109], # 78
    [3, 79, 0, 115], # 79
    [3, 80, 0, 116], # 80
    [3, 81, 0, 43], # 81
    [3, 82, 1, 17], # 82
    [3, 83, 1, 13], # 83
    [3, 84, 1, 74], # 84
    [3, 85, 1, 75], # 85
    [3, 86, 1, 79], # 86
    [3, 87, 1, 2, 8, 136, 1, 3], # 87
    [3, 88, 4, 137, 6, 0, 0, 1], # 88
    [3, 89, 0, 1, 1, 6], # 89
    [3, 90, 1, 8, 8, 138, 1, 9], # 90
    [3, 91, 4, 139, 6, 0, 0, 50], # 91
    [3, 92, 0, 50, 1, 6], # 92
    [3, 93, 0, 1, 1, 4, 0, 1], # 93
    [3, 94, 1, 15], # 94
    [3, 95, 1, 7], # 95
    [3, 96, 1, 73], # 96
    [3, 97, 1, 16], # 97
    [3, 98, 1, 7], # 98
    [3, 99, 1, 15], # 99
    [3, 100, 1, 36], # 100
    [3, 101, 4, 140, 6, 0, 0, 51], # 101
    [3, 102, 4, 141, 6, 0, 0, 51, 1, 5], # 102
    [3, 103, 0, 58, 1, 5], # 103
    [3, 104, 0, 51], # 104
    [3, 105, 1, 24], # 105
    [3, 106, 1, 23], # 106
    [3, 107, 1, 26], # 107
    [3, 108, 1, 72], # 108
    [3, 109, 8, 142, 0, 56], # 109
    [3, 110, 0, 61], # 110
    [3, 111, 0, 69], # 111
    [3, 112, 8, 144, 1, 19, 8, 143, 1, 20], # 112
    [3, 113, 0, 65], # 113
    [3, 114, 4, 145, 6, 0, 0, 1], # 114
    [3, 115, 0, 1, 1, 6], # 115
    [3, 116, 1, 38, 0, 0, 1, 37, 8, 146, 0, 78, 1, 1], # 116
    [3, 117, 0, 64], # 117
    [3, 118, 1, 38, 0, 0, 1, 37], # 118
    [3, 119, 0, 67, 8, 147, 1, 30], # 119
    [3, 120, 0, 83, 8, 148, 0, 56], # 120
    [3, 121, 0, 83, 0, 52], # 121
    [3, 122, 0, 83, 0, 68, 0, 55], # 122
    [3, 123, 0, 51], # 123
    [3, 124, 0, 52], # 124
    [3, 125, 0, 1, 1, 12], # 125
    [3, 126, 0, 1, 1, 53], # 126
    [3, 127, 0, 1, 1, 54], # 127
    [3, 128, 0, 1, 1, 55], # 128
    [3, 129, 0, 1, 1, 56], # 129
    [3, 130, 0, 1, 1, 57], # 130
    [3, 131, 0, 1, 1, 66], # 131
    [3, 132, 0, 1, 1, 58], # 132
    [3, 133, 0, 1, 1, 59], # 133
    [3, 134, 8, 149, 1, 32], # 134
    [3, 135, 8, 150, 1, 33], # 135
    [3, 136, 1, 34], # 136
    [3, 137, 1, 35], # 137
    [3, 138, 1, 39], # 138
    [3, 139, 1, 40], # 139
    [3, 140, 8, 153, 8, 152, 0, 78, 8, 151, 0, 73, 1, 25], # 140
    [3, 141, 8, 154, 0, 56], # 141
    [3, 142, 0, 76], # 142
    [3, 143, 0, 75, 1, 11], # 143
    [3, 144, 0, 56], # 144
    [3, 145, 0, 76], # 145
    [3, 146, 1, 46], # 146
    [3, 147, 1, 42], # 147
    [3, 148, 1, 43], # 148
    [3, 149, 1, 45], # 149
    [3, 150, 1, 44], # 150
    [3, 151, 1, 49], # 151
    [3, 152, 1, 18], # 152
    [3, 153, 1, 14], # 153
    [3, 154, 1, 50], # 154
    [3, 155, 1, 51], # 155
    [3, 156, 1, 22], # 156
    [3, 157, 1, 62], # 157
    [3, 158, 1, 52], # 158
    [3, 159, 1, 60], # 159
    [3, 160, 1, 65], # 160
    [3, 161, 1, 67], # 161
    [3, 162, 1, 68], # 162
    [3, 163, 1, 21], # 163
    [3, 164, 1, 70], # 164
    [3, 165, 1, 71], # 165
    [3, 166, 1, 24], # 166
    [3, 167, 1, 23], # 167
    [3, 168, 1, 26], # 168
    [3, 169, 1, 72], # 169
    [3, 170, 1, 61], # 170
    [3, 171, 8, 155, 1, 2, 1, 3], # 171
    [3, 172, 1, 35], # 172
    [3, 173, 1, 38, 0, 0, 1, 37], # 173
    [3, 174, 1, 19, 8, 156, 1, 20], # 174
    [3, 175, 2, 0], # 175
    [3, 176, 4, 157, 6, 0, 0, 81], # 176
    [3, 177, 0, 81, 1, 6], # 177
    [3, 178, 8, 159, 8, 158, 0, 108], # 178
    [3, 179, 8, 160, 1, 15], # 179
    [3, 180, 0, 83], # 180
    [3, 181, 0, 1, 1, 12], # 181
    [3, 182, 0, 108, 1, 1], # 182
    [3, 183, 1, 10], # 183
    [3, 184, 1, 38, 0, 0, 1, 37, 8, 161, 0, 108, 1, 24], # 184
    [3, 185, 0, 108, 1, 76], # 185
    [3, 186, 1, 38, 0, 0, 1, 37, 0, 108, 1, 23], # 186
    [3, 187, 1, 38, 0, 90, 1, 37, 0, 108, 1, 26], # 187
    [3, 188, 4, 162, 6, 0], # 188
    [3, 189, 0, 1], # 189
    [3, 190, 0, 92], # 190
    [3, 191, 8, 163, 1, 7, 1, 41], # 191
    [3, 192, 0, 95], # 192
    [3, 193, 0, 94], # 193
    [3, 194, 0, 40, 1, 12], # 194
    [3, 195, 1, 19, 0, 96, 1, 20], # 195
    [3, 196, 4, 164, 6, 0, 0, 53], # 196
    [3, 197, 0, 53, 1, 6], # 197
    [3, 198, 8, 165, 0, 56, 1, 28], # 198
    [3, 199, 1, 19, 0, 100, 1, 20], # 199
    [3, 200, 4, 166, 6, 0, 0, 102], # 200
    [3, 201, 0, 102, 1, 6], # 201
    [3, 202, 0, 103], # 202
    [3, 203, 0, 105], # 203
    [3, 204, 8, 167, 0, 53], # 204
    [3, 205, 0, 53, 1, 29], # 205
    [3, 206, 8, 168, 0, 54], # 206
    [3, 207, 0, 54, 1, 29], # 207
    [3, 208, 8, 169, 0, 108, 1, 27], # 208
    [3, 209, 8, 171, 8, 170, 0, 56], # 209
    [3, 210, 0, 108, 1, 12, 0, 108, 1, 69], # 210
    [3, 211, 1, 14, 0, 111, 1, 18], # 211
    [3, 212, 4, 172, 6, 0, 0, 113], # 212
    [3, 213, 0, 113, 1, 6], # 213
    [3, 214, 8, 173, 0, 108], # 214
    [3, 215, 0, 108, 1, 12], # 215
    [3, 216, 1, 38, 0, 0, 1, 37, 0, 54, 1, 72], # 216
    [3, 217, 1, 78, 8, 174, 1, 15, 1, 77], # 217
    [3, 218, 1, 19, 4, 175, 6, 0, 1, 15, 1, 20], # 218
    [3, 219, 1, 15, 1, 6], # 219
    [3, 220, 0, 1], # 220
    [3, 221, 0, 3], # 221
    [3, 222, 0, 5], # 222
    [3, 223, 0, 7], # 223
    [3, 224, 0, 10], # 224
    [3, 225, 0, 13], # 225
    [3, 226, 0, 16], # 226
    [3, 227, 0, 18], # 227
    [3, 228, 0, 21], # 228
    [3, 229, 0, 24], # 229
    [3, 230, 0, 27], # 230
    [3, 231, 0, 29], # 231
    [3, 232, 0, 1], # 232
    [3, 233, 0, 31], # 233
    [3, 234, 0, 32], # 234
    [3, 235, 0, 37], # 235
    [3, 236, 0, 61], # 236
    [3, 237, 0, 45], # 237
    [3, 238, 0, 46], # 238
    [3, 239, 0, 48], # 239
    [3, 240, 0, 49], # 240
    [3, 241, 0, 57], # 241
    [3, 242, 0, 57], # 242
    [3, 243, 0, 60], # 243
    [3, 244, 0, 62], # 244
    [3, 245, 0, 65], # 245
    [3, 246, 0, 63], # 246
    [3, 247, 0, 84], # 247
    [3, 248, 1, 31], # 248
    [3, 249, 0, 68], # 249
    [3, 250, 0, 1], # 250
    [3, 251, 0, 61], # 251
    [3, 252, 0, 110], # 252
    [3, 253, 0, 84], # 253
    [3, 254, 0, 77], # 254
    [3, 255, 0, 74], # 255
    [3, 256, 1, 12], # 256
    [3, 257, 0, 79], # 257
    [3, 258, 0, 80], # 258
    [3, 259, 0, 82], # 259
    [3, 260, 1, 64], # 260
    [3, 261, 0, 83], # 261
    [3, 262, 0, 87], # 262
    [3, 263, 0, 91], # 263
    [3, 264, 0, 93], # 264
    [3, 265, 0, 97], # 265
    [3, 266, 0, 99], # 266
    [3, 267, 0, 101], # 267
    [3, 268, 0, 104], # 268
    [3, 269, 0, 106], # 269
    [3, 270, 0, 99], # 270
    [3, 271, 0, 110], # 271
    [3, 272, 0, 84], # 272
    [3, 273, 0, 112], # 273
    [3, 274, 0, 114], # 274
    [3, 275, 0, 117], # 275
    [3, 276, 0, 118], # 276
  ].freeze

  CONFIG.table = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # 0
    [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1], # 1
    [-1, 2, -1, 2, -1, 2, -1, 2, -1, 2, 2, -1, -1, 2, -1, 2, 2, 2, -1, -1, 2, -1, -1, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 2, 2, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, 2, 2, 2, -1, 2, -1, 2], # 2
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 3
    [-1, 4, -1, 4, -1, 4, -1, 4, -1, 4, 4, -1, -1, 4, -1, 4, 4, 4, -1, -1, 4, -1, -1, 4, 4, 4, 4, 4, 4, -1, 4, -1, 4, 4, 4, 4, -1, -1, -1, 4, 4, -1, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 4, 4, 4, 4, -1, 4, -1, 4], # 4
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 5
    [-1, 6, -1, 6, -1, 6, -1, 6, -1, 6, 6, -1, -1, 6, -1, 6, 6, 6, -1, -1, 6, -1, -1, 6, 6, 6, 6, 6, 6, -1, 6, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, -1, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 6, 6, 6, 6, -1, 6, -1, 6], # 6
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 7
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 8
    [-1, 11, -1, 11, -1, 11, -1, 11, -1, 11, 11, -1, -1, 11, -1, 11, 11, 11, -1, -1, 11, -1, -1, 11, 11, 11, 11, 11, 11, -1, 11, -1, 11, 11, 11, 11, -1, -1, -1, 11, 11, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 11, 11, 11, 11, -1, 11, -1, 11], # 9
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 10
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 11
    [-1, 17, -1, 17, -1, 17, -1, 17, -1, 17, 17, -1, -1, 17, -1, 17, 17, 17, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, -1, 17, -1, 17, 17, 17, 17, -1, -1, -1, 17, 17, -1, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, -1, 17, -1, 17], # 12
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 13
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 14
    [-1, 21, -1, 21, -1, 21, -1, 21, -1, 21, 21, -1, -1, 21, -1, 21, 21, 21, -1, -1, 21, -1, -1, 21, 21, 21, 21, 21, 21, -1, 21, -1, 21, 21, 21, 21, -1, -1, -1, 21, 21, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, 21, 21, 21, 21, -1, 21, -1, 21], # 15
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 16
    [-1, 23, -1, 23, -1, 23, -1, 23, -1, 23, 23, -1, -1, 23, -1, 23, 23, 23, -1, -1, 23, -1, -1, 23, 23, 23, 23, 23, 23, -1, 23, -1, 23, 23, 23, 23, -1, -1, -1, 23, 23, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 23, 23, 23, 23, -1, 23, -1, 23], # 17
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 18
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 19
    [-1, 27, -1, 27, -1, 27, -1, 27, -1, 27, 27, -1, -1, 27, -1, 27, 27, 27, -1, -1, 27, -1, -1, 27, 27, 27, 27, 27, 27, -1, 27, -1, 27, 27, 27, 27, -1, -1, -1, 27, 27, -1, 27, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, 27, 27, 27, 27, -1, 27, -1, 27], # 20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 21
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 22
    [-1, 31, -1, 31, -1, 31, -1, 31, -1, 31, 31, -1, -1, 31, -1, 31, 31, 31, -1, -1, 31, -1, -1, 31, 31, 31, 31, 31, 31, -1, 31, -1, 31, 31, 31, 31, -1, -1, -1, 31, 31, -1, 31, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, 31, 31, 31, 31, -1, 31, -1, 31], # 23
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 32, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 24
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 33, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 25
    [-1, 36, -1, 36, -1, 36, -1, 36, -1, 36, 36, -1, -1, 36, -1, 36, 36, 36, -1, -1, 36, -1, -1, 36, 36, 36, 36, 36, 36, -1, 36, -1, 36, 36, 36, 36, -1, -1, -1, 36, 36, -1, 36, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, 36, 36, 36, 36, -1, 36, -1, 36], # 26
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 27
    [-1, 38, -1, 38, -1, 38, -1, 38, -1, 38, 38, -1, -1, 38, -1, 38, 38, 38, -1, -1, 38, -1, -1, 38, 38, 38, 38, 38, 38, -1, 38, -1, 38, 38, 38, 38, -1, -1, -1, 38, 38, -1, 38, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, 38, 38, 38, 38, -1, 38, -1, 38], # 28
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 29
    [-1, 41, -1, 41, -1, 41, -1, 41, -1, 41, 41, -1, -1, 41, -1, 41, 41, 41, -1, -1, 41, -1, -1, 41, 41, 41, 41, 41, 41, -1, 41, -1, 41, 41, 41, 41, -1, -1, -1, 41, 41, -1, 41, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, 41, 41, 41, 41, -1, 41, -1, 41], # 30
    [-1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 31
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 32
    [-1, 45, -1, 45, -1, 45, -1, 45, -1, 45, 45, -1, -1, 45, -1, 45, 45, 45, -1, -1, 45, -1, -1, 45, 45, 45, 45, 45, 45, -1, 45, -1, 45, 45, 45, 45, -1, -1, -1, 45, 45, -1, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 45, 45, 45, 45, -1, 45, -1, 45], # 33
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 34
    [-1, 49, -1, 49, -1, 49, -1, 49, -1, 49, 49, -1, -1, 49, -1, 49, 49, 49, -1, -1, 49, -1, -1, 49, 49, 49, 49, 49, 49, -1, 49, -1, 49, 49, 49, 49, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, 49, 49, 49, 49, -1, 49, -1, 49], # 35
    [51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51], # 36
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 37
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1], # 38
    [-1, 65, -1, 62, -1, 64, -1, 64, -1, 63, 72, -1, -1, 60, -1, 64, 68, 59, -1, -1, 66, -1, -1, 74, 73, 71, 75, 77, 76, -1, 67, -1, 69, 69, 69, 69, -1, -1, -1, 70, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, 79, 64, 61, 61, -1, 80, -1, 81], # 39
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 40
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 41
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 85, -1, -1, -1, -1], # 42
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86], # 43
    [-1, -1, -1, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 44
    [-1, 88, -1, 88, -1, 88, -1, 88, -1, 88, 88, -1, -1, 88, -1, 88, 88, 88, -1, -1, 88, -1, -1, 88, 88, 88, 88, 88, 88, -1, 88, -1, 88, 88, 88, 88, -1, -1, -1, 88, 88, -1, 88, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, 88, -1, -1, 88, 88, 88, 88, -1, 88, -1, 88], # 45
    [-1, -1, -1, -1, -1, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 46
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 47
    [-1, 91, -1, 91, -1, 91, -1, 91, -1, 91, 91, -1, -1, 91, -1, 91, 91, 91, -1, -1, 91, -1, -1, 91, 91, 91, 91, 91, 91, -1, 91, -1, 91, 91, 91, 91, -1, -1, -1, 91, 91, -1, 91, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, 91, -1, -1, 91, 91, 91, 91, -1, 91, -1, 91], # 48
    [-1, -1, -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 49
    [-1, 93, -1, 93, -1, 93, -1, 93, -1, 93, 93, -1, -1, 93, -1, 93, 93, 93, -1, -1, 93, -1, -1, 93, 93, 93, 93, 93, 93, -1, 93, -1, 93, 93, 93, 93, -1, -1, -1, 93, 93, -1, 93, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, 93, 93, 93, 93, -1, 93, -1, 93], # 50
    [-1, -1, -1, -1, -1, -1, -1, 95, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, -1, -1, -1, -1, -1, -1], # 51
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 52
    [-1, -1, -1, -1, -1, -1, -1, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 53
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 54
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 55
    [-1, -1, -1, -1, -1, 102, -1, 101, -1, -1, -1, -1, -1, -1, -1, 101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 101, -1, -1, -1, -1, -1, -1], # 56
    [-1, -1, -1, -1, -1, 103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 57
    [-1, -1, -1, -1, -1, -1, -1, 104, -1, -1, -1, -1, -1, -1, -1, 104, -1, -1, -1, -1, -1, -1, -1, 106, 105, -1, 107, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 104, -1, -1, -1, -1, -1, -1], # 58
    [-1, -1, -1, -1, -1, 109, -1, 109, -1, -1, -1, -1, -1, -1, -1, 109, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 109, -1, -1, -1, -1, -1, -1], # 59
    [-1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111, 111, 111, 111, 111, 111, 111, -1, -1, -1, -1, -1, -1, 111, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 60
    [-1, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 112, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 61
    [-1, 114, -1, 114, -1, 114, -1, 114, -1, 114, 114, -1, -1, 114, -1, 114, 114, 114, -1, -1, 114, -1, -1, 114, 114, 114, 114, 114, 114, -1, 114, -1, 114, 114, 114, 114, -1, -1, -1, 114, 114, -1, 114, 114, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 114, -1, -1, -1, -1, -1, -1, -1, 114, -1, -1, 114, 114, 114, 114, -1, 114, -1, 114], # 62
    [-1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 63
    [-1, 116, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 64
    [-1, 117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 118, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 65
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 119, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 66
    [-1, -1, -1, -1, -1, 120, -1, 120, -1, -1, -1, -1, -1, -1, -1, 120, 121, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 120, -1, -1, -1, -1, -1, -1], # 67
    [-1, -1, -1, -1, -1, -1, -1, 123, -1, -1, -1, -1, -1, -1, -1, 123, 124, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, -1, -1, -1, -1, -1], # 68
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 125, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 126, 127, 128, 129, 130, 132, 133, -1, -1, -1, -1, -1, -1, 131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 69
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 134, 135, 136, 137, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 70
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, 139, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 71
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 72
    [-1, -1, -1, 142, -1, 141, -1, 141, -1, -1, -1, -1, -1, -1, 142, 141, -1, -1, 142, -1, -1, 142, 142, 142, 142, -1, 142, -1, -1, -1, -1, -1, -1, -1, -1, 142, -1, -1, -1, -1, -1, -1, 142, 142, 142, 142, 142, -1, -1, 142, 142, 142, 142, -1, -1, -1, -1, -1, -1, -1, 142, 142, 142, -1, -1, 142, -1, 142, 142, -1, 142, 142, 142, 141, -1, -1, -1, -1, -1, -1], # 73
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 143, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 74
    [-1, -1, -1, 145, -1, 144, -1, 144, -1, -1, -1, -1, -1, -1, 145, 144, -1, -1, 145, -1, -1, 145, 145, 145, 145, -1, 145, -1, -1, -1, -1, -1, -1, -1, -1, 145, -1, -1, -1, -1, -1, -1, 145, 145, 145, 145, 145, -1, -1, 145, 145, 145, 145, -1, -1, -1, -1, -1, -1, -1, 145, 145, 145, -1, -1, 145, -1, 145, 145, -1, 145, 145, 145, 144, -1, -1, -1, -1, -1, -1], # 75
    [-1, -1, -1, 171, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 153, -1, -1, -1, 152, -1, -1, 163, 156, 167, 166, -1, 168, -1, -1, -1, -1, -1, -1, -1, -1, 172, -1, -1, -1, -1, -1, -1, 147, 148, 150, 149, 146, -1, -1, 151, 154, 155, 158, -1, -1, -1, -1, -1, -1, -1, 159, 170, 157, -1, -1, 160, -1, 161, 162, -1, 164, 165, 169, -1, -1, -1, -1, -1, -1, -1], # 76
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 173, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 77
    [175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 174, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175], # 78
    [-1, -1, -1, -1, -1, 176, -1, 176, -1, -1, -1, -1, -1, -1, -1, 176, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 176, -1, -1, -1, -1, -1, -1], # 79
    [-1, -1, -1, -1, -1, -1, 177, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 80
    [-1, -1, -1, -1, -1, 178, -1, 178, -1, -1, -1, -1, -1, -1, -1, 178, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 178, -1, -1, -1, -1, -1, -1], # 81
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 180, -1, -1, 179, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 82
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 181, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 83
    [-1, 182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 84
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 183, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 85
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 86
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 185, -1, -1, -1], # 87
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 186, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 88
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 187, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 89
    [188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188], # 90
    [-1, 189, -1, 189, -1, 189, -1, 189, -1, 189, 189, -1, -1, 189, -1, 189, 189, 189, -1, -1, 189, -1, -1, 189, 189, 189, 189, 189, 189, -1, 189, -1, 189, 189, 189, 189, -1, -1, -1, 189, 189, 190, 189, 189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 189, -1, -1, -1, -1, -1, -1, -1, 189, -1, -1, 189, 189, 189, 189, -1, 189, -1, 189], # 91
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 191, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 92
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 193, -1, -1, -1, -1, -1, -1, -1, 192, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 93
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 194, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 94
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 195, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 95
    [-1, -1, -1, -1, -1, -1, -1, 196, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 96
    [-1, -1, -1, -1, -1, -1, 197, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 97
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 198, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 98
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 199, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 99
    [-1, -1, -1, -1, -1, -1, -1, 200, -1, -1, -1, -1, -1, -1, -1, 200, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 100
    [-1, -1, -1, -1, -1, -1, 201, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 101
    [-1, -1, -1, -1, -1, -1, -1, 202, -1, -1, -1, -1, -1, -1, -1, 203, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 102
    [-1, -1, -1, -1, -1, -1, -1, 204, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 103
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 205, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 104
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 206, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 105
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 207, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 106
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 107
    [-1, -1, -1, -1, -1, 209, -1, 209, -1, -1, -1, -1, -1, -1, -1, 209, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 209, -1, -1, -1, -1, -1, -1], # 108
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 210, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 109
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 211, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 110
    [-1, -1, -1, -1, -1, 212, -1, 212, -1, -1, -1, -1, -1, -1, -1, 212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 212, -1, -1, -1, -1, -1, -1], # 111
    [-1, -1, -1, -1, -1, -1, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 112
    [-1, -1, -1, -1, -1, 214, -1, 214, -1, -1, -1, -1, -1, -1, -1, 214, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 214, -1, -1, -1, -1, -1, -1], # 113
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 215, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 114
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, -1, -1, -1, -1, -1, -1, -1], # 115
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 217, -1, -1], # 116
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 218, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 117
    [-1, -1, -1, -1, -1, -1, 219, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 118
    [-1, 220, -1, 220, -1, 220, -1, 220, -1, 220, 220, -1, -1, 220, -1, 220, 220, 220, -1, -1, 220, -1, -1, 220, 220, 220, 220, 220, 220, -1, 220, -1, 220, 220, 220, 220, -1, -1, -1, 220, 220, -1, 220, 220, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 220, -1, -1, -1, -1, -1, -1, -1, 220, -1, -1, 220, 220, 220, 220, -1, 220, -1, 220], # 119
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 221, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 120
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 222, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 121
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 223, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 223, -1, 223, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 122
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 224, -1, -1, -1, 224, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 224, 224, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 123
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 225, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 225, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 124
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 226, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 125
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 227, 227, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 126
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 228, 228, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 127
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 229, 229, 229, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 128
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 230, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 129
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 231, 231, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 130
    [-1, 232, -1, 232, -1, 232, -1, 232, -1, 232, 232, -1, -1, 232, -1, 232, 232, 232, -1, -1, 232, -1, -1, 232, 232, 232, 232, 232, 232, -1, 232, -1, 232, 232, 232, 232, -1, -1, -1, 232, 232, -1, 232, 232, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 232, -1, -1, -1, -1, -1, -1, -1, 232, -1, -1, 232, 232, 232, 232, -1, 232, -1, 232], # 131
    [-1, -1, -1, 233, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 132
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 234, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 133
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 134
    [-1, 236, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 236, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 236, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 135
    [-1, 237, -1, 237, -1, 237, -1, 237, -1, 237, 237, -1, -1, 237, -1, 237, 237, 237, -1, -1, 237, -1, -1, 237, 237, 237, 237, 237, 237, -1, 237, -1, 237, 237, 237, 237, -1, -1, -1, 237, 237, -1, 237, 237, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 237, -1, -1, -1, -1, -1, -1, -1, 237, -1, -1, 237, 237, 237, 237, -1, 237, -1, 237], # 136
    [-1, -1, -1, -1, -1, -1, 238, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 137
    [-1, 239, -1, 239, -1, 239, -1, 239, -1, 239, 239, -1, -1, 239, -1, 239, 239, 239, -1, -1, 239, -1, -1, 239, 239, 239, 239, 239, 239, -1, 239, -1, 239, 239, 239, 239, -1, -1, -1, 239, 239, -1, 239, 239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 239, -1, -1, -1, -1, -1, -1, -1, 239, -1, -1, 239, 239, 239, 239, -1, 239, -1, 239], # 138
    [-1, -1, -1, -1, -1, -1, 240, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 139
    [-1, -1, -1, -1, -1, 241, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 140
    [-1, -1, -1, -1, -1, 242, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 141
    [-1, 243, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 243, -1, -1, -1, -1, -1, -1, -1, 243, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 243, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 243, 243, 243, 243, 243, 243, 243, -1, -1, -1, -1, -1, -1, 243, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 142
    [-1, 244, -1, 244, -1, 244, -1, 244, -1, 244, 244, -1, -1, 244, -1, 244, 244, 244, -1, -1, 244, -1, -1, 244, 244, 244, 244, 244, 244, -1, 244, -1, 244, 244, 244, 244, -1, -1, -1, 244, 244, -1, 244, 244, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 244, -1, -1, -1, -1, -1, -1, -1, 244, -1, -1, 244, 244, 244, 244, -1, 244, -1, 244], # 143
    [-1, 245, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 245, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 144
    [-1, -1, -1, -1, -1, -1, 246, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 145
    [-1, 247, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 146
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 248, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 147
    [-1, -1, -1, -1, -1, -1, -1, 249, -1, -1, -1, -1, -1, -1, -1, 249, 249, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 249, -1, -1, -1, -1, -1, -1], # 148
    [-1, 250, -1, 250, -1, 250, -1, 250, -1, 250, 250, -1, -1, 250, -1, 250, 250, 250, -1, -1, 250, -1, -1, 250, 250, 250, 250, 250, 250, -1, 250, -1, 250, 250, 250, 250, -1, -1, -1, 250, 250, -1, 250, 250, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 250, -1, -1, -1, -1, -1, -1, -1, 250, -1, -1, 250, 250, 250, 250, -1, 250, -1, 250], # 149
    [-1, 251, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 251, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 251, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 150
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 252, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 151
    [-1, 253, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 152
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 254, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 153
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 154
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 155
    [-1, -1, -1, -1, -1, 257, -1, 257, -1, -1, -1, -1, -1, -1, -1, 257, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 257, -1, -1, -1, -1, -1, -1], # 156
    [-1, -1, -1, -1, -1, -1, 258, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 157
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 259, -1, -1, 259, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 158
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 260, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 159
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 261, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 160
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 262, -1, -1, -1], # 161
    [-1, 263, -1, 263, -1, 263, -1, 263, -1, 263, 263, -1, -1, 263, -1, 263, 263, 263, -1, -1, 263, -1, -1, 263, 263, 263, 263, 263, 263, -1, 263, -1, 263, 263, 263, 263, -1, -1, -1, 263, 263, 263, 263, 263, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 263, -1, -1, -1, -1, -1, -1, -1, 263, -1, -1, 263, 263, 263, 263, -1, 263, -1, 263], # 162
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 264, -1, -1, -1, -1, -1, -1, -1, 264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 163
    [-1, -1, -1, -1, -1, -1, 265, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 164
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 266, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 165
    [-1, -1, -1, -1, -1, -1, 267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 166
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 268, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 167
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 168
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 270, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 169
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 271, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 170
    [-1, 272, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 171
    [-1, -1, -1, -1, -1, -1, 273, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 172
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 274, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 173
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 174
    [-1, -1, -1, -1, -1, -1, 276, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 175
  ].freeze

  CONFIG.actions = [
    [:_rule_0, 1], # 0
    [:_rule_1, 1], # 1
    [:_rule_2, 2], # 2
    [:_rule_3, 2], # 3
    [:_rule_4, 2], # 4
    [:_rule_5, 2], # 5
    [:_rule_6, 2], # 6
    [:_rule_7, 2], # 7
    [:_rule_8, 1], # 8
    [:_rule_9, 1], # 9
    [:_rule_10, 1], # 10
    [:_rule_11, 2], # 11
    [:_rule_12, 2], # 12
    [:_rule_13, 1], # 13
    [:_rule_14, 1], # 14
    [:_rule_15, 1], # 15
    [:_rule_16, 1], # 16
    [:_rule_17, 2], # 17
    [:_rule_18, 2], # 18
    [:_rule_19, 1], # 19
    [:_rule_20, 1], # 20
    [:_rule_21, 2], # 21
    [:_rule_22, 2], # 22
    [:_rule_23, 2], # 23
    [:_rule_24, 2], # 24
    [:_rule_25, 1], # 25
    [:_rule_26, 1], # 26
    [:_rule_27, 2], # 27
    [:_rule_28, 2], # 28
    [:_rule_29, 1], # 29
    [:_rule_30, 1], # 30
    [:_rule_31, 2], # 31
    [:_rule_32, 2], # 32
    [:_rule_33, 1], # 33
    [:_rule_34, 1], # 34
    [:_rule_35, 1], # 35
    [:_rule_36, 2], # 36
    [:_rule_37, 2], # 37
    [:_rule_38, 2], # 38
    [:_rule_39, 2], # 39
    [:_rule_40, 2], # 40
    [:_rule_41, 2], # 41
    [:_rule_42, 2], # 42
    [:_rule_43, 2], # 43
    [:_rule_44, 2], # 44
    [:_rule_45, 1], # 45
    [:_rule_46, 1], # 46
    [:_rule_47, 1], # 47
    [:_rule_48, 1], # 48
    [:_rule_49, 2], # 49
    [:_rule_50, 2], # 50
    [:_rule_51, 0], # 51
    [:_rule_52, 3], # 52
    [:_rule_53, 1], # 53
    [:_rule_54, 1], # 54
    [:_rule_55, 1], # 55
    [:_rule_56, 1], # 56
    [:_rule_57, 1], # 57
    [:_rule_58, 1], # 58
    [:_rule_59, 1], # 59
    [:_rule_60, 1], # 60
    [:_rule_61, 1], # 61
    [:_rule_62, 1], # 62
    [:_rule_63, 1], # 63
    [:_rule_64, 1], # 64
    [:_rule_65, 1], # 65
    [:_rule_66, 3], # 66
    [:_rule_67, 1], # 67
    [:_rule_68, 1], # 68
    [:_rule_69, 1], # 69
    [:_rule_70, 1], # 70
    [:_rule_71, 1], # 71
    [:_rule_72, 1], # 72
    [:_rule_73, 1], # 73
    [:_rule_74, 1], # 74
    [:_rule_75, 1], # 75
    [:_rule_76, 1], # 76
    [:_rule_77, 1], # 77
    [:_rule_78, 1], # 78
    [:_rule_79, 1], # 79
    [:_rule_80, 1], # 80
    [:_rule_81, 1], # 81
    [:_rule_82, 1], # 82
    [:_rule_83, 1], # 83
    [:_rule_84, 1], # 84
    [:_rule_85, 1], # 85
    [:_rule_86, 1], # 86
    [:_rule_87, 3], # 87
    [:_rule_88, 2], # 88
    [:_rule_89, 2], # 89
    [:_rule_90, 3], # 90
    [:_rule_91, 2], # 91
    [:_rule_92, 2], # 92
    [:_rule_93, 3], # 93
    [:_rule_94, 1], # 94
    [:_rule_95, 1], # 95
    [:_rule_96, 1], # 96
    [:_rule_97, 1], # 97
    [:_rule_98, 1], # 98
    [:_rule_99, 1], # 99
    [:_rule_100, 1], # 100
    [:_rule_101, 2], # 101
    [:_rule_102, 3], # 102
    [:_rule_103, 2], # 103
    [:_rule_104, 1], # 104
    [:_rule_105, 1], # 105
    [:_rule_106, 1], # 106
    [:_rule_107, 1], # 107
    [:_rule_108, 1], # 108
    [:_rule_109, 2], # 109
    [:_rule_110, 1], # 110
    [:_rule_111, 1], # 111
    [:_rule_112, 4], # 112
    [:_rule_113, 1], # 113
    [:_rule_114, 2], # 114
    [:_rule_115, 2], # 115
    [:_rule_116, 6], # 116
    [:_rule_117, 1], # 117
    [:_rule_118, 3], # 118
    [:_rule_119, 3], # 119
    [:_rule_120, 3], # 120
    [:_rule_121, 2], # 121
    [:_rule_122, 3], # 122
    [:_rule_123, 1], # 123
    [:_rule_124, 1], # 124
    [:_rule_125, 2], # 125
    [:_rule_126, 2], # 126
    [:_rule_127, 2], # 127
    [:_rule_128, 2], # 128
    [:_rule_129, 2], # 129
    [:_rule_130, 2], # 130
    [:_rule_131, 2], # 131
    [:_rule_132, 2], # 132
    [:_rule_133, 2], # 133
    [:_rule_134, 2], # 134
    [:_rule_135, 2], # 135
    [:_rule_136, 1], # 136
    [:_rule_137, 1], # 137
    [:_rule_138, 1], # 138
    [:_rule_139, 1], # 139
    [:_rule_140, 6], # 140
    [:_rule_141, 2], # 141
    [:_rule_142, 1], # 142
    [:_rule_143, 2], # 143
    [:_rule_144, 1], # 144
    [:_rule_145, 1], # 145
    [:_rule_146, 1], # 146
    [:_rule_147, 1], # 147
    [:_rule_148, 1], # 148
    [:_rule_149, 1], # 149
    [:_rule_150, 1], # 150
    [:_rule_151, 1], # 151
    [:_rule_152, 1], # 152
    [:_rule_153, 1], # 153
    [:_rule_154, 1], # 154
    [:_rule_155, 1], # 155
    [:_rule_156, 1], # 156
    [:_rule_157, 1], # 157
    [:_rule_158, 1], # 158
    [:_rule_159, 1], # 159
    [:_rule_160, 1], # 160
    [:_rule_161, 1], # 161
    [:_rule_162, 1], # 162
    [:_rule_163, 1], # 163
    [:_rule_164, 1], # 164
    [:_rule_165, 1], # 165
    [:_rule_166, 1], # 166
    [:_rule_167, 1], # 167
    [:_rule_168, 1], # 168
    [:_rule_169, 1], # 169
    [:_rule_170, 1], # 170
    [:_rule_171, 3], # 171
    [:_rule_172, 1], # 172
    [:_rule_173, 3], # 173
    [:_rule_174, 3], # 174
    [:_rule_175, 0], # 175
    [:_rule_176, 2], # 176
    [:_rule_177, 2], # 177
    [:_rule_178, 3], # 178
    [:_rule_179, 2], # 179
    [:_rule_180, 1], # 180
    [:_rule_181, 2], # 181
    [:_rule_182, 2], # 182
    [:_rule_183, 1], # 183
    [:_rule_184, 6], # 184
    [:_rule_185, 2], # 185
    [:_rule_186, 5], # 186
    [:_rule_187, 5], # 187
    [:_rule_188, 1], # 188
    [:_rule_189, 1], # 189
    [:_rule_190, 1], # 190
    [:_rule_191, 3], # 191
    [:_rule_192, 1], # 192
    [:_rule_193, 1], # 193
    [:_rule_194, 2], # 194
    [:_rule_195, 3], # 195
    [:_rule_196, 2], # 196
    [:_rule_197, 2], # 197
    [:_rule_198, 3], # 198
    [:_rule_199, 3], # 199
    [:_rule_200, 2], # 200
    [:_rule_201, 2], # 201
    [:_rule_202, 1], # 202
    [:_rule_203, 1], # 203
    [:_rule_204, 2], # 204
    [:_rule_205, 2], # 205
    [:_rule_206, 2], # 206
    [:_rule_207, 2], # 207
    [:_rule_208, 3], # 208
    [:_rule_209, 3], # 209
    [:_rule_210, 4], # 210
    [:_rule_211, 3], # 211
    [:_rule_212, 2], # 212
    [:_rule_213, 2], # 213
    [:_rule_214, 2], # 214
    [:_rule_215, 2], # 215
    [:_rule_216, 5], # 216
    [:_rule_217, 4], # 217
    [:_rule_218, 4], # 218
    [:_rule_219, 2], # 219
    [:_rule_220, 1], # 220
    [:_rule_221, 1], # 221
    [:_rule_222, 1], # 222
    [:_rule_223, 1], # 223
    [:_rule_224, 1], # 224
    [:_rule_225, 1], # 225
    [:_rule_226, 1], # 226
    [:_rule_227, 1], # 227
    [:_rule_228, 1], # 228
    [:_rule_229, 1], # 229
    [:_rule_230, 1], # 230
    [:_rule_231, 1], # 231
    [:_rule_232, 1], # 232
    [:_rule_233, 1], # 233
    [:_rule_234, 1], # 234
    [:_rule_235, 1], # 235
    [:_rule_236, 1], # 236
    [:_rule_237, 1], # 237
    [:_rule_238, 1], # 238
    [:_rule_239, 1], # 239
    [:_rule_240, 1], # 240
    [:_rule_241, 1], # 241
    [:_rule_242, 1], # 242
    [:_rule_243, 1], # 243
    [:_rule_244, 1], # 244
    [:_rule_245, 1], # 245
    [:_rule_246, 1], # 246
    [:_rule_247, 1], # 247
    [:_rule_248, 1], # 248
    [:_rule_249, 1], # 249
    [:_rule_250, 1], # 250
    [:_rule_251, 1], # 251
    [:_rule_252, 1], # 252
    [:_rule_253, 1], # 253
    [:_rule_254, 1], # 254
    [:_rule_255, 1], # 255
    [:_rule_256, 1], # 256
    [:_rule_257, 1], # 257
    [:_rule_258, 1], # 258
    [:_rule_259, 1], # 259
    [:_rule_260, 1], # 260
    [:_rule_261, 1], # 261
    [:_rule_262, 1], # 262
    [:_rule_263, 1], # 263
    [:_rule_264, 1], # 264
    [:_rule_265, 1], # 265
    [:_rule_266, 1], # 266
    [:_rule_267, 1], # 267
    [:_rule_268, 1], # 268
    [:_rule_269, 1], # 269
    [:_rule_270, 1], # 270
    [:_rule_271, 1], # 271
    [:_rule_272, 1], # 272
    [:_rule_273, 1], # 273
    [:_rule_274, 1], # 274
    [:_rule_275, 1], # 275
    [:_rule_276, 1], # 276
  ].freeze

  def initialize(data)
    @lexer  = Lexer.new(data)
    @line   = 1
    @column = 1
  end

  def each_token
    while token = @lexer.lex
      yield [token.type, token]
    end

    yield [-1, -1]
  end

  def parser_error(stack_type, stack_value, token_type, token_value)
    value = stack_value

    if value.is_a?(Token)
      value = value.value
    end

    message = parser_error_message(stack_type, value, token_type)

    if value.is_a?(Token)
      message += " on line #{value.line}, column #{value.column}"
    end

    raise LL::ParserError, message
  end

  def s(type, *children, location: nil)
    if location
      line   = location.line
      column = location.column
    elsif children[0].is_a?(Token)
      line   = children[0].line
      column = children[0].column
    end

    children = children.map do |child|
      child.is_a?(Token) ? child.value : child
    end

    Node.new(type, children, line: line, column: column)
  end

  def combine_operators(val)
    node = val[0]

    val[1].each do |(name, expr)|
      node = s(:send, node, name, expr, location: name)
    end

    node
  end

  def _rule_0(val)
     s(:exprs, *val[0]) 
  end

  def _rule_1(val)
    val[0]
  end

  def _rule_2(val)
    
      node = val[0]

      val[1].each do |(op, expr)|
        node = s(:or, node, expr, location: op)
      end

      node
    
  end

  def _rule_3(val)
    val
  end

  def _rule_4(val)
    
      node = val[0]

      val[1].each do |(op, expr)|
        node = s(:and, node, expr, location: op)
      end

      node
    
  end

  def _rule_5(val)
    val
  end

  def _rule_6(val)
     combine_operators(val) 
  end

  def _rule_7(val)
    val
  end

  def _rule_8(val)
    val[0]
  end

  def _rule_9(val)
    val[0]
  end

  def _rule_10(val)
    val[0]
  end

  def _rule_11(val)
     combine_operators(val) 
  end

  def _rule_12(val)
    val
  end

  def _rule_13(val)
    val[0]
  end

  def _rule_14(val)
    val[0]
  end

  def _rule_15(val)
    val[0]
  end

  def _rule_16(val)
    val[0]
  end

  def _rule_17(val)
     combine_operators(val) 
  end

  def _rule_18(val)
    val
  end

  def _rule_19(val)
    val[0]
  end

  def _rule_20(val)
    val[0]
  end

  def _rule_21(val)
     combine_operators(val) 
  end

  def _rule_22(val)
    val
  end

  def _rule_23(val)
     combine_operators(val) 
  end

  def _rule_24(val)
    val
  end

  def _rule_25(val)
    val[0]
  end

  def _rule_26(val)
    val[0]
  end

  def _rule_27(val)
     combine_operators(val) 
  end

  def _rule_28(val)
    val
  end

  def _rule_29(val)
    val[0]
  end

  def _rule_30(val)
    val[0]
  end

  def _rule_31(val)
     combine_operators(val) 
  end

  def _rule_32(val)
    val
  end

  def _rule_33(val)
    val[0]
  end

  def _rule_34(val)
    val[0]
  end

  def _rule_35(val)
    val[0]
  end

  def _rule_36(val)
     combine_operators(val) 
  end

  def _rule_37(val)
    val
  end

  def _rule_38(val)
    
      if val[1] and val[1][2]
        s(val[1][0], val[0], val[1][2], location: val[1][1])
      elsif val[1]
        s(val[1][0], val[0], location: val[1][1])
      else
        val[0]
      end
    
  end

  def _rule_39(val)
     [:irange, val[0], val[1]] 
  end

  def _rule_40(val)
    
      if val[1]
        [:erange, val[0], val[1]]
      else
        [:rest, val[0]]
      end
    
  end

  def _rule_41(val)
    
      node = val[0]

      if val[1]
        array = val[1][0]
        args = val[1][1]
        name = val[1][2]

        node = s(:send, node, name, *args, location: array)
      end

      node
    
  end

  def _rule_42(val)
    
      if val[1]
        [val[0], val[0].children.dup << val[1], '[]=']
      else
        [val[0], val[0].children, '[]']
      end
    
  end

  def _rule_43(val)
     val[1] 
  end

  def _rule_44(val)
     s(:send, val[1], val[0][0], location: val[0][1]) 
  end

  def _rule_45(val)
    val[0]
  end

  def _rule_46(val)
     ['!', val[0]] 
  end

  def _rule_47(val)
     ['+@', val[0]] 
  end

  def _rule_48(val)
     ['-@', val[0]] 
  end

  def _rule_49(val)
    
      node = val[0]

      val[1].each do |(ident, args)|
        node = s(:send, node, ident, *args, location: ident)
      end

      node
    
  end

  def _rule_50(val)
     [val[0], *val[1]] 
  end

  def _rule_51(val)
    val
  end

  def _rule_52(val)
     [val[1], val[2]] 
  end

  def _rule_53(val)
    val[0]
  end

  def _rule_54(val)
    val[0]
  end

  def _rule_55(val)
    val[0]
  end

  def _rule_56(val)
    val[0]
  end

  def _rule_57(val)
    val[0]
  end

  def _rule_58(val)
    val[0]
  end

  def _rule_59(val)
    val[0]
  end

  def _rule_60(val)
    val[0]
  end

  def _rule_61(val)
    val[0]
  end

  def _rule_62(val)
    val[0]
  end

  def _rule_63(val)
    val[0]
  end

  def _rule_64(val)
    val[0]
  end

  def _rule_65(val)
    val[0]
  end

  def _rule_66(val)
     val[1] 
  end

  def _rule_67(val)
    val[0]
  end

  def _rule_68(val)
    val[0]
  end

  def _rule_69(val)
    val[0]
  end

  def _rule_70(val)
    val[0]
  end

  def _rule_71(val)
    val[0]
  end

  def _rule_72(val)
    val[0]
  end

  def _rule_73(val)
    val[0]
  end

  def _rule_74(val)
    val[0]
  end

  def _rule_75(val)
    val[0]
  end

  def _rule_76(val)
    val[0]
  end

  def _rule_77(val)
    val[0]
  end

  def _rule_78(val)
    val[0]
  end

  def _rule_79(val)
    val[0]
  end

  def _rule_80(val)
    val[0]
  end

  def _rule_81(val)
    val[0]
  end

  def _rule_82(val)
     s(:integer, val[0].value.to_i, location: val[0]) 
  end

  def _rule_83(val)
     s(:float, val[0].value.to_f, location: val[0]) 
  end

  def _rule_84(val)
     s(:sstring, val[0]) 
  end

  def _rule_85(val)
     s(:dstring, val[0]) 
  end

  def _rule_86(val)
     s(:symbol, val[0]) 
  end

  def _rule_87(val)
     s(:array, *val[1], location: val[0]) 
  end

  def _rule_88(val)
     val.flatten 
  end

  def _rule_89(val)
     val[1] 
  end

  def _rule_90(val)
     s(:hash, *val[1], location: val[0]) 
  end

  def _rule_91(val)
     val.flatten 
  end

  def _rule_92(val)
     val[1] 
  end

  def _rule_93(val)
     s(:keyval, val[0], val[2]) 
  end

  def _rule_94(val)
     [:ident, val[0]] 
  end

  def _rule_95(val)
     [:const, val[0]] 
  end

  def _rule_96(val)
     [:self, val[0]] 
  end

  def _rule_97(val)
     s(:ivar, val[0], location: val[0]) 
  end

  def _rule_98(val)
     s(:const, nil, val[0], location: val[0]) 
  end

  def _rule_99(val)
     s(:ident, nil, val[0], location: val[0]) 
  end

  def _rule_100(val)
     s(:dynamic, location: val[0]) 
  end

  def _rule_101(val)
    
      node = s(val[0][0], nil, val[0][1], location: val[0][1])

      val[1].each do |(type, name)|
        node = s(type, node, name, location: name)
      end

      node
    
  end

  def _rule_102(val)
    
      rec  = val[0] ? s(:toplevel, location: val[0]) : nil
      node = s(val[1][0], rec, val[1][1], location: val[0])

      val[2].each do |(type, name)|
        node = s(type, node, name, location: name)
      end

      node
    
  end

  def _rule_103(val)
     val[1] 
  end

  def _rule_104(val)
    val[0]
  end

  def _rule_105(val)
     [:const, val[0]] 
  end

  def _rule_106(val)
     [:const, val[0]] 
  end

  def _rule_107(val)
     [:const, val[0]] 
  end

  def _rule_108(val)
     [:const, val[0]] 
  end

  def _rule_109(val)
    
      if val[1]
        type, expr = val[1]

        case type
        when :send
          name     = val[0].children[1]
          receiver = val[0].children[0]

          s(:send, receiver, name, *expr, location: val[0])
        when :assign
          s(:assign, val[0], val[1][2], location: val[0])
        else
          s(:assign, val[0], s(:send, val[0], type, val[1][2], location: val[0]), location: val[0])
        end
      else
        val[0]
      end
    
  end

  def _rule_110(val)
     [:send, val[0]] 
  end

  def _rule_111(val)
    val[0]
  end

  def _rule_112(val)
    
      args = val[1] ? val[1] : []
      args << val[3] if val[3]

      args
    
  end

  def _rule_113(val)
     val 
  end

  def _rule_114(val)
     val.flatten 
  end

  def _rule_115(val)
     val[1] 
  end

  def _rule_116(val)
    
      s(:closure, val[1], val[2], val[4], location: val[0])
    
  end

  def _rule_117(val)
    val[0]
  end

  def _rule_118(val)
    
      s(:closure, s(:args), nil, val[1], location: val[0])
    
  end

  def _rule_119(val)
    
      type = val[1] ? :letm : :let

      val_type, name, default = val[2]

      s(type, name, val_type, default, location: val[0])
    
  end

  def _rule_120(val)
    
      if val[1]
        val
      else
        [nil, val[0], val[2]]
      end
    
  end

  def _rule_121(val)
    
      [nil, val[0], val[1]]
    
  end

  def _rule_122(val)
    val
  end

  def _rule_123(val)
    
      s(val[0][0], nil, val[0][1], location: val[0][1])
    
  end

  def _rule_124(val)
    val[0]
  end

  def _rule_125(val)
     [:assign, val[0], val[1]] 
  end

  def _rule_126(val)
     ['+', val[0], val[1]] 
  end

  def _rule_127(val)
     ['-', val[0], val[1]] 
  end

  def _rule_128(val)
     ['/', val[0], val[1]] 
  end

  def _rule_129(val)
     ['%', val[0], val[1]] 
  end

  def _rule_130(val)
     ['*', val[0], val[1]] 
  end

  def _rule_131(val)
     ['^', val[0], val[1]] 
  end

  def _rule_132(val)
     ['|', val[0], val[1]] 
  end

  def _rule_133(val)
     ['&', val[0], val[1]] 
  end

  def _rule_134(val)
    
      s(:return, val[1], location: val[0])
    
  end

  def _rule_135(val)
    
      if val[1]
        s(:super, *val[1], location: val[0])
      else
        s(:super, location: val[0])
      end
    
  end

  def _rule_136(val)
    
      s(:break, location: val[0])
    
  end

  def _rule_137(val)
    
      s(:next, location: val[0])
    
  end

  def _rule_138(val)
     s(:true, location: val[0]) 
  end

  def _rule_139(val)
     s(:false, location: val[0]) 
  end

  def _rule_140(val)
    
      rec, name = val[1]

      if val[5]
        s(:def, rec, name, val[2], val[3], val[4], val[5], location: val[0])
      else
        s(:rdef, rec, name, val[2], val[3], val[4], location: val[0])
      end
    
  end

  def _rule_141(val)
    
      if val[1]
        val
      else
        [nil, val[0].children[1]]
      end
    
  end

  def _rule_142(val)
     [nil, val[0]] 
  end

  def _rule_143(val)
    
      if val[1].is_a?(Node)
        val[1].children[1]
      else
        val[1]
      end
    
  end

  def _rule_144(val)
    val[0]
  end

  def _rule_145(val)
    val[0]
  end

  def _rule_146(val)
    val[0]
  end

  def _rule_147(val)
    val[0]
  end

  def _rule_148(val)
    val[0]
  end

  def _rule_149(val)
    val[0]
  end

  def _rule_150(val)
    val[0]
  end

  def _rule_151(val)
    val[0]
  end

  def _rule_152(val)
    val[0]
  end

  def _rule_153(val)
    val[0]
  end

  def _rule_154(val)
    val[0]
  end

  def _rule_155(val)
    val[0]
  end

  def _rule_156(val)
    val[0]
  end

  def _rule_157(val)
    val[0]
  end

  def _rule_158(val)
    val[0]
  end

  def _rule_159(val)
    val[0]
  end

  def _rule_160(val)
    val[0]
  end

  def _rule_161(val)
    val[0]
  end

  def _rule_162(val)
    val[0]
  end

  def _rule_163(val)
    val[0]
  end

  def _rule_164(val)
    val[0]
  end

  def _rule_165(val)
    val[0]
  end

  def _rule_166(val)
    val[0]
  end

  def _rule_167(val)
    val[0]
  end

  def _rule_168(val)
    val[0]
  end

  def _rule_169(val)
    val[0]
  end

  def _rule_170(val)
    val[0]
  end

  def _rule_171(val)
     val[2] ? '[]=' : '[]' 
  end

  def _rule_172(val)
    val[0]
  end

  def _rule_173(val)
     val[1] 
  end

  def _rule_174(val)
     s(:args, *val[1]) 
  end

  def _rule_175(val)
     s(:args) 
  end

  def _rule_176(val)
     val.flatten 
  end

  def _rule_177(val)
     val[1] 
  end

  def _rule_178(val)
    
      args = [val[0]] # name, type, default

      if val[1]
        if val[1][0]
          args[1] = val[0]          # type
          args[0] = val[1][0].value # name
        end

        args[2] = val[1][1] if val[1][1] # default
      end

      if args[0].is_a?(Node)
        args[0] = args[0].children[1]
      end

      type = val[2] ? :restarg : :arg

      s(type, *args)
    
  end

  def _rule_179(val)
    val
  end

  def _rule_180(val)
     [nil, val[0]] 
  end

  def _rule_181(val)
     val[1] 
  end

  def _rule_182(val)
     val[1] 
  end

  def _rule_183(val)
     s(:docstring, val[0]) 
  end

  def _rule_184(val)
    
      s(:class, val[1], val[2], val[4], location: val[0])
    
  end

  def _rule_185(val)
     val[1] 
  end

  def _rule_186(val)
    
      s(:trait, val[1], val[3], location: val[0])
    
  end

  def _rule_187(val)
    
      s(:enum, val[1], val[3], location: val[0])
    
  end

  def _rule_188(val)
     s(:exprs, *val[0]) 
  end

  def _rule_189(val)
    val[0]
  end

  def _rule_190(val)
    val[0]
  end

  def _rule_191(val)
    
      s(:member, val[1], *val[2], location: val[0])
    
  end

  def _rule_192(val)
     [val[0]] 
  end

  def _rule_193(val)
     [nil, val[0]] 
  end

  def _rule_194(val)
     val[1] 
  end

  def _rule_195(val)
     val[1] 
  end

  def _rule_196(val)
     s(:args, val[0], *val[1]) 
  end

  def _rule_197(val)
     val[1] 
  end

  def _rule_198(val)
    
      if val[2]
        s(:import, val[1], val[2], location: val[0])
      else
        s(:import, val[1], location: val[0])
      end
    
  end

  def _rule_199(val)
     s(:symbols, *val[1], location: val[0]) 
  end

  def _rule_200(val)
     val.flatten 
  end

  def _rule_201(val)
     val[1] 
  end

  def _rule_202(val)
    val[0]
  end

  def _rule_203(val)
    val[0]
  end

  def _rule_204(val)
    
      val[1] ? s(:alias, val[0], val[1]) : val[0]
    
  end

  def _rule_205(val)
     val[1] 
  end

  def _rule_206(val)
    
      val[1] ? s(:alias, val[0], val[1]) : val[0]
    
  end

  def _rule_207(val)
     val[1] 
  end

  def _rule_208(val)
    
      if val[2]
        s(:impl, val[1], val[2], location: val[0])
      else
        s(:impl, val[1], location: val[0])
      end
    
  end

  def _rule_209(val)
    
      if val[1] or val[2]
        s(:type, val[0], val[1], val[2])
      else
        val[0]
      end
    
  end

  def _rule_210(val)
    
      s(:tdef, val[1], val[3], location: val[0])
    
  end

  def _rule_211(val)
    
      s(:targs, *val[1], location: val[0])
    
  end

  def _rule_212(val)
     val.flatten 
  end

  def _rule_213(val)
     val[1] 
  end

  def _rule_214(val)
    
      val[1] ? s(:tdef, val[0], val[1]) : s(:tdef, val[0])
    
  end

  def _rule_215(val)
     val[1] 
  end

  def _rule_216(val)
    
      s(:module, val[1], val[3], location: val[0])
    
  end

  def _rule_217(val)
    
      s(:compile_flag, val[1], *val[2], location: val[0])
    
  end

  def _rule_218(val)
    
      [val[1], *val[2]]
    
  end

  def _rule_219(val)
     val[1] 
  end

  def _rule_220(val)
    val[0]
  end

  def _rule_221(val)
    val[0]
  end

  def _rule_222(val)
    val[0]
  end

  def _rule_223(val)
    val[0]
  end

  def _rule_224(val)
    val[0]
  end

  def _rule_225(val)
    val[0]
  end

  def _rule_226(val)
    val[0]
  end

  def _rule_227(val)
    val[0]
  end

  def _rule_228(val)
    val[0]
  end

  def _rule_229(val)
    val[0]
  end

  def _rule_230(val)
    val[0]
  end

  def _rule_231(val)
    val[0]
  end

  def _rule_232(val)
    val[0]
  end

  def _rule_233(val)
    val[0]
  end

  def _rule_234(val)
    val[0]
  end

  def _rule_235(val)
    val[0]
  end

  def _rule_236(val)
    val[0]
  end

  def _rule_237(val)
    val[0]
  end

  def _rule_238(val)
    val[0]
  end

  def _rule_239(val)
    val[0]
  end

  def _rule_240(val)
    val[0]
  end

  def _rule_241(val)
    val[0]
  end

  def _rule_242(val)
    val[0]
  end

  def _rule_243(val)
    val[0]
  end

  def _rule_244(val)
    val[0]
  end

  def _rule_245(val)
    val[0]
  end

  def _rule_246(val)
    val[0]
  end

  def _rule_247(val)
    val[0]
  end

  def _rule_248(val)
    val[0]
  end

  def _rule_249(val)
    val[0]
  end

  def _rule_250(val)
    val[0]
  end

  def _rule_251(val)
    val[0]
  end

  def _rule_252(val)
    val[0]
  end

  def _rule_253(val)
    val[0]
  end

  def _rule_254(val)
    val[0]
  end

  def _rule_255(val)
    val[0]
  end

  def _rule_256(val)
    val[0]
  end

  def _rule_257(val)
    val[0]
  end

  def _rule_258(val)
    val[0]
  end

  def _rule_259(val)
    val[0]
  end

  def _rule_260(val)
    val[0]
  end

  def _rule_261(val)
    val[0]
  end

  def _rule_262(val)
    val[0]
  end

  def _rule_263(val)
    val[0]
  end

  def _rule_264(val)
    val[0]
  end

  def _rule_265(val)
    val[0]
  end

  def _rule_266(val)
    val[0]
  end

  def _rule_267(val)
    val[0]
  end

  def _rule_268(val)
    val[0]
  end

  def _rule_269(val)
    val[0]
  end

  def _rule_270(val)
    val[0]
  end

  def _rule_271(val)
    val[0]
  end

  def _rule_272(val)
    val[0]
  end

  def _rule_273(val)
    val[0]
  end

  def _rule_274(val)
    val[0]
  end

  def _rule_275(val)
    val[0]
  end

  def _rule_276(val)
    val[0]
  end
end
end
