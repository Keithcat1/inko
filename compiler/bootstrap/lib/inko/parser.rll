%name Inko::Parser;

%terminals Arrow BrackClose BrackOpen Colon ColonColon Comma Constant;
%terminals CurlyClose CurlyOpen Docstring Dot Assign Float Greater Identifier;
%terminals InstanceVariable Integer Lower ParenClose ParenOpen Pipe Equal;
%terminals Trait Class Def Enum Implement Import As Let Mutable Return Super;
%terminals Break Next Dynamic Indent Unindent True False Member;
%terminals Plus Minus Modulo Div Star And Or Ampersand LowerEqual GreaterEqual;
%terminals Power PlusAssign MinAssign DivAssign ModAssign MulAssign;
%terminals PipeAssign AmpersandAssign Compare Not NotEqual RangeInc RangeExcl;
%terminals BitwiseExclOr BitwiseExclOrAssign ShiftLeft ShiftRight Type;
%terminals PlusPrefix MinPrefix Module Self SingleString DoubleString Extends;
%terminals CompileFlagOpen CompileFlagClose Symbol;

exprs
  = expr* { s(:exprs, *val[0]) }
  ;

expr
  = or_expr
  ;

# Operator precedence is encoded in the order of the rules below. The rules are
# in order from lowest precedence to highest precedence.

or_expr
  = and_expr or_expr_follow*
    {
      node = val[0]

      val[1].each do |(op, expr)|
        node = s(:or, node, expr, location: op)
      end

      node
    }
  ;

or_expr_follow
  = Or and_expr
  ;

and_expr
  = eq_expr and_expr_follow*
    {
      node = val[0]

      val[1].each do |(op, expr)|
        node = s(:and, node, expr, location: op)
      end

      node
    }
  ;

and_expr_follow
  = And eq_expr
  ;

eq_expr
  = comp_expr eq_expr_follow* { combine_operators(val) }
  ;

eq_expr_follow
  = eq_op comp_expr
  ;

eq_op
  = Compare
  | Equal
  | NotEqual
  ;

comp_expr
  = bit_or_expr comp_expr_follow* { combine_operators(val) }
  ;

comp_expr_follow
  = comp_op bit_or_expr
  ;

comp_op
  = LowerEqual
  | Lower
  | Greater
  | GreaterEqual
  ;

bit_or_expr
  = bit_and_expr bit_or_expr_follow* { combine_operators(val) }
  ;

bit_or_expr_follow
  = bit_or_op bit_and_expr
  ;

bit_or_op
  = Pipe
  | BitwiseExclOr
  ;

bit_and_expr
  = shift_expr bit_and_expr_follow* { combine_operators(val) }
  ;

bit_and_expr_follow
  = Ampersand shift_expr
  ;

shift_expr
  = add_sub_expr shift_expr_follow* { combine_operators(val) }
  ;

shift_expr_follow
  = shift_op add_sub_expr
  ;

shift_op
  = ShiftLeft
  | ShiftRight
  ;

add_sub_expr
  = div_mod_mul_expr add_sub_expr_follow* { combine_operators(val) }
  ;

add_sub_expr_follow
  = add_sub_op div_mod_mul_expr
  ;

add_sub_op
  = Plus
  | Minus
  ;

div_mod_mul_expr
  = pow_expr div_mod_mul_expr_follow* { combine_operators(val) }
  ;

div_mod_mul_expr_follow
  = div_mod_mul_op pow_expr
  ;

div_mod_mul_op
  = Div
  | Modulo
  | Star
  ;

pow_expr
  = expr_or_range pow_expr_follow* { combine_operators(val) }
  ;

pow_expr_follow
  = Power expr_or_range
  ;

expr_or_range
  = expr_or_aset expr_or_range_follow?
    {
      if val[1] and val[1][2]
        s(val[1][0], val[0], val[1][2], location: val[1][1])
      elsif val[1]
        s(val[1][0], val[0], location: val[1][1])
      else
        val[0]
      end
    }
  ;

expr_or_range_follow
  = RangeInc expr  { [:irange, val[0], val[1]] }
  | RangeExcl expr?
    {
      if val[1]
        [:erange, val[0], val[1]]
      else
        [:rest, val[0]]
      end
    }
  ;

expr_or_aset
  = expr_body expr_or_aset_follow?
    {
      node = val[0]

      if val[1]
        array = val[1][0]
        args = val[1][1]
        name = val[1][2]

        node = s(:send, node, name, *args, location: array)
      end

      node
    }
  ;

expr_or_aset_follow
  = array expr_or_aset_assign?
    {
      if val[1]
        [val[0], val[0].children.dup << val[1], '[]=']
      else
        [val[0], val[0].children, '[]']
      end
    }
  ;

expr_or_aset_assign
  = Assign expr { val[1] }
  ;

expr_body
  = prefix_op expr_steps { s(:send, val[1], val[0][0], location: val[0][1]) }
  | expr_steps
  ;

prefix_op
  = Not   { ['!', val[0]] }
  | Plus  { ['+@', val[0]] }
  | Minus { ['-@', val[0]] }
  ;

expr_steps
  = expr_member expr_send
    {
      node = val[0]

      val[1].each do |(ident, args)|
        node = s(:send, node, ident, *args, location: ident)
      end

      node
    }
  ;

expr_send
  = expr_send_chain expr_send_chain* { [val[0], *val[1]] }
  | _
  ;

expr_send_chain
  = Dot identifier_or_special send_follow? { [val[1], val[2]] }
  ;

identifier_or_special
  = Identifier
  | Class
  | Trait
  | Enum
  | Module
  ;

expr_member
  = integer
  | float
  | string
  | array
  | hash
  | send
  | closure
  | ParenOpen exprs ParenClose { val[1] }
  | let
  | ivar
  | control_flow
  | boolean
  | def
  | docstring
  | class
  | trait
  | enum
  | import
  | impl
  | type_def
  | module
  | self
  | compile_flag
  | symbol
  ;

integer
  = Integer { s(:integer, val[0].value.to_i, location: val[0]) }
  ;

float
  = Float { s(:float, val[0].value.to_f, location: val[0]) }
  ;

string
  = SingleString { s(:sstring, val[0]) }
  | DoubleString { s(:dstring, val[0]) }
  ;

symbol
  = Symbol { s(:symbol, val[0]) }
  ;

array
  = BrackOpen array_values? BrackClose { s(:array, *val[1], location: val[0]) }
  ;

array_values
  = expr array_values_follow* { val.flatten }
  ;

array_values_follow
  = Comma expr { val[1] }
  ;

hash
  = CurlyOpen hash_values? CurlyClose { s(:hash, *val[1], location: val[0]) }
  ;

hash_values
  = key_value hash_values_follow* { val.flatten }
  ;

hash_values_follow
  = Comma key_value { val[1] }
  ;

key_value
  = expr Colon expr { s(:keyval, val[0], val[2]) }
  ;

identifier_or_constant
  = Identifier { [:ident, val[0]] }
  | Constant   { [:const, val[0]] }
  ;

ivar
  = InstanceVariable { s(:ivar, val[0], location: val[0]) }
  ;

const
  = Constant { s(:const, nil, val[0], location: val[0]) }
  ;

ident
  = Identifier { s(:ident, nil, val[0], location: val[0]) }
  ;

dynamic
  = Dynamic { s(:dynamic, location: val[0]) }
  ;

qname
  = identifier_or_constant qname_follow*
    {
      node = s(val[0][0], nil, val[0][1], location: val[0][1])

      val[1].each do |(type, name)|
        node = s(type, node, name, location: name)
      end

      node
    }
  | ColonColon identifier_or_constant qname_follow*
    {
      rec  = val[0] ? s(:toplevel, location: val[0]) : nil
      node = s(val[1][0], rec, val[1][1], location: val[0])

      val[2].each do |(type, name)|
        node = s(type, node, name, location: name)
      end

      node
    }
  ;

qname_follow
  = ColonColon qname_follow_member { val[1] }
  ;

qname_follow_member
  = identifier_or_constant
  | Class  { [:const, val[0]] }
  | Trait  { [:const, val[0]] }
  | Enum   { [:const, val[0]] }
  | Module { [:const, val[0]] }
  ;

send
  = qname send_follow_or_reassign?
    {
      if val[1]
        type, expr = val[1]

        case type
        when :send
          name     = val[0].children[1]
          receiver = val[0].children[0]

          s(:send, receiver, name, *expr, location: val[0])
        when :assign
          s(:assign, val[0], val[1][2], location: val[0])
        else
          s(:assign, val[0], s(:send, val[0], type, val[1][2], location: val[0]), location: val[0])
        end
      else
        val[0]
      end
    }
  ;

send_follow_or_reassign
  = send_follow { [:send, val[0]] }
  | reassign
  ;

send_follow
  = ParenOpen send_args? ParenClose send_closure?
    {
      args = val[1] ? val[1] : []
      args << val[3] if val[3]

      args
    }
  | send_closure { val }
  ;

send_args
  = expr send_args_follow* { val.flatten }
  ;

send_args_follow
  = Comma expr { val[1] }
  ;

closure
  = Arrow def_args_start return_type? Indent exprs Unindent
    {
      s(:closure, val[1], val[2], val[4], location: val[0])
    }
  ;

send_closure
  = closure
  | Indent exprs Unindent
    {
      s(:closure, s(:args), nil, val[1], location: val[0])
    }
  ;

let
  = Let Mutable? let_follow
    {
      type = val[1] ? :letm : :let

      val_type, name, default = val[2]

      s(type, name, val_type, default, location: val[0])
    }
  ;

let_follow
  = qname let_var? arg_default
    {
      if val[1]
        val
      else
        [nil, val[0], val[2]]
      end
    }
  | ivar arg_default
    {
      [nil, val[0], val[1]]
    }
  | dynamic let_var arg_default
  ;

let_var
  = identifier_or_constant
    {
      s(val[0][0], nil, val[0][1], location: val[0][1])
    }
  | ivar
  ;

reassign
  = Assign expr              { [:assign, val[0], val[1]] }
  | PlusAssign expr          { ['+', val[0], val[1]] }
  | MinAssign expr           { ['-', val[0], val[1]] }
  | DivAssign expr           { ['/', val[0], val[1]] }
  | ModAssign expr           { ['%', val[0], val[1]] }
  | MulAssign expr           { ['*', val[0], val[1]] }
  | BitwiseExclOrAssign expr { ['^', val[0], val[1]] }
  | PipeAssign expr          { ['|', val[0], val[1]] }
  | AmpersandAssign expr     { ['&', val[0], val[1]] }
  ;

control_flow
  = Return expr?
    {
      s(:return, val[1], location: val[0])
    }
  | Super send_follow?
    {
      if val[1]
        s(:super, *val[1], location: val[0])
      else
        s(:super, location: val[0])
      end
    }
  | Break
    {
      s(:break, location: val[0])
    }
  | Next
    {
      s(:next, location: val[0])
    }
  ;

boolean
  = True  { s(:true, location: val[0]) }
  | False { s(:false, location: val[0]) }
  ;

def
  = Def def_name type_args? def_args_start return_type? def_body?
    {
      rec, name = val[1]

      if val[5]
        s(:def, rec, name, val[2], val[3], val[4], val[5], location: val[0])
      else
        s(:rdef, rec, name, val[2], val[3], val[4], location: val[0])
      end
    }
  ;

def_name
  = qname_or_self def_name_follow?
    {
      if val[1]
        val
      else
        [nil, val[0].children[1]]
      end
    }
  | def_special_name { [nil, val[0]] }
  ;

qname_or_self
  = qname
  | self
  ;

def_name_follow
  = Dot qname_or_def_special_name
    {
      if val[1].is_a?(Node)
        val[1].children[1]
      else
        val[1]
      end
    }
  ;

qname_or_def_special_name
  = qname
  | def_special_name
  ;

def_special_name
  = Star
  | Plus
  | Minus
  | Div
  | Modulo
  | Ampersand
  | Lower
  | Greater
  | LowerEqual
  | GreaterEqual
  | Equal
  | NotEqual
  | Power
  | Compare
  | BitwiseExclOr
  | ShiftLeft
  | ShiftRight
  | Pipe
  | PlusPrefix
  | MinPrefix
  | Class
  | Trait
  | Enum
  | Module
  | Not
  | BrackOpen BrackClose Assign? { val[2] ? '[]=' : '[]' }
  ;

def_body
  = Indent exprs Unindent { val[1] }
  ;

def_args_start
  = ParenOpen def_args? ParenClose { s(:args, *val[1]) }
  | _                              { s(:args) }
  ;

def_args
  = def_arg def_args_follow* { val.flatten }
  ;

def_args_follow
  = Comma def_arg { val[1] }
  ;

def_arg
  = type_name def_arg_follow? RangeExcl?
    {
      args = [val[0]] # name, type, default

      if val[1]
        if val[1][0]
          args[1] = val[0]          # type
          args[0] = val[1][0].value # name
        end

        args[2] = val[1][1] if val[1][1] # default
      end

      if args[0].is_a?(Node)
        args[0] = args[0].children[1]
      end

      type = val[2] ? :restarg : :arg

      s(type, *args)
    }
  ;

def_arg_follow
  = Identifier arg_default?
  | arg_default { [nil, val[0]] }
  ;

arg_default
  = Assign expr { val[1] }
  ;

return_type
  = Arrow type_name_or_self { val[1] }
  ;

type_name_or_self
  = type_name
  | self
  ;

docstring
  = Docstring { s(:docstring, val[0]) }
  ;

class
  = Class type_name class_follow? Indent exprs Unindent
    {
      s(:class, val[1], val[2], val[4], location: val[0])
    }
  ;

class_follow
  = Extends type_name { val[1] }
  ;

trait
  = Trait type_name Indent exprs Unindent
    {
      s(:trait, val[1], val[3], location: val[0])
    }
  ;

enum
  = Enum type_name Indent enum_exprs Unindent
    {
      s(:enum, val[1], val[3], location: val[0])
    }
  ;

enum_exprs
  = expr_or_member* { s(:exprs, *val[0]) }
  ;

expr_or_member
  = expr
  | member
  ;

member
  = Member Constant member_follow?
    {
      s(:member, val[1], *val[2], location: val[0])
    }
  ;

member_follow
  = member_args_start { [val[0]] }
  | member_value      { [nil, val[0]] }
  ;

member_value
  = Assign integer { val[1] }
  ;

member_args_start
  = ParenOpen member_args ParenClose { val[1] }
  ;

member_args
  = const member_args_follow* { s(:args, val[0], *val[1]) }
  ;

member_args_follow
  = Comma const { val[1] }
  ;

import
  = Import qname import_list?
    {
      if val[2]
        s(:import, val[1], val[2], location: val[0])
      else
        s(:import, val[1], location: val[0])
      end
    }
  ;

import_list
  = ParenOpen import_args ParenClose { s(:symbols, *val[1], location: val[0]) }
  ;

import_args
  = import_arg import_args_follow* { val.flatten }
  ;

import_args_follow
  = Comma import_arg { val[1] }
  ;

import_arg
  = import_const
  | import_ident
  ;

import_const
  = const import_const_as?
    {
      val[1] ? s(:alias, val[0], val[1]) : val[0]
    }
  ;

import_const_as
  = As const { val[1] }
  ;

import_ident
  = ident import_ident_as?
    {
      val[1] ? s(:alias, val[0], val[1]) : val[0]
    }
  ;

import_ident_as
  = As ident { val[1] }
  ;

impl
  = Implement type_name import_list?
    {
      if val[2]
        s(:impl, val[1], val[2], location: val[0])
      else
        s(:impl, val[1], location: val[0])
      end
    }
  ;

type_name
  = qname type_args? return_type?
    {
      if val[1] or val[2]
        s(:type, val[0], val[1], val[2])
      else
        val[0]
      end
    }
  ;

type_def
  = Type type_name Assign type_name
    {
      s(:tdef, val[1], val[3], location: val[0])
    }
  ;

type_args
  = Lower type_args_list Greater
    {
      s(:targs, *val[1], location: val[0])
    }
  ;

type_args_list
  = type_arg type_args_follow* { val.flatten }
  ;

type_args_follow
  = Comma type_arg { val[1] }
  ;

type_arg
  = type_name type_arg_follow?
    {
      val[1] ? s(:tdef, val[0], val[1]) : s(:tdef, val[0])
    }
  ;

type_arg_follow
  = Assign type_name { val[1] }
  ;

module
  = Module ident Indent exprs Unindent
    {
      s(:module, val[1], val[3], location: val[0])
    }
  ;

self
  = Self { s(:self, location: val[0]) }
  ;

compile_flag
  = CompileFlagOpen Identifier compile_flag_args? CompileFlagClose
    {
      s(:compile_flag, val[1], *val[2], location: val[0])
    }
  ;

compile_flag_args
  = ParenOpen Identifier compile_flag_args_follow* ParenClose
    {
      [val[1], *val[2]]
    }
  ;

compile_flag_args_follow
  = Comma Identifier { val[1] }
  ;

%inner {
  def initialize(data)
    @lexer  = Lexer.new(data)
    @line   = 1
    @column = 1
  end

  def each_token
    while token = @lexer.lex
      yield [token.type, token]
    end

    yield [-1, -1]
  end

  def parser_error(stack_type, stack_value, token_type, token_value)
    value = stack_value

    if value.is_a?(Token)
      value = value.value
    end

    message = parser_error_message(stack_type, value, token_type)

    if value.is_a?(Token)
      message += " on line #{value.line}, column #{value.column}"
    end

    raise LL::ParserError, message
  end

  def s(type, *children, location: nil)
    if location
      line   = location.line
      column = location.column
    elsif children[0].is_a?(Token)
      line   = children[0].line
      column = children[0].column
    end

    children = children.map do |child|
      child.is_a?(Token) ? child.value : child
    end

    Node.new(type, children, line: line, column: column)
  end

  def combine_operators(val)
    node = val[0]

    val[1].each do |(name, expr)|
      node = s(:send, node, name, expr, location: name)
    end

    node
  end
}
