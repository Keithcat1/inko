#! Methods for performing conditional operations.

## Methods for conditionals such as if/else.
##
## The methods in this trait allow objects to respond to messages that can be
## used to branch off based on a condition, much like if/else statements allow
## in other programming languages.
##
## Let's say we have a User and a NullUser and a NullUser is meant to evaluate
## to False. Because Object already implements Conditional this means we can
## override this behaviour as follows:
##
##     import std::conditional::Conditional
##
##     object User {}
##     object NullUser {}
##
##     impl Conditional for NullUser {
##       def if_true!(R)(block: do -> R) -> ?R {
##         Nil
##       }
##
##       def if_false!(R)(block: do -> R) -> ?R {
##         block.call
##       }
##
##       def if!(R)(true: do -> R, false: do -> R) -> ?R {
##         false.call
##       }
##     }
##
##     let user = NullUser.new
##
##     user.if true: { 10 }, false: { 20 } # => 20
trait Conditional {
  ## Calls the supplied block if the receiver evaluates to true.
  ##
  ## When the receiver evaluates to True the return value will be whatever the
  ## supplied block returned. When evaluating to False this method will instead
  ## return Nil.
  def if_true!(R)(block: do -> R) -> ?R

  ## Calls the supplied block if the receiver evaluates to false.
  ##
  ## When the receiver evaluates to False the return value will be whatever the
  ## supplied block returned. When evaluating to True this method will instead
  ## return Nil.
  def if_false!(R)(block: do -> R) -> ?R

  ## Calls the `true` block if the receiver evaluates to True, otherwise the
  ## `false` block is called.
  ##
  ## The return value is whatever the block returned. Both the blocks must
  ## return a value of the same type.
  def if!(R)(true: do -> R, false: do -> R) -> ?R
}
