#! Methods for obtaining information about and terminating the VM.

import std::conversion::ToString

## Details of a single call frame in a call stack.
object CallFrame {
  def init(file: String, name: String, line: Integer) {
    let @file = file
    let @name = name
    let @line = line
  }

  ## Returns the path of the file the frame belongs to.
  def file -> String {
    @file
  }

  ## Returns the name of the block of code the frame belongs to.
  def name -> String {
    @name
  }

  ## Returns the line number of the frame.
  def line -> Integer {
    @line
  }
}

impl ToString for CallFrame {
  ## Formats the CallFrame as a String
  def to_string -> String {
    @file + ', line ' + @line.to_string + ', in "' + @name + '"'
  }
}

## Triggers a panic, terminating the VM.
##
## A panic will result in a stack trace being displayed followed by a custom
## message. Once printed the virtual machine will terminate right away.
##
## A panic should only be triggered as a last resort when no better alternative
## is available. For errors that may happen regularly (e.g. network timeouts)
## it's better to throw an error using the `throw` keyword.
##
## This method will never return.
##
## # Examples
##
## Triggering a panic:
##
##     import std::vm
##
##     vm.panic('Uh-oh, something bad happened!')
def panic(message: ToString) -> Void {
  _INKOC.panic(message.to_string)
}

## Terminates the VM immediately with the given exit status.
##
## The exit status can be a number between -2147483648 and 2147483647.
##
## While calling this method will result in the VM terminating it is technically
## possible another process sets the exit status around the same time. In this
## case the exit status will be set to most recent value.
##
## # Examples
##
## Terminating the VM:
##
##     import std::vm
##
##     vm.exit(1)
def exit(status: Integer) -> Void {
  _INKOC.exit(status)
}

## Returns a stack trace leading up to the line that called this method.
##
## The stack trace is returned in reverse order. This means that the most recent
## call frame is the last value in the returned `Array`.
##
## The returned stack trace does not include the frame for this method itself.
##
## # Skipping
##
## The `skip` argument can be set to an integer to skip a number of call frames.
## By default this is set to skip the first frame, ensuring that this method
## itself does not appear in the returned stack.
##
## # Limit
##
## An optional limit can be specified to limit the number of call frames to the
## given number, starting with the most recent call frame.
##
## # Example
##
## Returning the trace of a method call:
##
##     import std::vm::(self, CallFrame)
##
##     def first -> CallFrame {
##       second
##     }
##
##     def second -> CallFrame {
##       vm.stacktrace[-1]
##     }
##
##     first.name # => 'second'
##     first.line # => 8
def stacktrace(skip = 1, limit: ?Integer = Nil) -> Array!(CallFrame) {
  let mut raw_frames = _INKOC.stacktrace(limit, skip)
  let mut frames = []
  let mut index = 0

  { index < raw_frames.length }.while_true {
    let raw_frame = raw_frames[index]

    frames[index] = CallFrame.new(
      file: raw_frame[0] as String,
      name: raw_frame[1] as String,
      line: raw_frame[2] as Integer
    )

    index += 1
  }

  # We no longer need the raw list of frames and keeping the memory around is a
  # waste, hence we drop it immediately.
  _INKOC.drop(raw_frames)

  frames
}
