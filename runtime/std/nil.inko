#! The Nil type.
#!
#! Nil is used to represent nothingness. Unlike the usual `NULL` value found
#! elsewhere `Nil` is an actual object you can send messages to.
#!
#! ## Sending Messages
#!
#! `Nil` implements a variety of methods, but sending any unknown messages to
#! `Nil` will return another `Nil`. This makes it easy to work with methods that
#! may return `Nil` without having to include checks for `Nil` values all over
#! the place.

import std::conditional::Conditional
import std::conversion::(ToString, ToFloat, ToInteger)
import std::hash::(Hasher, Hash)
import std::marker::Optional
import std::unknown_message::UnknownMessage

impl ToInteger for Nil {
  ## Always return `0`.
  ##
  ## # Examples
  ##
  ## Converting a `Nil` to an `Integer`:
  ##
  ##     Nil.to_integer # => 0
  def to_integer -> Integer {
    0
  }
}

impl ToFloat for Nil {
  ## Always returns `0.0`.
  ##
  ## # Examples
  ##
  ## Converting a `Nil` to a `Float`:
  ##
  ##     Nil.to_float # => 0.0
  def to_float -> Float {
    0.0
  }
}

impl ToString for Nil {
  ## Always returns an empty string.
  def to_string -> String {
    ''
  }
}

impl Conditional for Nil {
  ## Always returns `Nil`.
  def if_true!(R)(block: do -> R) -> ?R {
    Nil
  }

  ## Always calls the supplied block.
  def if_false!(R)(block: do -> R) -> ?R {
    block.call
  }

  ## Always calls the block provided in the `false` argument.
  def if!(R)(true: do -> R, false: do -> R) -> R {
    false.call
  }

  ## Always returns `False`.
  def and(other: do -> Boolean) -> Boolean {
    False
  }

  ## Returns `True` if the given object evaluates to `True`, otherwise returns
  ## `False`.
  def or(other: do -> Boolean) -> Boolean {
    other.call
  }
}

impl UnknownMessage for Nil {
  ## Always returns `Nil`.
  ##
  ## By always returning `Nil` we can safely work with methods that produce
  ## `Nil` values without having to explicitly check for them every time (though
  ## we're of course free to still do so where necessary).
  ##
  ## # Examples
  ##
  ## Sending a message to `Nil` produces another `Nil`:
  ##
  ##     Nil.hello # => Nil
  def unknown_message(name: String, *arguments) -> Nil {
    Nil
  }
}

impl Optional for Nil {}

impl Hash for Nil {
  def hash(hasher: Hasher) {
    _INKOC.hasher_write(hasher, self)
  }
}
