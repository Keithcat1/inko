#! Types and methods for dealing with time.
import std::conversion::(ToFloat, ToInteger)

## The number to divide a value in nanoseconds by to convert it to seconds.
let NANOSECONDS_TO_SECONDS = 1_000_000_000.0

## An object representing the current system time.
##
## A `SystemTime` object represents the current real time in seconds relative to
## the Unix epoch. Because `SystemTime` uses the system clock it's possible for
## a `SystemTime` to go back in time due to time zone changes, clock
## adjustments, or leap seconds. If you need a monotonically increasing clock
## you should use `MonotonicTime` instead.
##
## # Examples
##
## Getting the current time:
##
##     import std::time::SystemTime
##
##     SystemTime.new
object SystemTime {
  def allocate -> Self {
    let obj = _INKOC.time_system as SystemTime

    _INKOC.set_prototype(obj, self)

    obj
  }

  ## Returns the hour of the day from 0 to 23.
  def hour -> Integer {
    _INKOC.time_get_value(self, 3) as Integer
  }

  ## Returns the minute of the hour from 0 to 59.
  def minute -> Integer {
    _INKOC.time_get_value(self, 2) as Integer
  }

  ## Returns the second of the minute from 0 to 60.
  def second -> Integer {
    _INKOC.time_get_value(self, 0) as Integer
  }

  ## Returns the fractional part of the second, in seconds.
  def sub_second -> Float {
    let nsec = _INKOC.time_get_value(self, 1) as Integer

    nsec.to_float / NANOSECONDS_TO_SECONDS
  }

  ## Returns the year of the current time.
  def year -> Integer {
    _INKOC.time_get_value(self, 6)
  }

  ## Returns the month of the year, from 1 to 12.
  def month -> Integer {
    _INKOC.time_get_value(self, 5)
  }

  ## Returns the day of the month, from 1 to 31.
  def day -> Integer {
    _INKOC.time_get_value(self, 4)
  }
}

## A monotonically increasing clock.
##
## `MonotonicTime` objects represent the number of seconds relative to (roughly)
## the start time of the program. Unlike a system clock a monotonic clock never
## decreases, making it useful for tasks such as measuring the execution time of
## a block of code.
##
## # Examples
##
## Getting the current time:
##
##     import std::time::MonotonicTime
##
##     MonotonicTime.new
object MonotonicTime {
  def init(time = _INKOC.time_monotonic) {
    let @time = time
  }
}

impl ToInteger for MonotonicTime {
  def to_integer -> Integer {
    @time.to_integer
  }
}

impl ToFloat for MonotonicTime {
  def to_float -> Float {
    @time
  }
}

impl ToInteger for SystemTime {
  def to_integer -> Integer {
    _INKOC.time_get_value(self, 11) as Integer
  }
}

impl ToFloat for SystemTime {
  def to_float -> Float {
    let nsec = _INKOC.time_get_value(self, 12) as Integer

    to_integer.to_float + (nsec.to_float / NANOSECONDS_TO_SECONDS)
  }
}
