# Importing of both the prelude and the bootstrap modules will not yet work at
# this point, hence these are disabled.
![import_bootstrap: false]
![import_globals: false]
![import_prelude: false]

# Implicit module definitions will not yet work since we haven't defined the
# required objects just yet.
#
# As a result of this setting all constants and methods defined in this module
# are defined directly on the top-level object.
![define_module: false]

# Set up the various built-in objects that Inko comes with. These objects need
# to be set manually since the "object" keyword can not yet be used at this
# point. This also means we need to manually set their prototypes and names.
var True = _INKOC.get_true
var False = _INKOC.get_false
var Nil = _INKOC.get_nil

var Object = _INKOC.set_object(True)
var String = _INKOC.get_string_prototype
var Integer = _INKOC.get_integer_prototype
var Float = _INKOC.get_float_prototype
var Block = _INKOC.get_block_prototype
var Array = _INKOC.get_array_prototype

_INKOC.set_prototype(Nil, Object)
_INKOC.set_prototype(String, Object)
_INKOC.set_prototype(Integer, Object)
_INKOC.set_prototype(Float, Object)
_INKOC.set_prototype(Array, Object)
_INKOC.set_prototype(Block, Object)

_INKOC.set_attribute(True, '@_name', 'True')
_INKOC.set_attribute(False, '@_name', 'False')
_INKOC.set_attribute(Nil, '@_name', 'Nil')
_INKOC.set_attribute(Object, '@_name', 'Object')
_INKOC.set_attribute(String, '@_name', 'String')
_INKOC.set_attribute(Integer, '@_name', 'Integer')
_INKOC.set_attribute(Float, '@_name', 'Float')
_INKOC.set_attribute(Array, '@_name', 'Array')
_INKOC.set_attribute(Block, '@_name', 'Block')

# Now that our core objects are set up we can start defining more of the
# building blocks of Inko, such as "Object.new" and the bits necessary to allow
# creating of modules.
impl Object {
  def new -> Self {
    let obj = _INKOC.set_object(False, self)

    obj.init

    obj
  }

  def init {}
}

# Boolean is defined slightly later on because it's not a type built into the
# VM. Using the "object" keyword removes the need for manually setting the name,
# prototype, etc.
object Boolean {}

_INKOC.set_prototype(True, Boolean)
_INKOC.set_prototype(False, Boolean)

# Inko::Modules contains all of the imported modules mapped to their fully
# qualified module names.
object Modules {}

# Inkoc::Module will act as the prototype for all modules. We'll later refine
# this object in the std::module module, but we need it here to allow us to
# define new modules in the first place.
object Module {}

# Now we can define the object for the bootstrap module.
_INKOC.set_attribute(Modules, 'std::bootstrap', Module.new)
