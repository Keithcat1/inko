#! Boolean true and false.
#!
#! In Inko boolean true is the object `True` and boolean false is the object
#! `False`. Both are regular objects that implement a common trait: `Boolean`.

import std::conditional::Conditional
import std::conversion::ToString
import std::hash::(Hasher, Hash)
import std::operators::Equal

trait Boolean: ToString + Conditional + Hash + Equal {
  ## Returns the `Boolean` that is the opposite of `self`.
  def not -> Self
}

impl Conditional for True {
  def if_true!(R)(block: do -> R) -> ?R {
    block.call
  }

  def if_false!(R)(block: do -> R) -> ?R {
    Nil
  }

  def if!(R)(true: do -> R, false: do -> R) -> R {
    true.call
  }

  def and(other: do -> Boolean) -> Boolean {
    other.call
  }

  def or(other: do -> Boolean) -> Boolean {
    True
  }
}

impl Conditional for False {
  def if_true!(R)(block: do -> R) -> ?R {
    Nil
  }

  def if_false!(R)(block: do -> R) -> ?R {
    block.call
  }

  def if!(R)(true: do -> R, false: do -> R) -> R {
    false.call
  }

  def and(other: do -> Boolean) -> Boolean {
    False
  }

  def or(other: do -> Boolean) -> Boolean {
    other.call
  }
}

impl ToString for True {
  def to_string -> String {
    'True'
  }
}

impl ToString for False {
  def to_string -> String {
    'False'
  }
}

impl Equal for True, False {
  def ==(other: Self) -> Boolean {
    _INKOC.object_equals(self, other)
  }

  def !=(other: Self) -> Boolean {
    self == other
      .not
  }
}

impl Hash for True, False {
  def hash(hasher: Hasher) {
    _INKOC.hasher_write(hasher, self)
  }
}

impl Boolean for True {
  def not -> Self {
    False
  }
}

impl Boolean for False {
  def not -> Self {
    True
  }
}
