import std::hash::DefaultHasher
import std::pair::*
import std::test::*

def tests(t: Tests) {
  t.group('std::pair::Pair.first') do (g) {
    g.test('Obtaining the first value of a Pair') {
      try assert_equal(Pair.new(first: 10, second: 20).first, 10)
    }
  }

  t.group('std::pair::Pair.second') do (g) {
    g.test('Obtaining the second value of a Pair') {
      try assert_equal(Pair.new(first: 10, second: 20).second, 20)
    }
  }

  t.group('std::pair::Pair.==') do (g) {
    g.test('Comparing two Pair objects for equality') {
      try assert_not_equal(
        Pair.new(first: 1, second: 2),
        Pair.new(first: 2, second: 3)
      )

      try assert_equal(Pair.new(first: 1, second: 1), Pair.new(first: 1, second: 1))
    }
  }

  t.group('std::pair::Pair.hash') do (g) {
    g.test('Hashing a Pair') {
      let hasher1 = DefaultHasher.new(1, 2)
      let hasher2 = DefaultHasher.new(1, 2)
      let pair = Pair.new(first: 1, second: 2)

      pair.hash(hasher1)
      pair.hash(hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }
  }

  t.group('std::pair::Triple.first') do (g) {
    g.test('Obtaining the first value of a Triple') {
      try assert_equal(Triple.new(first: 10, second: 20, third: 30).first, 10)
    }
  }

  t.group('std::pair::Triple.second') do (g) {
    g.test('Obtaining the second value of a Triple') {
      try assert_equal(Triple.new(first: 10, second: 20, third: 30).second, 20)
    }
  }

  t.group('std::pair::Triple.third') do (g) {
    g.test('Obtaining the third value of a Triple') {
      try assert_equal(Triple.new(first: 10, second: 20, third: 30).third, 30)
    }
  }

  t.group('std::pair::Triple.==') do (g) {
    g.test('Comparing two Triple objects for equality') {
      try assert_not_equal(
        Triple.new(first: 1, second: 2, third: 3),
        Triple.new(first: 2, second: 3, third: 4)
      )

      try assert_equal(
        Triple.new(first: 1, second: 1, third: 1),
        Triple.new(first: 1, second: 1, third: 1)
      )
    }
  }

  t.group('std::pair::Triple.hash') do (g) {
    g.test('Hashing a Triple') {
      let hasher1 = DefaultHasher.new(1, 2)
      let hasher2 = DefaultHasher.new(1, 2)
      let triple = Triple.new(first: 1, second: 2, third: 3)

      triple.hash(hasher1)
      triple.hash(hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }
  }
}
