import std::hash_map::DefaultHasher
import std::test
import std::test::assert

test.group 'std::boolean::Boolean.not', do (g) {
  g.test 'Returning the opposite of Boolean', {
    try assert.equal(Boolean.not, False)
  }
}


test.group 'std::boolean::Boolean.if_true', do (g) {
  g.test 'The supplied Block is always executed', {
    let number = Boolean.if_true {
      10
    }

    try assert.equal(number, 10)
  }
}

test.group 'std::boolean::Boolean.if_false', do (g) {
  g.test 'The supplied Block is never executed', {
    let number = Boolean.if_false {
      10
    }

    try assert.equal(number, Nil)
  }
}

test.group 'std::boolean::Boolean.if', do (g) {
  g.test 'The Block passed to the "true" argument is always executed', {
    let number = Boolean.if true: {
      10
    }, false: {
      20
    }

    try assert.equal(number, 10)
  }
}

test.group 'std::boolean::Boolean.and', do (g) {
  g.test 'The supplied Block is always executed', {
    try assert.equal(Boolean.and({ True }), True)
  }
}

test.group 'std::boolean::Boolean.or', do (g) {
  g.test 'The return value is always True', {
    try assert.equal(Boolean.or({ False }), True)
  }
}

test.group 'std::boolean::Boolean.==', do (g) {
  g.test 'Comparing Boolean with other booleans', {
    try assert.equal(Boolean, Boolean)
    try assert.not_equal(Boolean, True)
    try assert.not_equal(Boolean, False)
  }
}

test.group 'std::boolean::Boolean.to_string', do (g) {
  g.test 'Converting Boolean to a String', {
    try assert.equal(Boolean.to_string, 'Boolean')
  }
}

test.group 'std::boolean::Boolean.hash', do (g) {
  g.test 'Hashing a Boolean', {
    let hasher1 = DefaultHasher.new
    let hasher2 = DefaultHasher.new

    Boolean.hash(hasher1)
    Boolean.hash(hasher2)

    # The exact hash value may change between OS processes or releases, so all
    # we can do is assert that the value is the same every time we send `hash`
    # to `Boolean`.
    try assert.equal(hasher1.finish, hasher2.finish)
  }
}

test.group 'std::boolean::True.not', do (g) {
  g.test 'Returning the opposite of True', {
    try assert.equal(True.not, False)
  }
}


test.group 'std::boolean::True.if_true', do (g) {
  g.test 'The supplied Block is always executed', {
    let number = True.if_true {
      10
    }

    try assert.equal(number, 10)
  }
}

test.group 'std::boolean::True.if_false', do (g) {
  g.test 'The supplied Block is never executed', {
    let number = True.if_false {
      10
    }

    try assert.equal(number, Nil)
  }
}

test.group 'std::boolean::True.if', do (g) {
  g.test 'The Block passed to the "true" argument is always executed', {
    let number = True.if true: {
      10
    }, false: {
      20
    }

    try assert.equal(number, 10)
  }
}

test.group 'std::boolean::True.and', do (g) {
  g.test 'The supplied Block is always executed', {
    try assert.equal(True.and({ True }), True)
  }
}

test.group 'std::boolean::True.or', do (g) {
  g.test 'The return value is always True', {
    try assert.equal(True.or({ False }), True)
  }
}

test.group 'std::boolean::True.==', do (g) {
  g.test 'Comparing True with other booleans', {
    try assert.equal(True, True)
    try assert.not_equal(True, Boolean)
    try assert.not_equal(True, False)
  }
}

test.group 'std::boolean::True.to_string', do (g) {
  g.test 'Converting True to a String', {
    try assert.equal(True.to_string, 'True')
  }
}

test.group 'std::boolean::True.hash', do (g) {
  g.test 'Hashing a True', {
    let hasher1 = DefaultHasher.new
    let hasher2 = DefaultHasher.new

    True.hash(hasher1)
    True.hash(hasher2)

    # The exact hash value may change between OS processes or releases, so all
    # we can do is assert that the value is the same every time we send `hash`
    # to `True`.
    try assert.equal(hasher1.finish, hasher2.finish)
  }
}

test.group 'std::boolean::False.not', do (g) {
  g.test 'Returning the opposite of False', {
    try assert.equal(False.not, True)
  }
}


test.group 'std::boolean::False.if_true', do (g) {
  g.test 'The supplied Block is never executed', {
    let number = False.if_true {
      10
    }

    try assert.equal(number, Nil)
  }
}

test.group 'std::boolean::False.if_false', do (g) {
  g.test 'The supplied Block is always executed', {
    let number = False.if_false {
      10
    }

    try assert.equal(number, 10)
  }
}

test.group 'std::boolean::False.if', do (g) {
  g.test 'The Block passed to the "false" argument is always executed', {
    let number = False.if true: {
      10
    }, false: {
      20
    }

    try assert.equal(number, 20)
  }
}

test.group 'std::boolean::False.and', do (g) {
  g.test 'The supplied Block is never executed', {
    try assert.equal(False.and({ True }), False)
  }
}

test.group 'std::boolean::False.or', do (g) {
  g.test 'The supplied Block is always executed', {
    try assert.equal(False.or({ True }), True)
  }
}

test.group 'std::boolean::False.==', do (g) {
  g.test 'Comparing False with other booleans', {
    try assert.equal(False, False)
    try assert.not_equal(False, Boolean)
    try assert.not_equal(False, True)
  }
}

test.group 'std::boolean::False.to_string', do (g) {
  g.test 'Converting False to a String', {
    try assert.equal(False.to_string, 'False')
  }
}

test.group 'std::boolean::False.hash', do (g) {
  g.test 'Hashing a False', {
    let hasher1 = DefaultHasher.new
    let hasher2 = DefaultHasher.new

    False.hash(hasher1)
    False.hash(hasher2)

    # The exact hash value may change between OS processes or releases, so all
    # we can do is assert that the value is the same every time we send `hash`
    # to `True`.
    try assert.equal(hasher1.finish, hasher2.finish)
  }
}
