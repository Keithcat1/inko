import std::format::DefaultFormatter
import std::map::DefaultHasher
import std::test
import std::test::assert

test.group('std::boolean::Boolean.not') do (g) {
  g.test('Returning the opposite of Boolean') {
    assert.false(Boolean.not)
  }
}


test.group('std::boolean::Boolean.if_true') do (g) {
  g.test('The supplied Block is always executed') {
    let number = Boolean.if_true {
      10
    }

    assert.equal(number, 10)
  }
}

test.group('std::boolean::Boolean.if_false') do (g) {
  g.test('The supplied Block is never executed') {
    let number = Boolean.if_false {
      10
    }

    assert.equal(number, Nil)
  }
}

test.group('std::boolean::Boolean.if') do (g) {
  g.test('The Block passed to the "true" argument is always executed') {
    let number = Boolean.if true: {
      10
    }, false: {
      20
    }

    assert.equal(number, 10)
  }
}

test.group('std::boolean::Boolean.and') do (g) {
  g.test('The supplied Block is always executed') {
    assert.equal(Boolean.and({ True }), True)
  }
}

test.group('std::boolean::Boolean.or') do (g) {
  g.test('The return value is always True') {
    assert.equal(Boolean.or({ False }), True)
  }
}

test.group('std::boolean::Boolean.==') do (g) {
  g.test('Comparing Boolean with other booleans') {
    assert.equal(Boolean, Boolean)
    assert.not_equal(Boolean, True)
    assert.not_equal(Boolean, False)
  }
}

test.group('std::boolean::Boolean.to_string') do (g) {
  g.test('Converting Boolean to a String') {
    assert.equal(Boolean.to_string, 'Boolean')
  }
}

test.group('std::boolean::Boolean.hash') do (g) {
  g.test('Hashing a Boolean') {
    let hasher1 = DefaultHasher.new(1, 2)
    let hasher2 = DefaultHasher.new(1, 2)

    Boolean.hash(hasher1)
    Boolean.hash(hasher2)

    # The exact hash value may change between OS processes or releases, so all
    # we can do is assert that the value is the same every time we send `hash`
    # to `Boolean`.
    assert.equal(hasher1.to_hash, hasher2.to_hash)
  }
}

test.group('std::boolean::Boolean.inspect') do (g) {
  g.test('Inspecting a Boolean') {
    assert.equal(Boolean.inspect, 'Boolean')
  }
}

test.group('std::boolean::Boolean.format') do (g) {
  g.test('Formatting a Boolean') {
    let formatter = DefaultFormatter.new

    Boolean.format_for_inspect(formatter)

    assert.equal(formatter.to_string, 'Boolean')
  }
}

test.group('std::boolean::True.not') do (g) {
  g.test('Returning the opposite of True') {
    assert.false(True.not)
  }
}


test.group('std::boolean::True.if_true') do (g) {
  g.test('The supplied Block is always executed') {
    let number = True.if_true {
      10
    }

    assert.equal(number, 10)
  }
}

test.group('std::boolean::True.if_false') do (g) {
  g.test('The supplied Block is never executed') {
    let number = True.if_false {
      10
    }

    assert.equal(number, Nil)
  }
}

test.group('std::boolean::True.if') do (g) {
  g.test('The Block passed to the "true" argument is always executed') {
    let number = True.if true: {
      10
    }, false: {
      20
    }

    assert.equal(number, 10)
  }
}

test.group('std::boolean::True.and') do (g) {
  g.test('The supplied Block is always executed') {
    assert.equal(True.and({ True }), True)
  }
}

test.group('std::boolean::True.or') do (g) {
  g.test('The return value is always True') {
    assert.equal(True.or({ False }), True)
  }
}

test.group('std::boolean::True.==') do (g) {
  g.test('Comparing True with other booleans') {
    assert.equal(True, True)
    assert.not_equal(True, Boolean)
    assert.not_equal(True, False)
  }
}

test.group('std::boolean::True.to_string') do (g) {
  g.test('Converting True to a String') {
    assert.equal(True.to_string, 'True')
  }
}

test.group('std::boolean::True.hash') do (g) {
  g.test('Hashing a True') {
    let hasher1 = DefaultHasher.new(1, 2)
    let hasher2 = DefaultHasher.new(1, 2)

    True.hash(hasher1)
    True.hash(hasher2)

    # The exact hash value may change between OS processes or releases, so all
    # we can do is assert that the value is the same every time we send `hash`
    # to `True`.
    assert.equal(hasher1.to_hash, hasher2.to_hash)
  }
}

test.group('std::boolean::True.inspect') do (g) {
  g.test('Inspecting True') {
    assert.equal(True.inspect, 'True')
  }
}

test.group('std::boolean::True.format') do (g) {
  g.test('Formatting a True') {
    let formatter = DefaultFormatter.new

    True.format_for_inspect(formatter)

    assert.equal(formatter.to_string, 'True')
  }
}

test.group('std::boolean::False.not') do (g) {
  g.test('Returning the opposite of False') {
    assert.equal(False.not, True)
  }
}


test.group('std::boolean::False.if_true') do (g) {
  g.test('The supplied Block is never executed') {
    let number = False.if_true {
      10
    }

    assert.equal(number, Nil)
  }
}

test.group('std::boolean::False.if_false') do (g) {
  g.test('The supplied Block is always executed') {
    let number = False.if_false {
      10
    }

    assert.equal(number, 10)
  }
}

test.group('std::boolean::False.if') do (g) {
  g.test('The Block passed to the "false" argument is always executed') {
    let number = False.if true: {
      10
    }, false: {
      20
    }

    assert.equal(number, 20)
  }
}

test.group('std::boolean::False.and') do (g) {
  g.test('The supplied Block is never executed') {
    assert.equal(False.and({ True }), False)
  }
}

test.group('std::boolean::False.or') do (g) {
  g.test('The supplied Block is always executed') {
    assert.equal(False.or({ True }), True)
  }
}

test.group('std::boolean::False.==') do (g) {
  g.test('Comparing False with other booleans') {
    assert.equal(False, False)
    assert.not_equal(False, Boolean)
    assert.not_equal(False, True)
  }
}

test.group('std::boolean::False.to_string') do (g) {
  g.test('Converting False to a String') {
    assert.equal(False.to_string, 'False')
  }
}

test.group('std::boolean::False.hash') do (g) {
  g.test('Hashing a False') {
    let hasher1 = DefaultHasher.new(1, 2)
    let hasher2 = DefaultHasher.new(1, 2)

    False.hash(hasher1)
    False.hash(hasher2)

    # The exact hash value may change between OS processes or releases, so all
    # we can do is assert that the value is the same every time we send `hash`
    # to `True`.
    assert.equal(hasher1.to_hash, hasher2.to_hash)
  }
}

test.group('std::boolean::False.inspect') do (g) {
  g.test('Inspecting False') {
    assert.equal(False.inspect, 'False')
  }
}

test.group('std::boolean::False.format') do (g) {
  g.test('Formatting a False') {
    let formatter = DefaultFormatter.new

    False.format_for_inspect(formatter)

    assert.equal(formatter.to_string, 'False')
  }
}
