import std::range
import std::test
import std::test::assert

test.group('std::range::Range.start') do (g) {
  g.test('Obtaining the start of a Range') {
    let range = Range.new(start: 1, end: 10)

    assert.equal(range.start, 1)
  }
}

test.group('std::range::Range.end') do (g) {
  g.test('Obtaining the end of a Range') {
    let range = Range.new(start: 1, end: 10)

    assert.equal(range.end, 10)
  }
}

test.group('std::range::Range.==') do (g) {
  g.test('Comparing two identical Ranges') {
    let range1 = Range.new(start: 1, end: 10)
    let range2 = Range.new(start: 1, end: 10)

    assert.equal(range1, range2)
  }

  g.test('Comparing two different Ranges') {
    let range1 = Range.new(start: 1, end: 10)
    let range2 = Range.new(start: 1, end: 15)

    assert.not_equal(range1, range2)
  }
}

test.group('std::range::Range.to_array') do (g) {
  g.test('Converting a Range with the same start and end to an Array') {
    let range = Range.new(start: 1, end: 1)

    assert.equal(range.to_array, [1])
  }

  g.test('Converting a Range with a different start and end to an Array') {
    let range = Range.new(start: 1, end: 3)

    assert.equal(range.to_array, [1, 2, 3])
  }

  g.test('Converting a Range with a smaller end to an Array') {
    let range = Range.new(start: 1, end: -5)

    assert.equal(range.to_array, [])
  }
}

test.group('std::integer::Integer...') do (g) {
  g.test('Generating a Range of Integer objects') {
    let range = 1..3

    assert.equal(range.start, 1)
    assert.equal(range.end, 3)
  }
}
