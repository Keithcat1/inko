import std::mirror::ModuleMirror
import std::process
import std::test
import std::test::assert
import std::test::runner::(AddTest, Client, RunnerState)
import std::test::test::Test
import std::test::test_group::TestGroup

def add_test -> ?Test {
  let client = Client.new(process.current)
  let state = RunnerState.new
  let group = TestGroup.new(name: 'group', client: client)

  group.test(name: 'Test name', body: lambda { 10 })

  (process.receive as AddTest).run(state)

  state.tests[0]
}

test.group('std::test::test_group::TestGroup.test') do (g) {
  g.test('Registering a new test') {
    assert.true(add_test)
  }

  g.test('Setting the name of the test') {
    assert.equal(add_test.name, 'Test name')
  }

  g.test('Setting the group name of the test') {
    assert.equal(add_test.group_name, 'group')
  }

  g.test('Setting the location of the test') {
    let mod_mirror = ModuleMirror.new(ThisModule)
    let test = add_test

    assert.equal(test.location.path, mod_mirror.source_path)
    assert.equal(test.location.line, 14)
  }
}
