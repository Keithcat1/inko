import std::fs
import std::mirror
import std::test
import std::test::assert
import std::time::SystemTime
import test::features

## The path to the file this test is defined in.
let CURRENT_FILE = mirror.reflect_module(ThisModule).path

## The SystemTime to use when a certain filesystem operation couldn't produce
## one.
let INVALID_TIME = SystemTime.new

## The path of a file that definitely does not exist.
let INVALID_FILE = 'does_not_exist.inko'

test.group('std::fs.size') do (g) {
  g.test('Obtaining the size of an existing file') {
    let size = try fs.size(CURRENT_FILE) else 0

    assert.greater(size, 0)
  }

  g.test('Obtaining the size of a non-existing file') {
    let size = try fs.size(INVALID_FILE) else -1

    assert.equal(size, -1)
  }
}

features.creation_time?.if_true {
  test.group('std::fs.created_at') do (g) {
    g.test('Obtaining the creation time of an existing file') {
      let time = try fs.created_at(CURRENT_FILE) else INVALID_TIME

      assert.not_equal(time, INVALID_TIME)
    }

    g.test('Obtaining the creation time of a non-existing file') {
      let time = try fs.created_at(INVALID_FILE) else INVALID_TIME

      assert.equal(time, INVALID_TIME)
    }
  }
}

features.modification_time?.if_true {
  test.group('std::fs.modified_at') do (g) {
    g.test('Obtaining the modification time of an existing file') {
      let time = try fs.modified_at(CURRENT_FILE) else INVALID_TIME

      assert.not_equal(time, INVALID_TIME)
    }

    g.test('Obtaining the modification time of a non-existing file') {
      let time = try fs.modified_at(INVALID_FILE) else INVALID_TIME

      assert.equal(time, INVALID_TIME)
    }
  }
}

features.access_time?.if_true {
  test.group('std::fs.accessed_at') do (g) {
    g.test('Obtaining the access time of an existing file') {
      let time = try fs.accessed_at(CURRENT_FILE) else INVALID_TIME

      assert.not_equal(time, INVALID_TIME)
    }

    g.test('Obtaining the access time of a non-existing file') {
      let time = try fs.accessed_at(INVALID_FILE) else INVALID_TIME

      assert.equal(time, INVALID_TIME)
    }
  }
}

test.group('std::fs.file?') do (g) {
  g.test('Testing an existing file') {
    assert.true(fs.file?(CURRENT_FILE))
  }

  g.test('Testing a non-existing file') {
    assert.false(fs.file?(INVALID_FILE))
  }

  g.test('Testing an existing directory') {
    assert.false(fs.file?('.'))
  }

  g.test('Testing a non-existing directory') {
    assert.false(fs.file?('does_not_exist'))
  }
}

test.group('std::fs.directory?') do (g) {
  g.test('Testing an existing directory') {
    assert.true(fs.directory?('.'))
  }

  g.test('Testing a non-existing directory') {
    assert.false(fs.directory?('this_does_not_exist'))
  }

  g.test('Testing an existing file') {
    assert.false(fs.directory?(CURRENT_FILE))
  }

  g.test('Testing a non-existing file') {
    assert.false(fs.directory?(INVALID_FILE))
  }
}

test.group('std::fs.exists?') do (g) {
  g.test('Testing an existing file') {
    assert.true(fs.exists?(CURRENT_FILE))
  }

  g.test('Testing a non-existing file') {
    assert.false(fs.exists?(INVALID_FILE))
  }

  g.test('Testing an existing directory') {
    assert.true(fs.exists?('.'))
  }

  g.test('Testing a non-existing directory') {
    assert.false(fs.exists?('does_not_exist'))
  }
}
