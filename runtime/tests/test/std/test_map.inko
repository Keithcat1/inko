import std::map::(self, Pair, RandomState)
import std::test::*

def tests(t: Tests) {
  t.group('std::map::RandomState.to_hasher') do (g) {
    g.test('Creating a DefaultHasher') {
      let state = RandomState.new
      let hasher1 = state.to_hasher
      let hasher2 = state.to_hasher

      10.hash(hasher1)
      10.hash(hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }
  }

  t.group('std::map::Pair.distance') do (g) {
    g.test('Obtaining the distance of a Pair') {
      let pair = Pair.new(key: 'key', value: 'value', hash: 0)

      try assert_equal(pair.distance, 0)
    }
  }

  t.group('std::map::Pair.replace_with?') do (g) {
    g.test('Checking if a Pair should be replaced with another Pair') {
      let pair1 = Pair.new(key: 'a', value: 'a', hash: 0)
      let pair2 = Pair.new(key: 'b', value: 'b', hash: 0)

      pair2.increase_distance

      try assert_true(pair1.replace_with?(pair2))
      try assert_false(pair2.replace_with?(pair1))
    }
  }

  t.group('std::map::Pair.reset_distance') do (g) {
    g.test('Resetting the distance of a Pair') {
      let pair = Pair.new(key: 'key', value: 'value', hash: 0)

      pair.increase_distance
      pair.reset_distance

      try assert_equal(pair.distance, 0)
    }
  }

  t.group('std::map::Pair.increase_distance') do (g) {
    g.test('Increasing the distance of a Pair') {
      let pair = Pair.new(key: 'key', value: 'value', hash: 0)

      pair.increase_distance

      try assert_equal(pair.distance, 1)
    }
  }

  t.group('std::map::Pair.reduce_distance') do (g) {
    g.test('Reducing the distance of a Pair') {
      let pair = Pair.new(key: 'key', value: 'value', hash: 0)

      pair.increase_distance
      pair.reduce_distance

      try assert_equal(pair.distance, 0)
    }
  }

  t.group('std::map::Pair.key') do (g) {
    g.test('Obtaining the key of a Pair') {
      let pair = Pair.new(key: 'key', value: 'value', hash: 0)

      try assert_equal(pair.key, 'key')
    }
  }

  t.group('std::map::Pair.value') do (g) {
    g.test('Obtaining the value of a Pair') {
      let pair = Pair.new(key: 'key', value: 'value', hash: 0)

      try assert_equal(pair.value, 'value')
    }
  }

  t.group('std::map::Pair.hash') do (g) {
    g.test('Obtaining the hash of a Pair') {
      let pair = Pair.new(key: 'key', value: 'value', hash: 123)

      try assert_equal(pair.hash, 123)
    }
  }

  t.group('std::map::Map.rehash') do (g) {
    g.test('Rehashing an empty Map') {
      let map = Map.new

      try assert_equal(map.buckets, Array.new(Option.none))

      map.rehash

      try assert_equal(map.buckets, Array.new(Option.none, Option.none))
    }

    g.test('Rehashing a Map with pairs') {
      let map = Map.new
      let pair1 = Pair.new(key: 'a', value: 'value', hash: 0)
      let pair2 = Pair.new(key: 'b', value: 'value', hash: 1)

      map.rehash
      map.insert_pair(pair: pair1)
      map.insert_pair(pair: pair2)

      # Moving the pair to a bucket it shouldn't be in allows us to test if
      # `resize` ends up moving pairs or not.
      pair2.increase_distance

      map.buckets[1] = Option.none
      map.buckets[2] = Option.some(pair2)

      map.rehash

      try assert_equal(pair1.distance, 0)
      try assert_equal(pair2.distance, 0)

      try assert_equal(map.buckets[0], Option.some(pair1))
      try assert_equal(map.buckets[1], Option.some(pair2))
      try assert_equal(map.buckets[2], Option.none)
    }
  }

  t.group('std::map::Map.insert_pair') do (g) {
    g.test('Inserting a Pair into a Map') {
      let map = Map.new
      let pair = Pair.new(key: 'key', value: 'value', hash: 0)

      map.insert_pair(pair)

      try assert_equal(map.length, 1)
      try assert_equal(map.buckets[0], Option.some(pair))
    }

    g.test('Inserting a Pair into an existing bucket in a Map') {
      let map = Map.new
      let pair1 = Pair.new(key: 'a', value: 'a', hash: 0)
      let pair2 = Pair.new(key: 'b', value: 'b', hash: 0)

      map.rehash
      map.insert_pair(pair1)
      map.insert_pair(pair2)

      try assert_equal(map.buckets[0], Option.some(pair1))
      try assert_equal(map.buckets[1], Option.some(pair2))

      try assert_equal(pair1.distance, 0)
      try assert_equal(pair2.distance, 1)
    }

    g.test('Inserting a Pair using an already used key') {
      let map = Map.new
      let pair1 = Pair.new(key: 'a', value: 'a', hash: 0)
      let pair2 = Pair.new(key: 'a', value: 'b', hash: 0)

      map.rehash
      map.insert_pair(pair1)
      map.insert_pair(pair2)

      try assert_equal(map.buckets[0], Option.some(pair2))
    }

    g.test('Inserting a Pair after an unused bucket') {
      let map = Map.new
      let pair1 = Pair.new(key: 'one', value: 1, hash: 4764096362064740795)
      let pair2 = Pair.new(key: 'two', value: 2, hash: -9161411174267222279)
      let pair3 = Pair.new(key: 'three', value: 3, hash: 902578265635837404)

      map.insert_pair(pair1)
      map.rehash

      map.insert_pair(pair2)
      map.rehash

      map.insert_pair(pair3)

      try assert_equal(map.buckets[0], Option.some(pair3))
      try assert_equal(map.buckets[1], Option.some(pair2))
      try assert_equal(map.buckets[2], Option.none)
      try assert_equal(map.buckets[3], Option.some(pair1))
    }
  }

  t.group('std::map::Map.remove') do (g) {
    g.test('Removing an existing key from a Map') {
      let map = Map.new

      map['a'] = 'b'

      try assert_equal(map.remove('a'), Option.some('b'))
      try assert_equal(map.buckets[0], Option.none)
    }

    g.test('Removing a non-existing key from a Map') {
      let map: Map!(String, String) = Map.new

      try assert_true(map.remove('a').none?)
    }

    g.test('Backwards shifting Pairs that follow the removed Pair') {
      let map = Map.new
      let pair1 = Pair.new(key: 'a', value: 'a', hash: 0)
      let pair2 = Pair.new(key: 'b', value: 'b', hash: 0)

      map.rehash
      map.insert_pair(pair1)
      map.insert_pair(pair2)
      map.remove(pair1.key)

      try assert_equal(map.buckets[0], Option.some(pair2))
      try assert_equal(pair2.distance, 0)
    }
  }

  t.group('std::map::Map.from_array') do (g) {
    g.test('Creating a Map without any keys and values') {
      let map = Map.from_array(Array.new, Array.new)

      try assert_equal(map, Map.new)
    }

    g.test('Creating a Map with keys but without values') {
      try assert_panic("Map.from_array(Array.new('name'), Array.new)")
    }

    g.test('Creating a Map with an equal number of keys and values') {
      let map = Map.from_array(
        Array.new('name', 'city'),
        Array.new('Alice', 'Amsterdam')
      )

      try assert_equal(map['name'], 'Alice')
      try assert_equal(map['city'], 'Amsterdam')
    }
  }

  t.group('std::map::Map.empty?') do (g) {
    g.test('Checking if a Map is empty') {
      let map = Map.new

      try assert_true(map.empty?)

      map['a'] = 'b'

      try assert_false(map.empty?)
    }
  }

  t.group('std::map::Map.each') do (g) {
    g.test('Iterating over the key-value pairs of an empty Map') {
      let mut iters = 0
      let map = Map.new

      map.each do (_, _) { iters += 1 }

      try assert_equal(iters, 0)
    }

    g.test('Iterating over the key-value pairs of a non-empty Map') {
      let mut key_total = 0
      let mut val_total = 0
      let map = Map.new

      map[1] = 10
      map[2] = 20

      map.each do (key, val) {
        key_total += key
        val_total += val
      }

      try assert_equal(key_total, 3)
      try assert_equal(val_total, 30)
    }
  }

  t.group('std::map::Map.iter') do (g) {
    g.test('Creating an Iterator for an empty Map') {
      let map = Map.new
      let iter = map.iter

      try assert_true(iter.next.none?)
    }

    g.test('Creating an Iterator for a Map with key-value pairs') {
      let map = Map.new

      map['name'] = 'Alice'

      let iter = map.iter
      let pair = iter.next

      try assert_true(pair.some?)
      try assert_equal(pair.get.key, 'name')
      try assert_equal(pair.get.value, 'Alice')
    }

    g.test('Iterators will skip trailing empty buckets') {
      let map = Map.new
      let pair1 = Pair.new(key: 'a', value: 'value', hash: 0)
      let pair2 = Pair.new(key: 'b', value: 'value', hash: 1)

      map.rehash
      map.insert_pair(pair: pair1)
      map.insert_pair(pair: pair2)
      map.rehash

      let iter = map.iter

      try assert_equal(iter.next, Option.some(pair1))
      try assert_equal(iter.next, Option.some(pair2))
      try assert_true(iter.next.none?)
    }
  }

  t.group('std::map::Map.keys') do (g) {
    g.test('Creating a Keys Iterator for an empty Map') {
      let map: Map!(String, String) = Map.new
      let iter = map.keys

      try assert_true(iter.next.none?)
    }

    g.test('Creating a Keys Iterator for a Map with key-value pairs') {
      let map = Map.new

      map['name'] = 'Alice'

      let iter = map.keys

      try assert_equal(iter.next, Option.some('name'))
      try assert_true(iter.next.none?)
    }
  }

  t.group('std::map::Map.values') do (g) {
    g.test('Creating a Values Iterator for an empty Map') {
      let map: Map!(String, String) = Map.new
      let iter = map.values

      try assert_true(iter.next.none?)
    }

    g.test('Creating a Values Iterator for a Map with key-value pairs') {
      let map = Map.new

      map['name'] = 'Alice'

      let iter = map.values

      try assert_equal(iter.next, Option.some('Alice'))
      try assert_true(iter.next.none?)
    }
  }

  t.group('std::map::Map.==') do (g) {
    g.test('Comparing two identical Map instances') {
      let map1 = Map.new
      let map2 = Map.new

      map1['name'] = 'Alice'
      map2['name'] = 'Alice'

      try assert_equal(map1, map2)
    }

    g.test('Comparing two different Map instances') {
      let map1 = Map.new
      let map2 = Map.new
      let map3 = Map.new

      map2['name'] = 'Alice'
      map3['foo'] = 'bar'

      try assert_not_equal(map1, map2)
      try assert_not_equal(map2, map3)
    }
  }

  t.group('std::map::Map.key?') do (g) {
    g.test('Checking if a Map defines a key') {
      let map = Map.new

      map['name'] = 'Alice'

      try assert_true(map.key?('name'))
      try assert_false(map.key?('city'))
    }
  }

  t.group('std::map::Map.set') do (g) {
    g.test('Setting the value of a non-existing key') {
      let map = Map.new

      try assert_equal(map.set('city', 'Amsterdam'), map)
      try assert_equal(map['city'], 'Amsterdam')
    }

    g.test('Setting the value of an existing key') {
      let map = Map.new

      map.set('name', 'Alice')
      map.set('name', 'Bob')

      try assert_equal(map['name'], 'Bob')
    }
  }

  t.group('std::map::Map.[]') do (g) {
    g.test('Obtaining the value of a non-existing key') {
      try assert_panic("Map.new['name']")
    }

    g.test('Obtaining the value of an existing key') {
      let map = Map.new

      map['name'] = 'Alice'

      try assert_equal(map['name'], 'Alice')
    }
  }

  t.group('std::map::Map.get') do (g) {
    g.test('Obtaining the value of a non-existing key') {
      let map: Map!(String, String) = Map.new

      try assert_true(map.get('name').none?)
    }

    g.test('Obtaining the value of an existing key') {
      let map = Map.new

      map['name'] = 'Alice'

      try assert_equal(map.get('name'), Option.some('Alice'))
    }
  }

  t.group('std::map::Map.[]=') do (g) {
    g.test('Setting the value of a non-existing key') {
      let map = Map.new

      map['name'] = 'Alice'

      try assert_equal(map['city'] = 'Amsterdam', 'Amsterdam')
      try assert_equal(map['city'], 'Amsterdam')
    }

    g.test('Setting the value of an existing key') {
      let map = Map.new

      map['name'] = 'Alice'

      try assert_equal(map['name'] = 'Bob', 'Bob')
      try assert_equal(map['name'], 'Bob')
    }
  }

  t.group('std::map::Map.length') do (g) {
    g.test('Obtaining the length of an empty Map') {
      try assert_equal(Map.new.length, 0)
    }

    g.test('Obtaining the length of a Map with key-value pairs') {
      let map1 = Map.new
      let map2 = Map.new

      map1['name'] = 'Alice'
      map2['name'] = 'Alice'
      map2['city'] = 'Amsterdam'

      try assert_equal(map1.length, 1)
      try assert_equal(map2.length, 2)
    }
  }
}
