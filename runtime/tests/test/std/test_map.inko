import std::map::(self, DefaultHasher, Pair, RandomState)
import std::test
import std::test::assert

test.group('std::map::DefaultHasher.write_integer') do (g) {
  g.test('Hashing an Integer') {
    let hasher = DefaultHasher.new(1, 2)

    hasher.write_integer(10)

    let hash1 = hasher.to_hash

    hasher.reset
    hasher.write_integer(10)

    let hash2 = hasher.to_hash

    assert.equal(hash1, hash2)
  }
}

test.group('std::map::DefaultHasher.write_float') do (g) {
  g.test('Hashing an Float') {
    let hasher = DefaultHasher.new(1, 2)

    hasher.write_float(10.0)

    let hash1 = hasher.to_hash

    hasher.reset
    hasher.write_float(10.0)

    let hash2 = hasher.to_hash

    assert.equal(hash1, hash2)
  }
}

test.group('std::map::DefaultHasher.write_string') do (g) {
  g.test('Hashing a String') {
    let hasher = DefaultHasher.new(1, 2)

    hasher.write_string('hello')

    let hash1 = hasher.to_hash

    hasher.reset
    hasher.write_string('hello')

    let hash2 = hasher.to_hash

    assert.equal(hash1, hash2)
  }
}

test.group('std::map::DefaultHasher.write_boolean') do (g) {
  g.test('Hashing a Boolean') {
    let hasher = DefaultHasher.new(1, 2)

    hasher.write_boolean(True)

    let hash1 = hasher.to_hash

    hasher.reset
    hasher.write_boolean(True)

    let hash2 = hasher.to_hash

    assert.equal(hash1, hash2)
  }
}

test.group('std::map::DefaultHasher.reset') do (g) {
  g.test('Resetting the internal state of a hasher') {
    let hasher = DefaultHasher.new(1, 2)
    let hash1 = hasher.to_hash

    hasher.write_integer(10)
    hasher.reset

    let hash2 = hasher.to_hash

    assert.equal(hash1, hash2)
  }
}

test.group('std::map::RandomState.to_hasher') do (g) {
  g.test('Creating a DefaultHasher') {
    let state = RandomState.new
    let hasher1 = state.to_hasher
    let hasher2 = state.to_hasher

    10.hash(hasher1)
    10.hash(hasher2)

    assert.equal(hasher1.to_hash, hasher2.to_hash)
  }
}

test.group('std::map::Pair.distance') do (g) {
  g.test('Obtaining the distance of a Pair') {
    let pair = Pair.new(key: 'key', value: 'value', hash: 0)

    assert.equal(pair.distance, 0)
  }
}

test.group('std::map::Pair.replace_with?') do (g) {
  g.test('Checking if a Pair should be replaced with another Pair') {
    let pair1 = Pair.new(key: 'a', value: 'a', hash: 0)
    let pair2 = Pair.new(key: 'b', value: 'b', hash: 0)

    pair2.increase_distance

    assert.true(pair1.replace_with?(pair2))
    assert.false(pair2.replace_with?(pair1))
  }
}

test.group('std::map::Pair.reset_distance') do (g) {
  g.test('Resetting the distance of a Pair') {
    let pair = Pair.new(key: 'key', value: 'value', hash: 0)

    pair.increase_distance
    pair.reset_distance

    assert.equal(pair.distance, 0)
  }
}

test.group('std::map::Pair.increase_distance') do (g) {
  g.test('Increasing the distance of a Pair') {
    let pair = Pair.new(key: 'key', value: 'value', hash: 0)

    pair.increase_distance

    assert.equal(pair.distance, 1)
  }
}

test.group('std::map::Pair.reduce_distance') do (g) {
  g.test('Reducing the distance of a Pair') {
    let pair = Pair.new(key: 'key', value: 'value', hash: 0)

    pair.increase_distance
    pair.reduce_distance

    assert.equal(pair.distance, 0)
  }
}

test.group('std::map::Pair.key') do (g) {
  g.test('Obtaining the key of a Pair') {
    let pair = Pair.new(key: 'key', value: 'value', hash: 0)

    assert.equal(pair.key, 'key')
  }
}

test.group('std::map::Pair.value') do (g) {
  g.test('Obtaining the value of a Pair') {
    let pair = Pair.new(key: 'key', value: 'value', hash: 0)

    assert.equal(pair.value, 'value')
  }
}

test.group('std::map::Pair.hash') do (g) {
  g.test('Obtaining the hash of a Pair') {
    let pair = Pair.new('key', 'value', 123)

    assert.equal(pair.hash, 123)
  }
}

test.group('std::map::Map.rehash') do (g) {
  g.test('Rehashing an empty Map') {
    let map = Map.new

    assert.equal(map.buckets, [])

    map.rehash

    assert.equal(map.buckets, [Nil, Nil])
  }

  g.test('Rehashing a Map with pairs') {
    let map = Map.new
    let pair1 = Pair.new(key: 'a', value: 'value', hash: 0)
    let pair2 = Pair.new(key: 'b', value: 'value', hash: 1)

    map.rehash
    map._insert_pair(pair: pair1)
    map._insert_pair(pair: pair2)

    # Moving the pair to a bucket it shouldn't be in allows us to test if
    # `resize` ends up moving pairs or not.
    pair2.increase_distance

    map.buckets[1] = Nil
    map.buckets[2] = pair2

    map.rehash

    assert.equal(pair1.distance, 0)
    assert.equal(pair2.distance, 0)

    assert.equal(map.buckets[0], pair1)
    assert.equal(map.buckets[1], pair2)
    assert.equal(map.buckets[2], Nil)
  }
}

test.group('std::map::Map._insert_pair') do (g) {
  g.test('Inserting a Pair into a Map') {
    let map = Map.new
    let pair = Pair.new(key: 'key', value: 'value', hash: 0)

    map._insert_pair(pair)

    assert.equal(map.length, 1)
    assert.equal(map.buckets[0], pair)
  }

  g.test('Inserting a Pair into an existing bucket in a Map') {
    let map = Map.new
    let pair1 = Pair.new(key: 'a', value: 'a', hash: 0)
    let pair2 = Pair.new(key: 'b', value: 'b', hash: 0)

    map.rehash
    map._insert_pair(pair1)
    map._insert_pair(pair2)

    assert.equal(map.buckets[0], pair1)
    assert.equal(map.buckets[1], pair2)

    assert.equal(pair1.distance, 0)
    assert.equal(pair2.distance, 1)
  }

  g.test('Inserting a Pair using an already used key') {
    let map = Map.new
    let pair1 = Pair.new(key: 'a', value: 'a', hash: 0)
    let pair2 = Pair.new(key: 'a', value: 'b', hash: 0)

    map.rehash
    map._insert_pair(pair1)
    map._insert_pair(pair2)

    assert.equal(map.buckets[0], pair2)
  }

  g.test('Inserting a Pair after an unused bucket') {
    let map = Map.new
    let pair1 = Pair.new(key: 'one', value: 1, hash: 4764096362064740795)
    let pair2 = Pair.new(key: 'two', value: 2, hash: -9161411174267222279)
    let pair3 = Pair.new(key: 'three', value: 3, hash: 902578265635837404)

    map._insert_pair(pair1)
    map.rehash

    map._insert_pair(pair2)
    map.rehash

    map._insert_pair(pair3)

    assert.equal(map.buckets[0], pair3)
    assert.equal(map.buckets[1], pair2)
    assert.equal(map.buckets[2], Nil)
    assert.equal(map.buckets[3], pair1)
  }
}

test.group('std::map::Map.remove') do (g) {
  g.test('Removing an existing key from a Map') {
    let map = %['a': 'b']

    assert.equal(map.remove('a'), 'b')
    assert.equal(map.buckets[0], Nil)
  }

  g.test('Removing a non-existing key from a Map') {
    let map: Map!(String, String) = Map.new

    assert.equal(map.remove('a'), Nil)
  }

  g.test('Backwards shifting Pairs that follow the removed Pair') {
    let map = Map.new
    let pair1 = Pair.new(key: 'a', value: 'a', hash: 0)
    let pair2 = Pair.new(key: 'b', value: 'b', hash: 0)

    map.rehash
    map._insert_pair(pair1)
    map._insert_pair(pair2)
    map.remove(pair1.key)

    assert.equal(map.buckets[0], pair2)
    assert.equal(pair2.distance, 0)
  }
}

test.group('Map literals') do (g) {
  g.test('Creating an empty Map') {
    assert.equal(%[], Map.new)
  }

  g.test('Creating a Map with keys and values') {
    let expected = Map.new

    expected['name'] = 'Alice'
    expected['city'] = 'Amsterdam'

    assert.equal(%['name': 'Alice', 'city': 'Amsterdam'], expected)
  }
}

test.group('std::map::Map.from_array') do (g) {
  g.test('Creating a Map without any keys and values') {
    let map = Map.from_array([], [])

    assert.equal(map, %[])
  }

  g.test('Creating a Map with keys but without values') {
    assert.panic {
      Map.from_array(['name'], [])
    }
  }

  g.test('Creating a Map with an equal number of keys and values') {
    let map = Map.from_array(['name', 'city'], ['Alice', 'Amsterdam'])

    assert.equal(map['name'], 'Alice')
    assert.equal(map['city'], 'Amsterdam')
  }
}

test.group('std::map::Map.empty?') do (g) {
  g.test('Checking if a Map is empty') {
    assert.true(%[].empty?)
    assert.false(%['a': 'b'].empty?)
  }
}

test.group('std::map::Map.each') do (g) {
  g.test('Iterating over the key-value pairs of an empty Map') {
    let mut iters = 0

    %[].each do (_, _) {
      iters += 1
    }

    assert.equal(iters, 0)
  }

  g.test('Iterating over the key-value pairs of a non-empty Map') {
    let mut key_total = 0
    let mut val_total = 0

    %[1: 10, 2: 20].each do (key, val) {
      key_total += key
      val_total += val
    }

    assert.equal(key_total, 3)
    assert.equal(val_total, 30)
  }
}

test.group('std::map::Map.iter') do (g) {
  g.test('Creating an Iterator for an empty Map') {
    let map = %[]
    let iter = map.iter

    assert.false(iter.next?)
    assert.equal(iter.next, Nil)
  }

  g.test('Creating an Iterator for a Map with key-value pairs') {
    let map = %['name': 'Alice']
    let iter = map.iter

    assert.true(iter.next?)

    let pair = iter.next

    assert.equal(pair.key, 'name')
    assert.equal(pair.value, 'Alice')
  }
}

test.group('std::map::Map.keys') do (g) {
  g.test('Creating a Keys Iterator for an empty Map') {
    let map: Map!(String, String) = %[]
    let iter = map.keys

    assert.false(iter.next?)
    assert.equal(iter.next, Nil)
  }

  g.test('Creating a Keys Iterator for a Map with key-value pairs') {
    let map = %['name': 'Alice']
    let iter = map.keys

    assert.true(iter.next?)
    assert.equal(iter.next, 'name')
    assert.false(iter.next?)
  }
}

test.group('std::map::Map.values') do (g) {
  g.test('Creating a Values Iterator for an empty Map') {
    let map: Map!(String, String) = %[]
    let iter = map.values

    assert.false(iter.next?)
    assert.equal(iter.next, Nil)
  }

  g.test('Creating a Values Iterator for a Map with key-value pairs') {
    let map = %['name': 'Alice']
    let iter = map.values

    assert.true(iter.next?)
    assert.equal(iter.next, 'Alice')
    assert.false(iter.next?)
  }
}

test.group('std::map::Map.==') do (g) {
  g.test('Comparing two identical Map instances') {
    assert.equal(%['name': 'Alice'], %['name': 'Alice'])
  }

  g.test('Comparing two different Map instances') {
    assert.not_equal(%[], %['name': 'Alice'])
    assert.not_equal(%['foo': 'bar'], %['name': 'Alice'])
  }
}

test.group('std::map::Map.key?') do (g) {
  g.test('Checking if a Map defines a key') {
    let map = %['name': 'Alice']

    assert.true(map.key?('name'))
    assert.false(map.key?('city'))
  }
}

test.group('std::map::Map.[]') do (g) {
  g.test('Obtaining the value of a non-existing key') {
    let map = %['name': 'Alice']

    assert.equal(map['city'], Nil)
  }

  g.test('Obtaining the value of an existing key') {
    let map = %['name': 'Alice']

    assert.equal(map['name'], 'Alice')
  }
}

test.group('std::map::Map.[]=') do (g) {
  g.test('Setting the value of a non-existing key') {
    let map = %['name': 'Alice']

    assert.equal(map['city'] = 'Amsterdam', 'Amsterdam')
    assert.equal(map['city'], 'Amsterdam')
  }

  g.test('Setting the value of an existing key') {
    let map = %['name': 'Alice']

    assert.equal(map['name'] = 'Bob', 'Bob')
    assert.equal(map['name'], 'Bob')
  }
}

test.group('std::map::Map.length') do (g) {
  g.test('Obtaining the length of an empty Map') {
    assert.equal(%[].length, 0)
  }

  g.test('Obtaining the length of a Map with key-value pairs') {
    assert.equal(%['name': 'Alice'].length, 1)
    assert.equal(%['name': 'Alice', 'city': 'Amsterdam'].length, 2)
  }
}
