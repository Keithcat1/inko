import std::ffi::(
  self, Function, Layout, LayoutBuilder, Library, Member, Pointer, Struct, Type
)
import std::process
import std::test
import std::test::assert

def libc_paths -> Array!(String) {
  Array.new(
    # Linux, sometimes a GNU ld script
    'libc.so',

    # Linux, glibc 2.x
    'libc.so.6',

    # CI uses Ubuntu, which puts libc here
    '/lib/x86_64-linux-gnu/libc.so.6',

    # Mac OS
    'libSystem.dylib',

    # Windows
    'msvcrt.dll'
  )
}

# The C `tm` structure, see `man ctime` for more information about this
# structure.
def tm_struct -> Layout {
  ffi.struct do (struct) {
    struct['tm_sec'] = ffi.i32
    struct['tm_min'] = ffi.i32

    struct['tm_hour'] = ffi.i32
    struct['tm_mday'] = ffi.i32

    struct['tm_mon'] = ffi.i32
    struct['tm_year'] = ffi.i32

    struct['tm_wday'] = ffi.i32
    struct['tm_yday'] = ffi.i32

    struct['tm_isdst'] = ffi.i32

    struct['tm_gmtoff'] = ffi.i64
    struct['tm_zone'] = ffi.string
  }
}

def allocate!(R)(size: Integer, block: do (Pointer) -> R) -> R {
  let libc = try! Library.new(libc_paths)
  let calloc = try! libc.function(
    name: 'calloc',
    arguments: Array.new(ffi.size_t, ffi.size_t),
    returns: ffi.pointer
  )

  let free = try! libc.function(
    name: 'free',
    arguments: Array.new(ffi.pointer),
    returns: ffi.void
  )

  let pointer = calloc.call(1, size) as Pointer

  pointer.null?.if_true {
    let error = `calloc() failed to allocate {size} bytes of memory`

    process.panic(error)
  }

  # We defer _after_ the above check, otherwise we may try to free() a NULL
  # pointer in the event of an allocation failure.
  process.defer { free.call(pointer) }
  block.call(pointer)
}

test.group('std::ffi::Pointer.null') do (g) {
  g.test('Creating a NULL pointer') {
    assert.true(Pointer.null.null?)
  }
}

test.group('std::ffi::Pointer.null?') do (g) {
  g.test('Checking if a Pointer is a NULL pointer') {
    assert.true(Pointer.new(0x0).null?)
    assert.false(Pointer.new(0x1).null?)
  }
}

test.group('std::ffi::Pointer.address') do (g) {
  g.test('Obtaining the address of a Pointer') {
    assert.equal(Pointer.new(0x4).address, 0x4)
  }
}

test.group('std::ffi::Pointer.read') do (g) {
  g.test('Reading a Pointer from a Pointer') {
    allocate(ffi.pointer.size) do (pointer) {
      let value = pointer.read(ffi.pointer) as Pointer

      assert.true(value.null?)
    }
  }

  g.test('Reading a Float from a Pointer') {
    allocate(ffi.f64.size) do (pointer) {
      assert.equal(pointer.read(ffi.f64) as Float, 0.0)
    }
  }

  g.test('Reading an Integer from a Pointer') {
    allocate(ffi.i32.size) do (pointer) {
      assert.equal(pointer.read(ffi.i32) as Integer, 0)
    }
  }
}

test.group('std::ffi::Pointer.write') do (g) {
  g.test('Writing the address of a Pointer to a Pointer') {
    allocate(ffi.pointer.size) do (pointer) {
      allocate(ffi.i32.size) do (target) {
        pointer.write(ffi.pointer, target)

        assert.equal(pointer.read(ffi.pointer) as Pointer, target)
      }
    }
  }

  g.test('Writing a String to a Pointer') {
    allocate(5) do (pointer) {
      pointer.write(ffi.string, 'inko')

      assert.equal(pointer.read(ffi.string) as String, 'inko')
    }
  }

  g.test('Writing a ByteArray to a Pointer') {
    allocate(5) do (pointer) {
      let bytes = 'inko'.to_byte_array

      pointer.write(ffi.byte_array, bytes)

      assert.equal(pointer.read(ffi.byte_array) as ByteArray, bytes)
    }
  }

g.test('Writing a float to a Pointer') {
    let type = ffi.f32

    allocate(type.size) do (pointer) {
      pointer.write(type, 1.5)

      assert.equal(pointer.read(type) as Float, 1.5)
    }
  }

  g.test('Writing a double to a Pointer') {
    let type = ffi.f64

    allocate(type.size) do (pointer) {
      pointer.write(type, 1.5)

      assert.equal(pointer.read(type) as Float, 1.5)
    }
  }

  g.test('Writing a char to a Pointer') {
    let type = ffi.i8

    allocate(type.size) do (pointer) {
      pointer.write(type, 42)

      assert.equal(pointer.read(type) as Integer, 42)
    }
  }

  g.test('Writing a short to a Pointer') {
    let type = ffi.i16

    allocate(type.size) do (pointer) {
      pointer.write(type, 42)

      assert.equal(pointer.read(type) as Integer, 42)
    }
  }

  g.test('Writing an int to a Pointer') {
    let type = ffi.i32

    allocate(type.size) do (pointer) {
      pointer.write(type, 42)

      assert.equal(pointer.read(type) as Integer, 42)
    }
  }

  g.test('Writing a long to a Pointer') {
    let type = ffi.i64

    allocate(type.size) do (pointer) {
      pointer.write(type, 42)

      assert.equal(pointer.read(type) as Integer, 42)
    }
  }

  g.test('Writing an unsigned char to a Pointer') {
    let type = ffi.u8

    allocate(type.size) do (pointer) {
      pointer.write(type, 42)

      assert.equal(pointer.read(type) as Integer, 42)
    }
  }

  g.test('Writing an unsigned short to a Pointer') {
    let type = ffi.i16

    allocate(type.size) do (pointer) {
      pointer.write(type, 42)

      assert.equal(pointer.read(type) as Integer, 42)
    }
  }

  g.test('Writing an unsigned int to a Pointer') {
    let type = ffi.u32

    allocate(type.size) do (pointer) {
      pointer.write(type, 42)

      assert.equal(pointer.read(type) as Integer, 42)
    }
  }

  g.test('Writing an unsigned long to a Pointer') {
    let type = ffi.u64

    allocate(type.size) do (pointer) {
      pointer.write(type, 42)

      assert.equal(pointer.read(type) as Integer, 42)
    }
  }

  g.test('Writing a size_t to a Pointer') {
    let type = ffi.size_t

    allocate(type.size) do (pointer) {
      pointer.write(type, 42)

      assert.equal(pointer.read(type) as Integer, 42)
    }
  }
}

test.group('std::ffi::Pointer.==') do (g) {
  g.test('Comparing two Pointers for equality') {
    assert.equal(Pointer.null, Pointer.null)
    assert.not_equal(Pointer.null, Pointer.new(0x1))
  }
}

test.group('std::ffi::Library.new') do (g) {
  g.test('Opening a non existing library') {
    assert.panic {
      try! Library.new(Array.new('does-not-exist.so'))
    }
  }

  g.test('Opening a non existing library, with an existing as a fallback') {
    assert.no_panic {
      let paths = Array.new('does-not-exist.so')

      paths.append(libc_paths)

      try! Library.new(paths)
    }
  }

  g.test('Opening an existing library') {
    assert.no_panic {
      try! Library.new(libc_paths)
    }
  }
}

test.group('std::ffi::Library.variable') do (g) {
  g.test('Obtaining a Pointer to an existing variable') {
    assert.no_panic {
      let libc = try! Library.new(libc_paths)

      try! libc.variable('malloc')
    }
  }

  g.test('Obtaining a Pointer using a non existing variable') {
    assert.panic {
      let libc = try! Library.new(libc_paths)

      try! libc.variable('kittens')
    }
  }
}

test.group('std::ffi::Library.close') do (g) {
  g.test('Closing a Library') {
    assert.no_panic {
      try! { Library.new(libc_paths) }.close
    }
  }
}

test.group('std::ffi::Library.function') do (g) {
  g.test('Obtaining a Function using an existing function name') {
    assert.no_panic {
      let libc = try! Library.new(libc_paths)

      try! libc.function(
        name: 'malloc',
        arguments: Array.new(ffi.size_t),
        returns: ffi.pointer
      )
    }
  }

  g.test('Obtaining a Function using a non existing function name') {
    assert.panic {
      let libc = try! Library.new(libc_paths)

      try! libc.function(
        name: 'kittens',
        arguments: Array.new,
        returns: ffi.pointer
      )
    }
  }
}

test.group('std::ffi::Function.new') do (g) {
  g.test('Obtaining a Function using an existing function name') {
    assert.no_panic {
      let libc = try! Library.new(libc_paths)

      try! Function.new(
        library: libc,
        name: 'malloc',
        arguments: Array.new(ffi.size_t),
        returns: ffi.pointer
      )
    }
  }

  g.test('Obtaining a Function using a non existing function name') {
    assert.panic {
      let libc = try! Library.new(libc_paths)

      try! Function.new(
        library: libc,
        name: 'kittens',
        arguments: Array.new,
        returns: ffi.pointer
      )
    }
  }
}

test.group('std::ffi::Function.call') do (g) {
  g.test('Calling a function with a valid number of arguments') {
    let libc = try! Library.new(libc_paths)
    let time_func = try! libc.function('time', Array.new(ffi.pointer), ffi.i64)
    let timestamp = time_func.call(Pointer.null) as Integer

    assert.true(timestamp.positive?)
  }

  g.test('Calling a Function with an invalid number of arguments') {
    assert.panic {
      let libc = try! Library.new(libc_paths)
      let time = try! libc.function('time', Array.new(ffi.pointer), ffi.i64)

      time.call
    }
  }
}

test.group('std::ffi::Member.name') do (g) {
  g.test('Obtaining the name of a Member') {
    let member = Member.new(name: 'tm_sec', type: ffi.i32, offset: 0)

    assert.equal(member.name, 'tm_sec')
  }
}

test.group('std::ffi::Member.type') do (g) {
  g.test('Obtaining the type of a Member') {
    let member = Member.new(name: 'tm_sec', type: ffi.i32, offset: 0)

    assert.equal(member.type, ffi.i32)
  }
}

test.group('std::ffi::Member.offset') do (g) {
  g.test('Obtaining the offset of a Member') {
    let member = Member.new(name: 'tm_sec', type: ffi.i32, offset: 4)

    assert.equal(member.offset, 4)
  }
}

test.group('std::ffi::Layout.alignment') do (g) {
  g.test('Obtaining the alignment of a Layout') {
    let layout = Layout.new(members: Map.new, alignment: 8, size: 4)

    assert.equal(layout.alignment, 8)
  }
}

test.group('std::ffi::Layout.size') do (g) {
  g.test('Obtaining the size of a Layout') {
    let layout = Layout.new(members: Map.new, alignment: 8, size: 4)

    assert.equal(layout.size, 4)
  }
}

test.group('std::ffi::Layout.[]') do (g) {
  g.test('Obtaining a Member using a valid name') {
    let member = Member.new(name: 'tm_sec', type: ffi.i32, offset: 0)
    let members = Map.new

    members['tm_sec'] = member

    let layout = Layout.new(members: members, alignment: 8, size: 4)

    assert.true(layout['tm_sec'].same_object?(member))
  }

  g.test('Obtaining a Member using an invalid name') {
    assert.panic {
      let layout = Layout.new(members: Map.new, alignment: 8, size: 4)

      layout['tm_sec']
    }
  }
}

test.group('std::ffi::Layout.from_pointer') do (g) {
  g.test('Creating a Struct from a Layout using a Pointer') {
    let tm = tm_struct

    allocate(tm.size) do (pointer) {
      let struct = tm.from_pointer(pointer)

      assert.equal(struct.size, tm.size)
      assert.equal(struct.alignment, tm.alignment)
    }
  }
}

test.group('std::ffi::Struct.size') do (g) {
  g.test('Obtaining the size of a Struct') {
    let layout = Layout.new(members: Map.new, alignment: 8, size: 4)
    let struct = Struct.new(pointer: Pointer.null, layout: layout)

    assert.equal(struct.size, 4)
  }
}

test.group('std::ffi::Struct.alignment') do (g) {
  g.test('Obtaining the alignment of a Struct') {
    let layout = Layout.new(members: Map.new, alignment: 8, size: 4)
    let struct = Struct.new(pointer: Pointer.null, layout: layout)

    assert.equal(struct.alignment, 8)
  }
}

test.group('std::ffi::Struct.pointer') do (g) {
  g.test('Obtaining the alignment of a Struct') {
    let layout = Layout.new(members: Map.new, alignment: 8, size: 4)
    let struct = Struct.new(pointer: Pointer.null, layout: layout)

    assert.equal(struct.pointer, Pointer.null)
  }
}

test.group('std::ffi::Struct.[]') do (g) {
  g.test('Reading the value of a valid Struct member') {
    let tm = tm_struct

    allocate(tm.size) do (pointer) {
      let struct = Struct.new(pointer: pointer, layout: tm)

      assert.equal(struct['tm_sec'] as Integer, 0)
    }
  }

  g.test('Reading the value of an invalid Struct member') {
    assert.panic {
      let struct = Struct.new(pointer: Pointer.null, layout: tm_struct)

      struct['kittens']
    }
  }
}

test.group('std::ffi::Struct.[]=') do (g) {
  g.test('Writing a value to a valid Struct member') {
    let tm = tm_struct

    allocate(tm.size) do (pointer) {
      let struct = Struct.new(pointer: pointer, layout: tm)

      struct['tm_sec'] = 42

      assert.equal(struct['tm_sec'] as Integer, 42)
    }
  }

  g.test('Writing a value to an invalid Struct member') {
    assert.panic {
      let struct = Struct.new(pointer: Pointer.null, layout: tm_struct)

      struct['kittens'] = 42
    }
  }
}

test.group('std::ffi::LayoutBuilder.[]=') do (g) {
  g.test('Defining a new struct member') {
    assert.no_panic {
      let builder = LayoutBuilder.new

      builder['tm_sec'] = ffi.i32
    }
  }

  g.test('Defining an existing struct member') {
    assert.panic {
      let builder = LayoutBuilder.new

      builder['tm_sec'] = ffi.i32
      builder['tm_sec'] = ffi.i32
    }
  }
}

test.group('std::ffi::LayoutBuilder.to_layout') do (g) {
  g.test('Creating a Layout with padding') {
    let builder = LayoutBuilder.new

    builder['foo'] = ffi.i32
    builder['bar'] = ffi.i64

    let layout = builder.to_layout

    assert.equal(layout.alignment, 8)
    assert.equal(layout.size, 16)
    assert.equal(layout['foo'].offset, 0)
    assert.equal(layout['bar'].offset, 8)
  }

  g.test('Creating a Layout without padding') {
    let builder = LayoutBuilder.new

    builder.disable_padding

    builder['foo'] = ffi.i32
    builder['bar'] = ffi.i64

    let layout = builder.to_layout

    assert.equal(layout.alignment, 1)
    assert.equal(layout.size, 12)
    assert.equal(layout['foo'].offset, 0)
    assert.equal(layout['bar'].offset, 4)
  }
}

test.group('std::ffi.struct') do (g) {
  g.test('Creating a Layout') {
    let layout = ffi.struct do (struct) {
      struct['foo'] = ffi.i32
      struct['bar'] = ffi.i64
    }

    assert.equal(layout.alignment, 8)
    assert.equal(layout.size, 16)
    assert.equal(layout['foo'].offset, 0)
    assert.equal(layout['bar'].offset, 8)
  }
}

test.group('std::ffi::Type.to_integer') do (g) {
  g.test('Obtaining the type ID of a Type') {
    let type = Type.new(2)

    assert.equal(type.to_integer, 2)
  }
}

test.group('std::ffi::Type.size') do (g) {
  g.test('Obtaining the size of a Type') {
    let type = Type.new(2)

    assert.equal(type.size, 8)
  }
}

test.group('std::ffi::Type.alignment') do (g) {
  g.test('Obtaining the alignment of a Type') {
    let type = Type.new(2)

    assert.equal(type.alignment, 8)
  }
}

test.group('std::ffi.void') do (g) {
  g.test('Creating a new void type') {
    assert.equal(ffi.void.to_integer, 0)
  }
}

test.group('std::ffi.pointer') do (g) {
  g.test('Creating a new pointer type') {
    assert.equal(ffi.pointer.to_integer, 1)
  }
}

test.group('std::ffi.f64') do (g) {
  g.test('Creating a new double type') {
    assert.equal(ffi.f64.to_integer, 2)
  }
}

test.group('std::ffi.f32') do (g) {
  g.test('Creating a new float type') {
    assert.equal(ffi.f32.to_integer, 3)
  }
}

test.group('std::ffi.i8') do (g) {
  g.test('Creating a new char type') {
    assert.equal(ffi.i8.to_integer, 4)
  }
}

test.group('std::ffi.i16') do (g) {
  g.test('Creating a new short type') {
    assert.equal(ffi.i16.to_integer, 5)
  }
}

test.group('std::ffi.i32') do (g) {
  g.test('Creating a new int type') {
    assert.equal(ffi.i32.to_integer, 6)
  }
}

test.group('std::ffi.i64') do (g) {
  g.test('Creating a new long type') {
    assert.equal(ffi.i64.to_integer, 7)
  }
}

test.group('std::ffi.u8') do (g) {
  g.test('Creating a new unsigned char type') {
    assert.equal(ffi.u8.to_integer, 8)
  }
}

test.group('std::ffi.u16') do (g) {
  g.test('Creating a new unsigned short type') {
    assert.equal(ffi.u16.to_integer, 9)
  }
}

test.group('std::ffi.u32') do (g) {
  g.test('Creating a new unsigned int type') {
    assert.equal(ffi.u32.to_integer, 10)
  }
}

test.group('std::ffi.u64') do (g) {
  g.test('Creating a new unsigned long type') {
    assert.equal(ffi.u64.to_integer, 11)
  }
}

test.group('std::ffi.size_t') do (g) {
  g.test('Creating a new size_t type') {
    assert.equal(ffi.size_t.to_integer, 14)
  }
}

test.group('std::ffi.string') do (g) {
  g.test('Creating a new string type') {
    assert.equal(ffi.string.to_integer, 12)
  }
}

test.group('std::ffi.byte_array') do (g) {
  g.test('Creating a new byte array type') {
    assert.equal(ffi.byte_array.to_integer, 13)
  }
}
