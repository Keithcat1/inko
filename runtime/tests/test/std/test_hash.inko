import std::hash::DefaultHasher
import std::test
import std::test::assert

object Dummy {
  static def new -> Self {
    Self {}
  }
}

test.group('std::map::DefaultHasher.write') do (g) {
  g.test('Hashing an Integer') {
    let hasher1 = DefaultHasher.new(1, 2)
    let hasher2 = DefaultHasher.new(1, 2)

    hasher1.write(10)
    hasher2.write(10)

    assert.equal(hasher1.to_hash, hasher2.to_hash)
  }

  g.test('Hashing an Float') {
    let hasher1 = DefaultHasher.new(1, 2)
    let hasher2 = DefaultHasher.new(1, 2)

    hasher1.write(10.0)
    hasher2.write(10.0)

    assert.equal(hasher1.to_hash, hasher2.to_hash)
  }

  g.test('Hashing a String') {
    let hasher1 = DefaultHasher.new(1, 2)
    let hasher2 = DefaultHasher.new(1, 2)

    hasher1.write('hello')
    hasher2.write('hello')

    assert.equal(hasher1.to_hash, hasher2.to_hash)
  }

  g.test('Hashing a Boolean') {
    let hasher1 = DefaultHasher.new(1, 2)
    let hasher2 = DefaultHasher.new(1, 2)

    hasher1.write(True)
    hasher2.write(True)

    assert.equal(hasher1.to_hash, hasher2.to_hash)
  }

  g.test('Hashing a regular object') {
    let dummy = Dummy.new
    let hasher1 = DefaultHasher.new(1, 2)
    let hasher2 = DefaultHasher.new(1, 2)

    hasher1.write(dummy)
    hasher2.write(dummy)

    assert.equal(hasher1.to_hash, hasher2.to_hash)
  }
}
