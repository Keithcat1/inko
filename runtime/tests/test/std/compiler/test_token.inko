import std::compiler::source_location::SourceLocation
import std::compiler::token::*
import std::test
import std::test::assert

def location -> SourceLocation {
  SourceLocation.new(file: 'test.inko', line_range: 1..2, column: 4)
}

def regular_token -> RegularToken {
  RegularToken.new(type: 'identifier', value: 'foo', location: location)
}

def keyword_token -> KeywordToken {
  KeywordToken.new(keyword: 'import', location: location)
}

def invalid_token -> InvalidToken {
  InvalidToken.new(value: 'foo', location: location)
}

def null_token -> NullToken {
  NullToken.new(location)
}

test.group('std::compiler::token::Token.same_line?') do (g) {
  g.test('Checking if two tokens reside on the same line') {
    let token1 = regular_token
    let token2 = regular_token
    let token3 = RegularToken.new(
      type: 'paren_open',
      value: '(',
      location: SourceLocation.new(file: 'test.inko', line_range: 3..4, column: 4)
    )

    assert.true(token1.same_line?(token2))
    assert.false(token1.same_line?(token3))
  }
}

test.group('std::compiler::token::RegularToken.type') do (g) {
  g.test('Obtaining the type of a token') {
    assert.equal(regular_token.type, 'identifier')
  }
}

test.group('std::compiler::token::RegularToken.value') do (g) {
  g.test('Obtaining the value of a token') {
    assert.equal(regular_token.value, 'foo')
  }
}

test.group('std::compiler::token::RegularToken.source_location') do (g) {
  g.test('Obtaining the source location of a token') {
    let token = regular_token

    assert.equal(token.location.line_range, 1..2)
    assert.equal(token.location.column, 4)
    assert.equal(token.location.file, 'test.inko'.to_path)
  }
}

test.group('std::compiler::token::RegularToken.keyword?') do (g) {
  g.test('Checking if a token is a keyword') {
    assert.false(regular_token.keyword?)
  }
}

test.group('std::compiler::token::RegularToken.valid?') do (g) {
  g.test('Checking if a token is valid') {
    assert.true(regular_token.valid?)
  }
}

test.group('std::compiler::token::RegularToken.null?') do (g) {
  g.test('Checking if a token is a null token') {
    assert.false(regular_token.null?)
  }
}

test.group('std::compiler::token::KeywordToken.type') do (g) {
  g.test('Obtaining the type of a token') {
    assert.equal(keyword_token.type, 'import')
  }
}

test.group('std::compiler::token::KeywordToken.value') do (g) {
  g.test('Obtaining the value of a token') {
    assert.equal(keyword_token.value, 'import')
  }
}

test.group('std::compiler::token::KeywordToken.source_location') do (g) {
  g.test('Obtaining the source location of a token') {
    let token = keyword_token

    assert.equal(token.location.line_range, 1..2)
    assert.equal(token.location.column, 4)
    assert.equal(token.location.file, 'test.inko'.to_path)
  }
}

test.group('std::compiler::token::KeywordToken.keyword?') do (g) {
  g.test('Checking if a token is a keyword') {
    assert.true(keyword_token.keyword?)
  }
}

test.group('std::compiler::token::KeywordToken.valid?') do (g) {
  g.test('Checking if a token is valid') {
    assert.true(keyword_token.valid?)
  }
}

test.group('std::compiler::token::KeywordToken.null?') do (g) {
  g.test('Checking if a token is a null token') {
    assert.false(keyword_token.null?)
  }
}

test.group('std::compiler::token::InvalidToken.type') do (g) {
  g.test('Obtaining the type of a token') {
    assert.equal(invalid_token.type, 'invalid')
  }
}

test.group('std::compiler::token::InvalidToken.value') do (g) {
  g.test('Obtaining the value of a token') {
    assert.equal(invalid_token.value, 'foo')
  }
}

test.group('std::compiler::token::InvalidToken.source_location') do (g) {
  g.test('Obtaining the source location of a token') {
    let token = invalid_token

    assert.equal(token.location.line_range, 1..2)
    assert.equal(token.location.column, 4)
    assert.equal(token.location.file, 'test.inko'.to_path)
  }
}

test.group('std::compiler::token::InvalidToken.keyword?') do (g) {
  g.test('Checking if a token is a keyword') {
    assert.false(invalid_token.keyword?)
  }
}

test.group('std::compiler::token::InvalidToken.valid?') do (g) {
  g.test('Checking if a token is valid') {
    assert.false(invalid_token.valid?)
  }
}

test.group('std::compiler::token::InvalidToken.null?') do (g) {
  g.test('Checking if a token is a null token') {
    assert.false(invalid_token.null?)
  }
}

test.group('std::compiler::token::NullToken.type') do (g) {
  g.test('Obtaining the type of a token') {
    assert.equal(null_token.type, 'null')
  }
}

test.group('std::compiler::token::NullToken.value') do (g) {
  g.test('Obtaining the value of a token') {
    assert.equal(null_token.value, '')
  }
}

test.group('std::compiler::token::NullToken.source_location') do (g) {
  g.test('Obtaining the source location of a token') {
    let token = null_token

    assert.equal(token.location.line_range, 1..2)
    assert.equal(token.location.column, 4)
    assert.equal(token.location.file, 'test.inko'.to_path)
  }
}

test.group('std::compiler::token::NullToken.keyword?') do (g) {
  g.test('Checking if a token is a keyword') {
    assert.false(null_token.keyword?)
  }
}

test.group('std::compiler::token::NullToken.valid?') do (g) {
  g.test('Checking if a token is valid') {
    assert.false(null_token.valid?)
  }
}

test.group('std::compiler::token::NullToken.null?') do (g) {
  g.test('Checking if a token is a null token') {
    assert.true(null_token.null?)
  }
}
