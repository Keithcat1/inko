import std::conversion::ToString
import std::debug
import std::float::(NAN, INFINITY, NEGATIVE_INFINITY)
import std::format::(Format, Formatter)
import std::format::DefaultFormatter
import std::fs
import std::mirror
import std::mirror::*
import std::operators::Equal
import std::pair::(Triple, Pair)
import std::set::Set
import std::test
import std::test::assert

let CURRENT_FILE = ModuleMirror.new(ThisModule).source_path

trait Trait1 {}
trait Trait2 {}

object Dummy {
  @name: String
  @age: Integer

  static def new -> Self {
    Self { @name = 'Alice', @age = 28 }
  }

  def foo {}
}

impl Equal for Dummy {}
impl Trait1 for Dummy {}

object EmptyObject {
  static def new -> Self {
    Self {}
  }
}

object OneAttribute {
  @number: Integer

  static def new -> Self {
    Self { @number = 10 }
  }
}

object TwoAttributes {
  @first: String
  @second: Integer

  static def new -> Self {
    Self { @first = 'first', @second = 10 }
  }
}

object NestedObject {
  @child: OneAttribute

  static def new -> Self {
    Self { @child = OneAttribute.new }
  }
}

object Foo {
  static def new -> Self {
    Self {}
  }
}

object FooMirror {
  @subject: Foo

  static def new(subject: Foo) -> Self {
    Self { @subject = subject }
  }
}

impl Format for FooMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push('Foo')
    formatter
  }
}

impl Mirror for FooMirror {
  def subject -> Foo {
    @subject
  }
}

impl Mirrored for Foo {
  def mirror -> FooMirror {
    FooMirror.new(self)
  }
}

def format(mirror: Mirror) -> String {
  mirror.format(DefaultFormatter.new).to_string
}

test.group('std::mirror::Mirror.subject') do (g) {
  g.test('Obtaining the subject of a mirror') {
    let obj = Dummy.new

    assert.equal(ObjectMirror.new(obj).subject as Dummy, obj)
  }
}

test.group('std::mirror::Mirror.subject_same_object?') do (g) {
  g.test('Checking if a subject is the same object as another object') {
    let dummy = Dummy.new
    let mirror = ObjectMirror.new(dummy)

    assert.true(mirror.subject_same_object?(dummy))
  }
}

test.group('std::mirror::Mirror.instance_of') do (g) {
  g.test('Obtaining the object an object is an instance of') {
    let mirr1 = ObjectMirror.new(Dummy.new)
    let mirr2 = ObjectMirror.new(mirr1.instance_of)

    assert.true(mirr2.subject_same_object?(Dummy))
  }
}

test.group('std::mirror::Mirror.get_attribute') do (g) {
  g.test('Obtaining the value of a non existing attribute') {
    let obj = Dummy.new

    assert.equal(ObjectMirror.new(obj).get_attribute('bar') as Nil, Nil)
  }

  g.test('Obtaining the value of an existing attribute') {
    let obj = Dummy.new

    assert.equal(ObjectMirror.new(obj).get_attribute('@name') as String, 'Alice')
  }
}

test.group('std::mirror::Mirror.attributes') do (g) {
  g.test('Obtaining the attribute names of an object') {
    let obj = Dummy.new
    let mirror = ObjectMirror.new(obj)
    let names = mirror.attributes

    assert.true(names.contains?('@name'))
    assert.true(names.contains?('@age'))
  }
}

test.group('std::mirror::Mirror.instance_of?') do (g) {
  g.test('Checking if an object is an instance of another object') {
    let obj = Dummy.new
    let mirror = ObjectMirror.new(obj)

    assert.true(mirror.instance_of?(Dummy))
    assert.false(mirror.instance_of?(String))
    assert.false(mirror.instance_of?(Nil))
  }

  g.test('Checking if Nil is an instance of Nil') {
    let mirror = ObjectMirror.new(Nil)

    assert.false(mirror.instance_of?(Nil))
  }
}

test.group('std::mirror::Mirror.implements_trait?') do (g) {
  g.test('Checking if an object implements a trait') {
    let obj = Dummy.new
    let mirror = ObjectMirror.new(obj)

    assert.true(mirror.implements_trait?(Trait1))
    assert.false(mirror.implements_trait?(Trait2))
  }

  g.test('Checking if Nil implements a trait') {
    let mirror = ObjectMirror.new(Nil)

    assert.true(mirror.implements_trait?(Object))
    assert.false(mirror.implements_trait?(Trait1))
  }
}

test.group('std::mirror::Mirror.implemented_traits') do (g) {
  g.test('Obtaining the traits implemented by an object') {
    let traits = ObjectMirror.new(Dummy).implemented_traits

    assert.false(traits.empty?)
  }

  g.test('Obtaining the traits implemented by an object instance') {
    let traits = ObjectMirror.new(Dummy.new).implemented_traits

    assert.false(traits.empty?)
  }
}

test.group('std::mirror::Mirror.inspect') do (g) {
  g.test('Inspecting a mirrored object') {
    assert.equal(ObjectMirror.new(EmptyObject.new).inspect, 'EmptyObject')
  }
}

test.group('std::mirror::ObjectMirror.name') do (g) {
  g.test('Obtaining the name of an object') {
    let obj = Dummy.new
    let mirror = ObjectMirror.new(obj)

    assert.equal(mirror.name, 'Dummy')
  }

  g.test('Obtaining the name of a built-in object') {
    assert.equal(ObjectMirror.new(String).name, 'String')
  }
}

test.group('std::mirror::ObjectMirror.set_attribute') do (g) {
  g.test('Setting the value of a non existing attribute') {
    let obj = Dummy.new
    let mirror = ObjectMirror.new(obj)

    mirror.set_attribute('foo', 10)

    assert.equal(mirror.get_attribute('foo') as Integer, 10)
  }

  test.group('Setting the value of an existing attribute') do (g) {
    let obj = Dummy.new
    let mirror = ObjectMirror.new(obj)

    mirror.set_attribute('@name', 'Bob')

    assert.equal(mirror.get_attribute('@name') as String, 'Bob')
  }
}

test.group('std::mirror::ObjectMirror.format') do (g) {
  g.test('Formatting an empty Object') {
    assert.equal(format(ObjectMirror.new(EmptyObject.new)), 'EmptyObject')
  }

  g.test('Formatting an Object with one attribute') {
    let obj = OneAttribute.new

    assert.equal(format(ObjectMirror.new(obj)), 'OneAttribute { @number = 10 }')
  }

  g.test('Formatting an Object with multiple attributes') {
    let obj = TwoAttributes.new
    let possible = Array.new(
      'TwoAttributes { @first = "first", @second = 10 }',
      'TwoAttributes { @second = 10, @first = "first" }'
    )

    # The order of attributes is not guaranteed, so we can't perform an equality
    # comparison as such a test would randomly fail.
    assert.true(possible.contains?(format(ObjectMirror.new(obj))))
  }

  g.test('Formatting an Object containing another Object') {
    let obj = NestedObject.new

    assert.equal(
      format(ObjectMirror.new(obj)),
      'NestedObject { @child = OneAttribute { @number = 10 } }'
    )
  }
}

test.group('std::mirror::Mirror.instance_attributes') do (g) {
  g.test('Obtaining the instances attribute names of an object') {
    let obj = Dummy.new
    let mirror = ObjectMirror.new(obj)

    mirror.set_attribute('foo', 'bar')

    let names = mirror.instance_attributes

    assert.true(names.contains?('@name'))
    assert.true(names.contains?('@age'))
    assert.false(names.contains?('foo'))
  }
}

test.group('std::mirror::BlockMirror.name') do (g) {
  g.test('Obtaining the name of a closure') {
    let mirror = BlockMirror.new({})

    assert.equal(mirror.name, '<block>')
  }

  g.test('Obtianing the name of a lambda') {
    let mirror = BlockMirror.new(lambda {})

    assert.equal(mirror.name, '<lambda>')
  }

  g.test('Obtaining the name of a method') {
    let mirror = ObjectMirror.new(Dummy)
    let foo = mirror.get_attribute('foo') as Block

    assert.equal(BlockMirror.new(foo).name, 'foo')
  }
}

test.group('std::mirror::BlockMirror.path') do (g) {
  g.test('Obtaining the path of a block') {
    let mirror = BlockMirror.new({})

    assert.equal(mirror.path, CURRENT_FILE)
  }
}

test.group('std::mirror::BlockMirror.line') do (g) {
  g.test('Obtaining the line number of a block') {
    let mirror = BlockMirror.new({})
    let line = debug.stacktrace(skip: 1, limit: 1)[0].line - 1

    assert.equal(mirror.line, line)
  }
}

test.group('std::mirror::BlockMirror.argument_names') do (g) {
  g.test('Obtaining the argument names of a block') {
    let mirror = BlockMirror.new(do (foo: Object, bar: Object) {})

    assert.equal(mirror.argument_names, Array.new('foo', 'bar'))
  }
}

test.group('std::mirror::BlockMirror.required_arguments') do (g) {
  g.test('Obtaining the number of required arguments') {
    let mirror = BlockMirror.new(do (foo: Object, bar: Object, baz = 10) {})

    assert.equal(mirror.required_arguments, 2)
  }
}

test.group('std::mirror::ModuleMirror.name') do (g) {
  g.test('Obtaining the name of a module') {
    let mirror = ModuleMirror.new(ThisModule)

    assert.equal(mirror.name, 'test::std::test_mirror')
  }
}

test.group('std::mirror::ModuleMirror.source_path') do (g) {
  g.test('Obtaining the file path of a module') {
    let mirror = ModuleMirror.new(ThisModule)

    assert.equal(mirror.source_path, CURRENT_FILE)
    assert.true(fs.file?(mirror.source_path))
  }
}

test.group('std::mirror::ArrayMirror.format') do (g) {
  g.test('Formatting an empty Array') {
    assert.equal(format(ArrayMirror.new(Array.new)), 'Array')
  }

  g.test('Formatting an Array with values') {
    assert.equal(format(ArrayMirror.new(Array.new(10))), 'Array { 10 }')
    assert.equal(format(ArrayMirror.new(Array.new(10, 20))), 'Array { 10, 20 }')
  }
}

test.group('std::mirror::ByteArrayMirror.format') do (g) {
  g.test('Formatting a ByteArray') {
    let bytes = ByteArray.new(10, 20, 30)

    assert.equal(format(ByteArrayMirror.new(bytes)), 'ByteArray { 3 bytes }')
  }
}

test.group('std::mirror::MapMirror.format') do (g) {
  g.test('Formatting an empty Map') {
    let map: Map!(String, String) = Map.new

    assert.equal(format(MapMirror.new(map)), 'Map')
  }

  g.test('Formatting a Map with values') {
    let map = Map.new

    map['foo'] = 10
    map['bar'] = 20

    let output = format(MapMirror.new(map))
    let valid =
      (output == 'Map { "foo": 10, "bar": 20 }')
        .or { output == 'Map { "bar": 20, "foo": 10 }' }

    assert.true(valid)
  }
}

test.group('std::mirror::SetMirror.format') do (g) {
  g.test('Formatting an empty Set') {
    let set: Set!(String) = Set.new

    assert.equal(format(SetMirror.new(set)), 'Set')
  }

  g.test('Formatting a Set with a single value') {
    let set = Set.new

    set.insert(1)

    assert.equal(format(SetMirror.new(set)), 'Set { 1 }')
  }

  g.test('Formatting a Set with multiple values') {
    let set = Set.new

    set.insert(1)
    set.insert(2)

    let output = format(SetMirror.new(set))
    let valid = (output == 'Set { 1, 2 }').or { output == 'Set { 2, 1 }' }

    assert.true(valid)
  }
}

test.group('std::mirror::PairMirror.format') do (g) {
  g.test('Formatting a Pair') {
    let pair = Pair.new(first: 10, second: 20)

    assert.equal(format(PairMirror.new(pair)), 'Pair { 10, 20 }')
  }
}

test.group('std::mirror::TripleMirror.format') do (g) {
  g.test('Formatting a Triple') {
    let triple = Triple.new(first: 10, second: 20, third: 30)

    assert.equal(format(TripleMirror.new(triple)), 'Triple { 10, 20, 30 }')
  }
}

test.group('std::mirror::IntegerMirror.format') do (g) {
  g.test('Formatting an Integer') {
    assert.equal(format(IntegerMirror.new(10)), '10')
    assert.equal(format(IntegerMirror.new(-10)), '-10')
  }
}

test.group('std::mirror::FloatMirror.format') do (g) {
  g.test('Formatting a Float') {
    assert.equal(format(FloatMirror.new(1.5)), '1.5')
    assert.equal(format(FloatMirror.new(1.1234)), '1.1234')
  }

  g.test('Formatting a NAN') {
    assert.equal(format(FloatMirror.new(NAN)), 'NaN')
  }

  g.test('Formatting Infinity') {
    assert.equal(format(FloatMirror.new(INFINITY)), 'Infinity')
  }

  g.test('Formatting negative Infinity') {
    assert.equal(format(FloatMirror.new(NEGATIVE_INFINITY)), '-Infinity')
  }
}

test.group('std::mirror::StringMirror.format') do (g) {
  g.test('Formatting an empty String') {
    assert.equal(format(StringMirror.new('')), '""')
  }

  g.test('Formatting a String with characters') {
    assert.equal(format(StringMirror.new('foo')), '"foo"')
  }
}

test.group('std::mirror::BlockMirror.format') do (g) {
  g.test('Formatting a Block') {
    let block = { 10 }

    assert.equal(format(BlockMirror.new(block)), 'Block')
  }
}

test.group('std::mirror::BooleanMirror.format') do (g) {
  g.test('Formatting True') {
    assert.equal(format(BooleanMirror.new(True)), 'True')
  }

  g.test('Formatting False') {
    assert.equal(format(BooleanMirror.new(False)), 'False')
  }
}

test.group('std::mirror::NilMirror.format') do (g) {
  g.test('Formatting Nil') {
    assert.equal(format(NilMirror.new(Nil)), 'Nil')
  }
}

test.group('std::mirror::OptionMirror.format') do (g) {
  g.test('Formatting a Some') {
    assert.equal(format(OptionMirror.new(Option.some(10))), 'Some(10)')
  }

  g.test('Formatting a None') {
    assert.equal(format(OptionMirror.new(Option.none)), 'None')
  }
}

test.group('std::mirror.reflect') do (g) {
  g.test('Obtaining a default mirror') {
    let mirror1 = mirror.reflect(Dummy.new)
    let mirror2 = mirror.reflect(Nil)

    assert.true(ObjectMirror.new(mirror1).instance_of?(ObjectMirror))
    assert.true(ObjectMirror.new(mirror2).instance_of?(NilMirror))
  }

  g.test('Obtaining a custom mirror') {
    let foo = Foo.new
    let mirror = mirror.reflect(foo)

    assert.true(ObjectMirror.new(mirror).instance_of?(FooMirror))
  }
}
