import std::mirror::ObjectMirror
import std::process
import std::random
import std::test
import std::test::assert

test.group('std::random.integer') do (g) {
  g.test('Generating a random Integer') {
    let int = random.integer
    let int_mirror = ObjectMirror.new(int)

    # There isn't much we can test, other than making sure the value is indeed
    # an Integer.
    assert.true(int_mirror.instance_of?(Integer))
  }
}

test.group('std::random.incremental_integer') do (g) {
  g.test('Generating a random incremental Integer') {
    # We pin the code below so that the process isn't moved between threads
    # before the assertion. A proces being moved could result in it producing
    # the same value twice.
    process.pinned {
      let one = random.incremental_integer
      let two = random.incremental_integer

      assert.not_equal(one, two)
    }
  }
}

test.group('std::random.float') do (g) {
  g.test('Generating a random Float') {
    let float = random.float
    let float_mirror = ObjectMirror.new(float)

    # There isn't much we can test, other than making sure the value is indeed
    # a Float.
    assert.true(float_mirror.instance_of?(Float))
  }
}

test.group('std::random.integer_between') do (g) {
  g.test('Generating an Integer in a range') {
    let min = 0
    let max = 10
    let val = random.integer_between(min: min, max: max)

    assert.true((val >= min).and { val <= max })
  }

  g.test('Generating an Integer in a really big range') {
    let min = 1_000_000_000_000_000_000_000
    let max = 5_000_000_000_000_000_000_000
    let val = random.integer_between(min: min, max: max)

    assert.true((val >= min).and { val <= max })
  }

  g.test('Generating a negative Integer') {
    let min = -10
    let max = 0
    let val = random.integer_between(min: min, max: max)

    assert.true((val >= min).and { val <= max })
  }

  g.test('Using a minimum value greater than the maximum value') {
    assert.panic {
      random.integer_between(min: 10, max: 0)
    }
  }

  g.test('Using a minimum and maximum value that are equal') {
    assert.panic {
      random.integer_between(min: 0, max: 0)
    }
  }
}

test.group('std::random.float_between') do (g) {
  g.test('Generating a Float in a range') {
    let min = 0.0
    let max = 10.0
    let val = random.float_between(min: min, max: max)

    assert.true((val >= min).and { val <= max })
  }

  g.test('Generating a negative Float') {
    let min = -10.0
    let max = 0.0
    let val = random.float_between(min: min, max: max)

    assert.true((val >= min).and { val <= max })
  }

  g.test('Using a minimum value greater than the maximum value') {
    assert.panic {
      random.float_between(min: 10.0, max: 0.0)
    }
  }

  g.test('Using a minimum and maximum value that are equal') {
    assert.panic {
      random.float_between(min: 0.0, max: 0.0)
    }
  }
}

test.group('std::random.bytes') do (g) {
  g.test('Generating a ByteArray containing random bytes') {
    let bytes = random.bytes(size: 4)

    assert.equal(bytes.length, 4)
  }
}
