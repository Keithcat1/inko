import std::env
import std::fs::dir
import std::fs::path::(Path, SEPARATOR)
import std::process
import std::string_buffer::StringBuffer
import std::test::*
import std::stdio::stdout

# The path of the base temporary directory, such as /tmp on Linux.
let TEMP = env.temporary_directory.to_string

def temp_dir(components = Array.new!(String)) -> Path {
  let buffer = StringBuffer
    .new(TEMP, SEPARATOR, 'inko-test-' + process.current.identifier.to_string)

  components.each do (component) {
    buffer.push(SEPARATOR)
    buffer.push(component)
  }

  buffer.to_string.to_path
}

def with_temp_dir(components = Array.new!(String), block: do (Path)) {
  let root = temp_dir
  let path = temp_dir(components)

  # Without the root directory being present our tests are useless. As such, if
  # this fails we can do nothing but panic.
  try! dir.create(root)

  process.defer {
    # If we can't remove the directory that's OK, since it resides inside the
    # systems' temporary directory.
    try dir.remove(path: root, recursive: True) else Nil
  }

  block.call(path)
}

def tests(t: Tests) {
  t.group('std::fs::dir.create') do (g) {
    g.test('Creating a valid directory') {
      with_temp_dir(Array.new('foo')) do (path) {
        try! dir.create(path)

        try assert_true(path.directory?)
      }
    }

    g.test('Creating an already existing directory') {
      with_temp_dir(Array.new('foo')) do (path) {
        try! dir.create(path)

        try assert_throw { local try dir.create(path) }
      }
    }

    g.test('Creating a directory recursively') {
      with_temp_dir(Array.new('foo', 'bar')) do (path) {
        try! dir.create(path: path, recursive: True)

        try assert_true(path.directory?)
      }
    }

    g.test('Creating an existing directory recursively') {
      with_temp_dir(Array.new('foo', 'bar')) do (path) {
        try! dir.create(path: path, recursive: True)

        try assert_no_throw {
          local try dir.create(path: path, recursive: True)
        }
      }
    }
  }

  t.group('std::fs::dir.remove') do (g) {
    g.test('Removing an empty directory') {
      with_temp_dir(Array.new('foo')) do (path) {
        try! dir.create(path)
        try! dir.remove(path)

        try assert_false(path.directory?)
      }
    }

    g.test('Removing a non-empty directory') {
      with_temp_dir(Array.new('foo', 'bar')) do (path) {
        try! dir.create(path: path, recursive: True)

        try assert_throw { local try dir.remove(temp_dir) }
      }
    }

    g.test('Removing an empty directory recursively') {
      with_temp_dir(Array.new('foo', 'bar')) do (path) {
        try! dir.create(path: path, recursive: True)
        try! dir.remove(path: path, recursive: True)

        try assert_false(path.directory?)
      }
    }

    g.test('Removing a non-empty directory recursively') {
      let root = temp_dir

      with_temp_dir(Array.new('foo', 'bar')) do (path) {
        try! dir.create(path: path, recursive: True)
        try! dir.remove(path: root, recursive: True)

        try assert_false(root.directory?)
      }
    }
  }

  t.group('std::fs::dir.list') do (g) {
    g.test('Listing the contents of an empty directory') {
      with_temp_dir(Array.new) do (path) {
        let contents = try! dir.list(path)

        try assert_equal(contents, Array.new)
      }
    }

    g.test('Listing the contents of a non-existing directory') {
      with_temp_dir(Array.new('foo')) do (path) {
        try assert_throw { local try dir.list(path) }
      }
    }

    g.test('Listing the contents of a non-empty directory') {
      let root = temp_dir

      with_temp_dir(Array.new('foo')) do (path) {
        try! dir.create(path)

        let contents = try! dir.list(root)

        try assert_equal(contents.length, 1)
        try assert_equal(contents[0], path)
      }
    }
  }
}
