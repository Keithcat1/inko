#! Methods for `Trait` that should be available before defining other types.

impl Trait {
  ## Implements `self` for the given object.
  ##
  ## Implementing a trait will result in all the trait's methods being copied
  ## over to the given object. Once copied the trait is tracked in an internal
  ## object so methods such as `std::reflection.kind_of?` can make use of it.
  ##
  ## This method is not really meant for general use, instead it's called by the
  ## compiler whenever implementing a trait using the `impl` keyword.
  ##
  ## # Examples
  ##
  ## Manually implementing a trait, ignoring any required methods:
  ##
  ##     trait MyTrait {
  ##       def number -> Integer {
  ##         42
  ##       }
  ##     }
  ##
  ##     object Person {}
  ##
  ##     MyTrait.implement_for(Person) # => MyTrait
  ##
  ##     Person.new.number # => 42
  def implement_for(subject) -> Trait {
    let mut traits =
      _INKOC.set_attribute_to_object(subject, '@_implemented_traits')

    _INKOC.copy_blocks(subject, self)
    _INKOC.set_attribute(traits, self, True)

    self
  }
}
