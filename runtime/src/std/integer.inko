# The integer type.

import std::conversion::(ToInteger, ToString, ToFloat)
import std::error::StandardError
import std::hash::(Hasher, Hash)
import std::numeric::Numeric
import std::operators::*
import std::successor::Successor

impl ToInteger for Integer {
  def to_integer -> Integer {
    self
  }
}

impl ToFloat for Integer {
  def to_float -> Float {
    _INKOC.integer_to_float(self)
  }
}

impl ToString for Integer {
  def to_string -> String {
    _INKOC.integer_to_string(self)
  }
}

impl Add!(Self) for Integer {
  def +(other: Self) -> Self {
    _INKOC.integer_add(self, other)
  }
}

impl Divide for Integer {
  def /(other: Self) -> Self {
    _INKOC.integer_div(self, other)
  }
}

impl Multiply for Integer {
  def *(other: Self) -> Self {
    _INKOC.integer_mul(self, other)
  }
}

impl Subtract!(Self) for Integer {
  def -(other: Self) -> Self {
    _INKOC.integer_sub(self, other)
  }
}

impl Modulo for Integer {
  def %(other: Self) -> Self {
    _INKOC.integer_mod(self, other)
  }
}

impl Smaller for Integer {
  def <(other: Self) -> Boolean {
    _INKOC.integer_smaller(self, other)
  }
}

impl Greater for Integer {
  def >(other: Self) -> Boolean {
    _INKOC.integer_greater(self, other)
  }
}

impl Equal for Integer {
  def ==(other: Self) -> Boolean {
    _INKOC.integer_equals(self, other)
  }
}

impl GreaterOrEqual for Integer {
  def >=(other: Self) -> Boolean {
    _INKOC.integer_greater_or_equal(self, other)
  }
}

impl SmallerOrEqual for Integer {
  def <=(other: Self) -> Boolean {
    _INKOC.integer_smaller_or_equal(self, other)
  }
}

impl BitwiseAnd for Integer {
  def &(other: Self) -> Self {
    _INKOC.integer_bitwise_and(self, other)
  }
}

impl BitwiseOr for Integer {
  def |(other: Self) -> Self {
    _INKOC.integer_bitwise_or(self, other)
  }
}

impl BitwiseXor for Integer {
  def ^(other: Self) -> Self {
    _INKOC.integer_bitwise_xor(self, other)
  }
}

impl ShiftLeft for Integer {
  def <<(other: Self) -> Self {
    _INKOC.integer_shift_left(self, other)
  }
}

impl ShiftRight for Integer {
  def >>(other: Self) -> Self {
    _INKOC.integer_shift_right(self, other)
  }
}

impl Numeric for Integer {
  def negative? -> Boolean {
    self < 0
  }

  def positive? -> Boolean {
    self > 0
  }

  def zero? -> Boolean {
    self == 0
  }

  def absolute -> Self {
    negative?.if_false {
      return self
    }

    self - (self * 2)
  }

  def opposite -> Self {
    positive?.if_true {
      return 0 - self
    }

    self - (self * 2)
  }
}

impl Hash for Integer {
  def hash(hasher: Hasher) -> NilType {
    hasher.write_integer(self)
    Nil
  }
}

impl Successor for Integer {
  # Returns the successor of `self`.
  #
  # # Examples
  #
  # Getting the successor of a positive integer:
  #
  #     1.successor  # => 2
  #     2.successor  # => 3
  #
  # Getting the successor of a negative integer:
  #
  #     -5.successor # => -4
  def successor -> Self {
    self + 1
  }
}

impl Integer {
  # Parses an `Integer` from a `String` in a given base.
  #
  # # Error handling
  #
  # This method will panic if `radix` is not between `2` and `36`. If the input
  # `String` is invalid, an error will be thrown instead.
  #
  # # Format
  #
  # The `String` is expected to start with an optional `+` or `-` sign,
  # followed by one or more digits. Digits are a subset of the following
  # ranges, depending on the value of the `radix` argument:
  #
  # * 0-9
  # * a-z
  # * A-Z
  #
  # Leading and/or trailing whitespace is considered to be invalid, and will
  # result in an error being thrown.
  #
  # # Examples
  #
  # Parsing a `String` into a base 2 `Integer`:
  #
  #     try! Integer.parse('11', 2) # => 3
  #
  # Parsing a `String` into a base 8 `Integer`:
  #
  #     try! Integer.parse('0o52', 8) # => 42
  #
  # Parsing a `String` into a base 10 `Integer`:
  #
  #     try! Integer.parse('10') # => 10
  #
  # Parsing a `String` into a base 16 `Integer`:
  #
  #     try! Integer.parse('F', 16) # => 15
  static def parse(string: String, radix = 10) !! StandardError -> Integer {
    try {
      _INKOC.string_to_integer(string, radix)
    } else (error) {
      throw StandardError.new(error as String)
    }
  }
}
