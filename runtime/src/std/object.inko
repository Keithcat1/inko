# Functionality available to all objects.
#
# All objects in Inko are an instance of `Object`, and thus all its methods are
# available to all objects.
import std::hash::(Hash, Hasher)
import std::operators::Equal

impl Object {
  # Returns a boolean indicating if this object evaluates to True in a boolean
  # context.
  #
  # # Examples
  #
  #     10.truthy?    # => True
  #     False.truthy? # => False
  def truthy? -> Boolean {
    True
  }

  # Calls the `true` block if the receiver evaluates to `True`, otherwise the
  # `false` block is called.
  #
  # The return value is whatever the block returned. Both the blocks must
  # return a value of the same type.
  def if!(R)(true: do -> R, false: do -> R) -> R {
    _INKOC.if(truthy?, true.call, false.call)
  }

  # Calls the supplied block if the receiver evaluates to `True`.
  #
  # When the receiver evaluates to `True` the return value will be whatever the
  # supplied block returned. When evaluating to `False` this method will instead
  # return Nil.
  def if_true!(R)(block: do -> R) -> ?R {
    _INKOC.if(truthy?, block.call, Nil)
  }

  # Calls the supplied block if the receiver evaluates to `False`.
  #
  # When the receiver evaluates to `False` the return value will be whatever the
  # supplied block returned. When evaluating to `True` this method will instead
  # return Nil.
  def if_false!(R)(block: do -> R) -> ?R {
    _INKOC.if(truthy?, Nil, block.call)
  }

  # Returns `True` if `self` and the given object evaluate to `True`.
  #
  # # Examples
  #
  # Using two objects:
  #
  #     Object.new.and { Object.new } # => True
  #
  # Using and object and `False`:
  #
  #     Object.new.and { False } # => False
  def and(other: do -> Boolean) -> Boolean {
    _INKOC.if(truthy?, other.call, False)
  }

  # Returns `True` if `self` or the given object evaluates to `True`.
  #
  # # Examples
  #
  # Using two objects:
  #
  #     Object.new.or { Object.new } # => True
  #
  # Using an object and `False`:
  #
  #     Object.new.or { False } # => True
  def or(other: do -> Boolean) -> Boolean {
    _INKOC.if(truthy?, True, other.call)
  }

  # Returns `True` if `self` is `Nil`.`
  #
  # # Examples
  #
  # Checking if an object is `Nil`:
  #
  #     10.nil?  # => False
  #     Nil.nil? # => True
  def nil? -> Boolean {
    _INKOC.object_equals(self, Nil)
  }

  # Returns `True` if `self` is any object other than `Nil`.
  #
  # # Examples
  #
  # Checking if an object is not `Nil`:
  #
  #     10.not_nil?  # => True
  #     Nil.not_nil? # => False
  def not_nil? -> Boolean {
    _INKOC.object_equals(nil?, False)
  }

  # Returns `True` if `self` and the given object are the exact same objects.
  #
  # Two objects are considered identical if they reside at the exact same
  # memory address. This is also known as referential equality.
  #
  # This method should not be redefined by other objects, as doing so can break
  # various parts of the Inko runtime.
  def same_object?(other: Self) -> Boolean {
    _INKOC.object_equals(self, other)
  }
}

impl Equal for Object {
  def ==(other: Self) -> Boolean {
    _INKOC.object_equals(self, other)
  }
}

impl Hash for Object {
  def hash(hasher: Hasher) {
    hasher.write(self)
  }
}
