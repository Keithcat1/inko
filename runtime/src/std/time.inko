#! Types and methods for dealing with time.
import std::conversion::(ToFloat, ToInteger)
import std::operators::(
  Add, Equal, Greater, GreaterOrEqual, Smaller, SmallerOrEqual, Subtract
)
import std::time::constants::*
import std::time::duration::Duration

## An object representing the current system time.
##
## A `SystemTime` object represents the current system in seconds relative to
## the Unix epoch. Due to the use of the system clock an instance of
## `SystemTime` can be influenced by time zone changes, clock adjustments, or
## leap seconds. If you need a monotonically increasing clock you should use
## `Instant` instead.
object SystemTime {
  def init(
    year = 0,
    month = 1,
    day = 1,
    hour = 0,
    minute = 0,
    second = 0,
    sub_second = 0.0,
    utc_offset = 0,
    dst = False,
  ) {
    let @year = year
    let @month = month
    let @day = day
    let @hour = hour
    let @minute = minute
    let @second = second
    let @sub_second = sub_second
    let @utc_offset = utc_offset
    let @dst = dst
  }

  ## Returns the hour of the day from 0 to 23.
  def hour -> Integer {
    @hour
  }

  ## Returns the minute of the hour from 0 to 59.
  def minute -> Integer {
    @minute
  }

  ## Returns the second of the minute from 0 to 60.
  def second -> Integer {
    @second
  }

  ## Returns the fractional part of the second, in seconds.
  def sub_second -> Float {
    @sub_second
  }

  ## Returns the year of the current time.
  def year -> Integer {
    @year
  }

  ## Returns the month of the year from 1 to 12.
  def month -> Integer {
    @month
  }

  ## Returns the day of the month from 1 to 31.
  def day -> Integer {
    @day
  }

  ## Returns the day of the week from 1 to 7.
  ##
  ## Per ISO 8601 the first day of the week starts on Monday, not Sunday.
  def day_of_week -> Integer {
    # January 1st, 1970 (our anchor date) was on a Thursday. We add 3 so that
    # Monday (3 days before Thursday) becomes the anchor date.
    #
    # We later on add 1 since the % operator will return 0 for Monday (since its
    # the first value in the range), but week days range from 1 to 7; not 0 to
    # 6.
    #
    # The following table should help illustrate this:
    #
    # | Date       | Day of week | days_since_unix_epoch
    # |:-----------|:------------|:----------------------
    # | 1969-12-29 | Monday      | -3
    # | 1969-12-30 | Tuesday     | -2
    # | 1969-12-31 | Wednesday   | -1
    # | 1970-01-01 | Thursday    | 0
    # | 1970-01-02 | Friday      | 1
    # | 1970-01-03 | Saturday    | 2
    # | 1970-01-04 | Sunday      | 3
    #
    # For these dates, the calculations would be as follows:
    #
    # | Date       | Calculation        | Simplified  | Return value
    # |:-----------|:-------------------|:------------|:------------
    # | 1969-12-29 | ((-3 + 3) % 7) + 1 | (0 % 7) + 1 | 1
    # | 1969-12-30 | ((-2 + 3) % 7) + 1 | (1 % 7) + 1 | 2
    # | 1969-12-31 | ((-1 + 3) % 7) + 1 | (2 % 7) + 1 | 3
    # | 1970-01-01 | ((0 + 3) % 7) + 1  | (3 % 7) + 1 | 4
    # | 1970-01-02 | ((1 + 3) % 7) + 1  | (4 % 7) + 1 | 5
    # | 1970-01-03 | ((2 + 3) % 7) + 1  | (5 % 7) + 1 | 6
    # | 1970-01-04 | ((3 + 3) % 7) + 1  | (6 % 7) + 1 | 7
    days_since_unix_epoch + 3
      % DAYS_PER_WEEK
      + 1
  }

  ## Returns the day of the year from 1 to 366 for leap years, and from 1 to 365
  ## for regular years.
  def day_of_year -> Integer {
    let table = leap_year?
      .if true: {
        DAYS_SINCE_JANUARY_LEAP
      }, false: {
        DAYS_SINCE_JANUARY_NORMAL
      }

    table[month - 1]! + day
  }

  ## Returns the number of days between `self` and the Unix epoch.
  ##
  ## The returned `Integer` is negative if `self` is before the Unix epoch, and
  ## positive for a value that is on or after the Unix epoch.
  def days_since_unix_epoch -> Integer {
    let years = year - UNIX_EPOCH_YEAR
      .absolute

    let leap_days = (years / 4)
      - (years / 100)
      + (years / 400)

    # The number of days since the Unix epoch, up until the first day of the
    # year.
    let days_until_year_start = years
      * DAYS_PER_NORMAL_YEAR
      + leap_days

    # The number of days since the start of this year, with a value of 0
    # representing the first day of the year.
    let days_since_year_start = day_of_year - 1

    before_unix_epoch?.if true: {
      0 - (days_until_year_start - days_since_year_start)
    }, false: {
      days_until_year_start + days_since_year_start
    }
  }

  ## Returns `True` if the year in `self` comes before the Unix epoch.
  def before_unix_epoch? -> Boolean {
    year < UNIX_EPOCH_YEAR
  }

  ## Returns `True` if the current year is a leap year.
  def leap_year? -> Boolean {
    let year = @year

    (year % 4).zero?.and { (year % 100).positive?.or { (year % 400).zero? } }
  }

  ## Returns `True` if DST is active.
  def dst? -> Boolean {
    @dst
  }

  ## Returns the offset in seconds relative to UTC.
  def utc_offset -> Integer {
    @utc_offset
  }

  ## Returns `True` if UTC is used.
  def utc? -> Boolean {
    utc_offset == 0
  }

  ## Returns the number of seconds since the Unix epoch in UTC.
  ##
  ## This value will be negative if `self` is a `SystemTime` before the Unix
  ## epoch.
  def seconds_since_unix_epoch -> Integer {
    let day_sec = days_since_unix_epoch.absolute * SECS_PER_DAY
    let time_sec = (hour * SECS_PER_HOUR) + (minute * SECS_PER_MIN) + second
    let seconds = before_unix_epoch?.if true: {
      0 - (day_sec - time_sec)
    }, false: {
      day_sec + time_sec
    }

    # Timestamps are always in UTC, not in the local time.
    seconds - utc_offset
  }

  ## Converts the `SystemTime` to another `SystemTime` that uses UTC as the
  ## timezone.
  def to_utc -> Self {
    ThisModule.from_utc_timestamp(to_float)
  }
}

impl ToInteger for SystemTime {
  ## Returns the timestamp since the Unix epoch.
  def to_integer -> Integer {
    seconds_since_unix_epoch
  }
}

impl ToFloat for SystemTime {
  ## Returns the timestamp since the Unix epoch, the including fractional
  ## seconds.
  def to_float -> Float {
    seconds_since_unix_epoch.to_float + sub_second
  }
}

impl Add!(Duration) for SystemTime {
  ## Adds the given number of seconds to `self`, returning the result as a new
  ## `SystemTime`.
  ##
  ## # Examples
  ##
  ## Adding a `Duration` to a `SystemTime`:
  ##
  ##     import std::time
  ##     import std::time::duration
  ##
  ##     time.now + duration.from_seconds(5)
  def +(other: Duration) -> Self {
    let timestamp = to_float + other.to_float

    utc?.if true: {
      ThisModule.from_utc_timestamp(timestamp)
    }, false: {
      ThisModule.from_timestamp(timestamp)
    }
  }
}

impl Subtract!(Duration) for SystemTime {
  ## Subtracts the given number of seconds from `self`, returning the result as
  ## a new `SystemTime`.
  ##
  ## # Examples
  ##
  ## Subtracting a `Duration` from a `SystemTime`:
  ##
  ##     import std::time
  ##     import std::time::duration
  ##
  ##     time.now - duration.from_seconds(5)
  def -(other: Duration) -> Self {
    let timestamp = to_float - other.to_float

    utc?.if true: {
      ThisModule.from_utc_timestamp(timestamp)
    }, false: {
      ThisModule.from_timestamp(timestamp)
    }
  }
}

impl Smaller for SystemTime {
  ## Returns `True` if `self` is smaller than the given `SystemTime`.
  ##
  ## # Examples
  ##
  ## Comparing two `SystemTime` objects:
  ##
  ##     import std::time
  ##
  ##     let before = time.now
  ##     let after = before + 5
  ##
  ##     before < after # => True
  def <(other: Self) -> Boolean {
    to_float < other.to_float
  }
}

impl SmallerOrEqual for SystemTime {
  ## Returns `True` if `self` is smaller than or equal to the given
  ## `SystemTime`.
  ##
  ## # Examples
  ##
  ## Comparing two `SystemTime` objects:
  ##
  ##     import std::time
  ##
  ##     let before = time.now
  ##     let after = before + 5
  ##
  ##     before <= after  # => True
  ##     before <= before # => True
  def <=(other: Self) -> Boolean {
    to_float <= other.to_float
  }
}

impl Greater for SystemTime {
  ## Returns `True` if `self` is greater than the given `SystemTime`.
  ##
  ## # Examples
  ##
  ## Comparing two `SystemTime` objects:
  ##
  ##     import std::time
  ##
  ##     let before = time.now
  ##     let after = before + 5
  ##
  ##     after > before # => True
  def >(other: Self) -> Boolean {
    to_float > other.to_float
  }
}

impl GreaterOrEqual for SystemTime {
  ## Returns `True` if `self` is greater than or equal to the given
  ## `SystemTime`.
  ##
  ## # Examples
  ##
  ## Comparing two `SystemTime` objects:
  ##
  ##     import std::time
  ##
  ##     let before = time.now
  ##     let after = before + 5
  ##
  ##     after >= before # => True
  ##     after >= after  # => True
  def >=(other: Self) -> Boolean {
    to_float >= other.to_float
  }
}

impl Equal for SystemTime {
  ## Returns `True` if `self` and the given `SystemTime` are equal to each
  ## other.
  ##
  ## # Examples
  ##
  ## Comparing two `SystemTime` objects:
  ##
  ##     import std::time
  ##
  ##     let now = time.now
  ##
  ##     now == now # => True
  def ==(other: Self) -> Boolean {
    to_float == other.to_float
  }
}

## A monotonically increasing clock.
##
## `Instant` objects represent the number of seconds relative to an unspecified
## epoch. Unlike a system clock a monotonic clock never decreases, making it
## useful for tasks such as measuring the execution time of a block of code.
object Instant {
  def init(time = _INKOC.time_monotonic) {
    let @time = time
  }

  ## Returns a `Duration` measuring the time elapsed since the point in time
  ## that `self` represents.
  ##
  ## # Examples
  ##
  ## Obtaining the time elapsed:
  ##
  ##     import std::process
  ##     import std::time
  ##     import std::time::duration
  ##
  ##     let start = time.instant
  ##
  ##     process.suspend(duration.from_seconds(1))
  ##
  ##     start.elapsed.to_integer # => 1
  def elapsed -> Duration {
    Duration.new(_INKOC.time_monotonic - @time)
  }
}

impl ToInteger for Instant {
  ## Returns the number of seconds since the epoch.
  def to_integer -> Integer {
    @time.to_integer
  }
}

impl ToFloat for Instant {
  ## Returns the number of seconds since the epoch.
  def to_float -> Float {
    @time
  }
}

impl Add!(Duration) for Instant {
  ## Adds the given number of seconds to `self`, returning the result as a new
  ## `Instant`.
  ##
  ## # Examples
  ##
  ## Adding a `Duration` to a `Instant`:
  ##
  ##     import std::time
  ##     import std::time::duration
  ##
  ##     time.instant + duration.from_seconds(5)
  def +(other: Duration) -> Self {
    Instant.new(@time + other.to_float)
  }
}

impl Subtract!(Duration) for Instant {
  ## Subtracts the given number of seconds from `self`, returning the result as
  ## a new `Instant`.
  ##
  ## Subtracting a `Duration` from a `Instant`:
  ##
  ##     import std::time
  ##     import std::time::duration
  ##
  ##     time.instant - duration.from_seconds(5)
  def -(other: Duration) -> Self {
    Instant.new(@time - other.to_float)
  }
}

impl Smaller for Instant {
  ## Returns `True` if `self` is smaller than the given `Instant`.
  ##
  ## # Examples
  ##
  ## Comparing two `Instant` objects:
  ##
  ##     import std::time
  ##     import std::time::duration
  ##
  ##     let before = time.instant
  ##     let after = before + duration.from_seconds(5)
  ##
  ##     before < after # => True
  def <(other: Self) -> Boolean {
    @time < other.to_float
  }
}

impl SmallerOrEqual for Instant {
  ## Returns `True` if `self` is smaller than or equal to the given
  ## `Instant`.
  ##
  ## # Examples
  ##
  ## Comparing two `Instant` objects:
  ##
  ##     import std::time
  ##     import std::time::duration
  ##
  ##     let before = time.instant
  ##     let after = before + duration.from_seconds(5)
  ##
  ##     before <= after  # => True
  ##     before <= before # => True
  def <=(other: Self) -> Boolean {
    @time <= other.to_float
  }
}

impl Greater for Instant {
  ## Returns `True` if `self` is greater than the given `Instant`.
  ##
  ## # Examples
  ##
  ## Comparing two `Instant` objects:
  ##
  ##     import std::time
  ##     import std::time::duration
  ##
  ##     let before = time.instant
  ##     let after = before + duration.from_seconds(5)
  ##
  ##     after > before # => True
  def >(other: Self) -> Boolean {
    @time > other.to_float
  }
}

impl GreaterOrEqual for Instant {
  ## Returns `True` if `self` is greater than or equal to the given
  ## `Instant`.
  ##
  ## # Examples
  ##
  ## Comparing two `Instant` objects:
  ##
  ##     import std::time
  ##     import std::time::duration
  ##
  ##     let before = time.instant
  ##     let after = before + duration.from_seconds(5)
  ##
  ##     after >= before # => True
  ##     after >= after  # => True
  def >=(other: Self) -> Boolean {
    @time >= other.to_float
  }
}

impl Equal  for Instant {
  ## Returns `True` if `self` is equal to the given `Instant`.
  ##
  ## # Examples
  ##
  ## Comparing two `Instant` objects:
  ##
  ##     import std::time::Instant
  ##
  ##     Instant.new(1.0) == Instant.new(1.0) # => True
  ##     Instant.new(1.0) == Instant.new(2.0) # => False
  def ==(other: Self) -> Boolean {
    @time == other.to_float
  }
}

## Returns the UTC offset of the system's local time.
def utc_offset -> Integer {
  _INKOC.time_system_offset
}

## Returns `True` if Daylight Saving SystemTime is in effect in the system's
## timezone.
def dst? -> Boolean {
  _INKOC.time_system_dst
}

## Returns a new `SystemTime` representing the current time using the local
## timezone.
##
## # Examples
##
## Getting the current time:
##
##     import std::time
##
##     time.now
def now -> SystemTime {
  from_timestamp(_INKOC.time_system)
}

## Returns a new `SystemTime` representing the current time using UTC as the
## timezone.
##
## # Examples
##
## Getting the current time:
##
##     import std::time
##
##     time.utc
def utc -> SystemTime {
  from_utc_timestamp(_INKOC.time_system)
}

## Returns a new `Instant`.
##
## # Examples
##
## Creating a new `Instant`:
##
##     import std::time
##
##     time.instant
def instant -> Instant {
  Instant.new
}

## Returns a new `SystemTime` from a Unix timestamp.
##
## This method defaults to using the system's local timezone unless an explicit
## offset is given. When specifying a custom offset also make sure to explicitly
## specify if DST is in effect, otherwise this will be based on the system's
## local time.
def from_timestamp(
  time: ToFloat,
  utc_offset = ThisModule.utc_offset,
  dst = ThisModule.dst?
) -> SystemTime {
  # The algorithm below is based on the following code from the musl standard
  # library: http://git.musl-libc.org/cgit/musl/tree/src/time/__secs_to_tm.c.
  # Notable changes compared to the original algorithm:
  #
  # * Overflow checking has been removed because this is not necessary in
  #   Inko.
  # * Checking for negative results produced by the `%` has been removed
  #   because in Inko this operator is the modulo operator and not the remainder
  #   operator, thus it won't produce negative values in the code below.
  # * Calculating the day of the week and the year of the day has been removed
  #   because we don't explicitly store this anywhere.
  # * Documentation has been added in various places and variables have more
  #   human friendly names.
  #
  # When looking at the code keep in mind that the algorithm uses March 1st,
  # 2000 UTC as the epoch and _not_ January 1st, 1970 UTC. Using March 1st
  # simplifies some of the calculations, especially when dealing with leap
  # years. This epoch is internal and not exposed to the public API.
  #
  # Because musl is licensed under the MIT license we include a copy of the
  # license here:
  #
  #     Copyright © 2005-2014 Rich Felker, et al.
  #
  #     Permission is hereby granted, free of charge, to any person obtaining
  #     a copy of this software and associated documentation files (the
  #     "Software"), to deal in the Software without restriction, including
  #     without limitation the rights to use, copy, modify, merge, publish,
  #     distribute, sublicense, and/or sell copies of the Software, and to
  #     permit persons to whom the Software is furnished to do so, subject to
  #     the following conditions:
  #
  #     The above copyright notice and this permission notice shall be
  #     included in all copies or substantial portions of the Software.
  #
  #     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  #     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  #     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  #     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  #     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  #     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  #     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  # Unix timestamps are in UTC. Thus if we want to correctly calculate the
  # _local_ time we need to add the offset to the timestamp before we decompose
  # it.
  let local_time = time.to_float + utc_offset.to_float
  let local_time_int = local_time.to_integer

  let mut year = 0
  let mut month = 0
  let mut day = 0
  let mut hour = 0
  let mut minute = 0
  let mut second = 0
  let mut sub_second = local_time.fractional

  let secs = local_time_int - EPOCH
  let days = secs / SECS_PER_DAY
  let rem_secs = secs % SECS_PER_DAY
  let quadrennial_century_cycles = days / DAYS_PER_400Y
  let mut rem_days = days % DAYS_PER_400Y
  let mut century_cycles = rem_days / DAYS_PER_100Y

  century_cycles == 4
    .if_true {
      century_cycles -= 1
    }

  rem_days -= century_cycles * DAYS_PER_100Y

  let mut quadrennial_cycles = rem_days / DAYS_PER_4Y

  # 25 cycles == 100 years
  quadrennial_cycles == 25
    .if_true {
      quadrennial_cycles -= 1
    }

  rem_days -= quadrennial_cycles * DAYS_PER_4Y

  let mut rem_years = rem_days / DAYS_PER_NORMAL_YEAR

  rem_years == 4
    .if_true {
      rem_years -= 1
    }

  rem_days -= rem_years * DAYS_PER_NORMAL_YEAR

  # Calculate the number of years since 2000, then convert this to the current
  # year (e.g. 2018 instead of 18).
  let years = (rem_years + (4 * quadrennial_cycles))
    + (100 * century_cycles)
    + (400 * quadrennial_century_cycles)
    + EPOCH_YEAR

  let mut months = 0

  { DAYS_IN_MONTH[months] <= rem_days }.while_true {
    rem_days -= DAYS_IN_MONTH[months]!
    months += 1
  }

  year = years

  # We add two to adjust for January and February (since our epoch starts in
  # March).
  month = months + 2

  month >= MONTHS_PER_YEAR
    .if_true {
      month = month - MONTHS_PER_YEAR
      year = year + 1
    }

  # Per ISO 8601 the first month of the year is 1, and so is the first day of
  # the month.
  month = month + 1
  day = rem_days + 1

  hour = rem_secs / SECS_PER_HOUR
  minute = rem_secs / SECS_PER_MIN % SECS_PER_MIN
  second = rem_secs % SECS_PER_MIN

  SystemTime.new(
    year: year,
    month: month,
    day: day,
    hour: hour,
    minute: minute,
    second: second,
    sub_second: sub_second,
    utc_offset: utc_offset,
    dst: dst
  )
}

## Returns a new `SystemTime` from a Unix timestamp using UTC as the timezone.
def from_utc_timestamp(time: ToFloat) -> SystemTime {
  from_timestamp(time, utc_offset: 0, dst: False)
}
