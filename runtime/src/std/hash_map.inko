#! A hash map using linear probing and Robin Hood bucket stealing.
import std::hash::(Hash, Hasher)
import std::index::(Index, SetIndex)
import std::iterator::(Enumerator, Iterator)
import std::length::Length
import std::operators::Equal
import std::process
import std::random

## The load factor of a Table before it should be resized.
let LOAD_FACTOR = 0.75

## The default `Hasher` used for a `HashMap`.
##
## Different instances of a `DefaultHasher` may produce different hash values
## for the same object. The internal hashing algorithm may also change, and so
## the exact hash values should not be relied upon.
##
## Internally this hasher uses the hashing instructions provided by IVM, which
## currently uses SipHash 1-3.
let DefaultHasher = _INKOC.get_hasher_prototype

_INKOC.set_object_name(DefaultHasher, 'DefaultHasher')

impl DefaultHasher {
  ## Returns a new `DefaultHasher`.
  ##
  ## The given keys will be used as secrets for the hasher.
  ##
  ## # Panics
  ##
  ## This method will panic if any of the provided keys are below zero.
  def new(key0: Integer, key1: Integer) -> Self {
    _INKOC.hasher_new(key0, key1)
  }
}

impl Hasher for DefaultHasher {
  def write_integer(value: Integer) -> Integer {
    _INKOC.hasher_write(self, value)
  }

  def write_float(value: Float) -> Float {
    _INKOC.hasher_write(self, value)
  }

  def write_string(value: String) -> String {
    _INKOC.hasher_write(self, value)
  }

  def write_boolean(value: Boolean) -> Boolean {
    _INKOC.hasher_write(self, value)
  }

  def to_hash -> Integer {
    _INKOC.hasher_to_hash(self)
  }

  def reset -> Self {
    _INKOC.hasher_reset(self)
  }
}

## The state used for creating a `DefaultHasher`.
##
## Different `DefaultHasher` instances created from the same `RandomState` will
## produce the same hash values for the same input values. However, hashers
## created from different `RandomState` objects will produce different hashes.
object RandomState {
  def init {
    let @key0 = random.incremental_integer
    let @key1 = random.incremental_integer
  }

  ## Creates a new `DefaultHasher`.
  def to_hasher -> DefaultHasher {
    DefaultHasher.new(key0: @key0, key1: @key1)
  }
}

## A single key-value pair
object Pair!(K: Hash + Equal, V) {
  def init(key: K, value: V, hash: Integer) {
    ## The key that was hashed.
    let @key = key

    ## The value of our key.
    let @value = value

    ## The hash value of our key.
    let @hash = hash

    ## The distance of this pair relative to its desired index.
    let mut @distance = 0
  }

  def distance -> Integer {
    @distance
  }

  def prepare_for_rehash -> Integer {
    @distance = -1
  }

  def reset_distance -> Integer {
    @distance = 0
  }

  def increase_distance -> Integer {
    @distance += 1
  }

  def reduce_distance -> Integer {
    @distance -= 1
  }

  def key -> K {
    @key
  }

  def value -> V {
    @value
  }

  def hash -> Integer {
    @hash
  }
}

## A raw HashMap-like structure that can be used for building high level data
## structures such as HashMap itself.
##
## A Table uses linear probing for finding values and Robin Hood hashing.
## Removals are performed using backwards shift deletion.
##
## For more information on these algorithms you can refer to the following
## resources:
##
## * http://codecapsule.com/2013/11/11/robin-hood-hashing/
## * http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/
## * https://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/
object Table!(K: Hash + Equal, V) {
  def init {
    ## The state to use for creating hashers.
    let @random_state = RandomState.new

    ## The buckets to store pairs in. Each bucket can only contain a single
    ## pair.
    let mut @buckets: Array!(?Pair!(K, V)) = []

    ## The number of key-value pairs stored in this table.
    let mut @length = 0

    ## The number of values that can be stored before resizing.
    let mut @capacity = 1

    ## The number of values to store before a resize is necessary.
    ## We store this value explicitly so we don't have to allocate floats every
    ## time we want to check if we need to resize.
    let mut @resize_threshold = 1
  }

  ## Returns the buckets in this table.
  def buckets -> Array!(?Pair!(K, V)) {
    @buckets
  }

  ## Returns the number of key-value pairs stored in this table.
  def length -> Integer {
    @length
  }

  ## Resizes and rehashes the table.
  def resize {
    @capacity = @capacity * 2
    @resize_threshold = (LOAD_FACTOR * @capacity.to_float).to_integer

    # We immediately resize the Array (by padding it wil Nil values) so we don't
    # need to do this when inserting new elements.
    @buckets[@capacity - 1] = Nil

    rehash
  }

  ## Rehashes the table.
  ##
  ## Rehashing is done in two separate steps:
  ##
  ## 1. We set the distances of all pairs to -1.
  ## 2. We relocate all pairs with a distance of -1.
  ##
  ## This approach removes the need for allocating a new `Array` to copy all the
  ## pairs to, at the cost of requiring slightly more CPU time.
  def rehash {
    @buckets.each do (pair) {
      pair.prepare_for_rehash
    }

    @buckets.each_with_index do (pair, index) {
      pair.distance.negative?.if_true {
        @buckets[index] = Nil
        pair.reset_distance
        insert_pair(pair: *pair, increment_length: False)
      }
    }
  }

  ## Returns `True` if this table should be resized.
  def resize? -> Boolean {
    @length >= @resize_threshold
  }

  ## Returns the hash for the given key.
  def hash_key(key: K) -> Integer {
    let hasher = @random_state.to_hasher

    key.hash(hasher)

    hasher.to_hash
  }

  ## Returns the desired bucket index for the given hash.
  def desired_bucket(hash: Integer) -> Integer {
    hash % @capacity
  }

  ## Inserts a new pair into the table.
  ##
  ## If the `increment_length` argument is set to `True` we'll also increment
  ## the length of the table should the pair be a newly inserted pair.
  def insert_pair(mut pair: Pair!(K, V), increment_length = True) {
    let mut index = desired_bucket(pair.hash)

    {
      let existing = @buckets[index]

      existing.if true: {
        existing.key == pair.key
          .if_true {
            @buckets[index] = pair
            return
          }

        # Per Robin Hood hashing we swap the to-insert and existing pairs if the
        # existing pair is closer to its desired bucket.
        existing.distance < pair.distance
          .if_true {
            @buckets[index] = pair
            pair = *existing
          }
      }, false: {
        increment_length.if_true {
          @length += 1
        }

        @buckets[index] = pair
        return
      }

      index = desired_bucket(index + 1)
      pair.increase_distance
    }.loop
  }

  ## Returns the index of the bucket the key resides in.
  def bucket_index(key: K) -> ?Integer {
    let mut index = desired_bucket(hash_key(key))
    let desired = index
    let mut pair = @buckets[index]

    { pair.key != key }.while_true {
      # Finding an empty bucket can mean two things:
      #
      # 1. The initial desired bucket is not used, meaning our key definitely
      #    does not exist.
      # 2. The initial desired bucket is used, and we ran into the next
      #    available bucket. This means the key also does not exist, because it
      #    would otherwise use this available bucket.
      #
      # This early return ensures we don't iterate over all buckets if we are
      # certain we won't be able to find the key.
      pair == Nil
        .if_true {
          return
        }

      index = desired_bucket(index + 1)

      index == desired
        .if_true {
          # We cycled through all buckets but didn't find a matching pair.
          return
        }

      pair = @buckets[index]
    }

    index
  }

  ## Removes the key from this table, returning its value (if any).
  def remove(key: K) -> ?V {
    let index = bucket_index(key)

    index.if true: {
      let pair = @buckets[*index]

      @buckets[*index] = Nil
      @length -= 1

      backwards_shift(*index + 1)

      pair.value
    }, false: {
      Nil
    }
  }

  ## Shifts all pairs to the left starting at the given bucket index.
  def backwards_shift(mut index: Integer) {
    let mut pair = @buckets[index]

    { pair.and { (*pair).distance.positive? } }.while_true {
      @buckets[index - 1] = pair
      @buckets[index] = Nil

      pair.reduce_distance

      index += 1
      pair = @buckets[index]
    }
  }
}

impl Index!(K, V) for Table!(K, V) {
  def [](key: K) -> ?V {
    let index = bucket_index(key)

    index.if true: {
      @buckets[*index].value
    }, false: {
      Nil
    }
  }
}

impl SetIndex!(K, V) for Table!(K, V) {
  def []=(key: K, value: V) -> V {
    resize?.if_true {
      resize
    }

    insert_pair(Pair.new(key: key, value: value, hash: hash_key(key)))

    value
  }
}

## An unordered hash map using linear probing and Robin Hood bucket stealing.
##
## The keys in a `HashMap` can be any object that implements the `Hash` and
## `Equal` traits. The values can be of any type. It's possible to store keys
## (or values) of different types but this will require the use of `Dynamic`.
##
## A `HashMap` is unordered, meaning that keys can be returned in a (seemingly)
## random order.
object HashMap!(K: Hash + Equal, V) {
  ## Creates a new, empty `HashMap`.
  def init {
    let mut @table = Table.new
  }

  ## Removes the given key, returning its value if the key was present in the
  ## map.
  ##
  ## # Examples
  ##
  ## Removing a non-existing key:
  ##
  ##     let mut map = HashMap.new
  ##
  ##     map.remove('name') # => Nil
  ##
  ## Removing an existing key:
  ##
  ##     let mut map = HashMap.new
  ##
  ##     map['name'] = 'Alice'
  ##
  ##     map.remove('name') # => 'Alice'
  def remove(key: K) -> ?V {
    @table.remove(key)
  }

  ## Returns `True` if the map is empty.
  ##
  ## # Examples
  ##
  ## Using a map that is empty:
  ##
  ##     let map = HashMap.new
  ##
  ##     map.empty? # => True
  ##
  ## Using a map that is not empty:
  ##
  ##     let mut map = HashMap.new
  ##
  ##     map['name'] = 'Alice'
  ##
  ##     map.empty? # => False
  def empty? -> Boolean {
    length.zero?
  }

  ## Calls the supplied `Block` for every key value pair in this map.
  ##
  ## This method differs from `Iterator.each` in that it yields the key and
  ## value as separate arguments instead of yielding a `Pair` object.
  ##
  ## # Examples
  ##
  ## Iterating over the keys and values of a `HashMap`:
  ##
  ##     let mut map = HashMap.new
  ##
  ##     map['name'] = 'Alice'
  ##
  ##     map.each do (key, value) {
  ##       key   # => 'name'
  ##       value # => 'Alice'
  ##     }
  def each(block: do (K, V)) {
    iter.each do (pair) {
      block.call(pair.key, pair.value)
    }
  }

  ## Returns an `Iterator` that iterates over all key-value pairs in this
  ## `HashMap`.
  ##
  ## # Examples
  ##
  ## Iterating over all the key-value pairs:
  ##
  ##     let mut map = HashMap.new
  ##
  ##     map['name'] = 'Alice'
  ##
  ##     map.iter.each do (pair) {
  ##       pair.key   # => 'name'
  ##       pair.value # => 'Alice'
  ##     }
  def iter -> Iterator!(Pair!(K, V)) {
    let mut index = 0
    let max = @table.buckets.length

    Enumerator.new(
      while: { index < max },
      yield: {
        let mut found: ?Pair!(K, V) = Nil

        {
          index < max
            .and { found == Nil }
        }.while_true {
          found = @table.buckets[index]
          index += 1
        }

        found
      }
    )
  }

  ## Returns an `Iterator` visiting all the keys in this `HashMap`.
  ##
  ## # Examples
  ##
  ## Iterating over the keys in a `HashMap`:
  ##
  ##     let mut map = HashMap.new
  ##
  ##     map['name'] = 'Alice'
  ##
  ##     map.keys.each do (key) {
  ##       key # => 'name'
  ##     }
  def keys -> Iterator!(K) {
    iter.map do (pair) { pair.key }
  }

  ## Returns an `Iterator` visiting all the values in this `HashMap`.
  ##
  ## # Examples
  ##
  ## Iterating over the values in a `HashMap`:
  ##
  ##     let mut map = HashMap.new
  ##
  ##     map['name'] = 'Alice'
  ##
  ##     map.values.each do (value) {
  ##       value # => 'Alice'
  ##     }
  def values -> Iterator!(V) {
    iter.map do (pair) { pair.value }
  }

  ## Returns `True` if `self` contains the key `key`.
  ##
  ## # Examples
  ##
  ## Checking if a `HashMap` defines a key:
  ##
  ##     let map = %['name': 'Alice']
  ##
  ##     map.key?('name') # => True
  ##     map.key?('city') # => False
  def key?(key: K) -> Boolean {
    @table.bucket_index(key).if true: {
      True
    }, false: {
      False
    }
  }
}

impl Equal for HashMap!(K, V) {
  ## Returns `True` if `self` and the given `HashMap` are identical to each
  ## other.
  ##
  ## # Examples
  ##
  ## Comparing two `HashMap` instances:
  ##
  ##     %w['name': 'Alice'] == %w['name': 'Alice'] # => True
  def ==(other: Self) -> Boolean where V: Equal {
    length == other.length
      .if_false {
        return False
      }

    each do (key, value) {
      other.key?(key).if_false {
        return False
      }

      # We use `(*...)` here as otherwise the parser won't parse this code
      # properly.
      value == (*other[key])
        .if_false {
          return False
        }
    }

    True
  }
}

impl Index!(K, V) for HashMap!(K, V) {
  ## Returns the value for the given key, if any.
  ##
  ## # Examples
  ##
  ## Getting the value of a non-existing key:
  ##
  ##     let map = HashMap.new
  ##
  ##     map['name'] # => Nil
  ##
  ## Getting the value of an existing key:
  ##
  ##     let mut map = HashMap.new
  ##
  ##     map['name'] = 'Alice'
  ##
  ##     map['name'] # => 'Alice'
  def [](key: K) -> ?V {
    @table[key]
  }
}

impl SetIndex!(K, V) for HashMap!(K, V) {
  ## Inserts the given key and value into this map, returning the inserted
  ## value.
  ##
  ## # Examples
  ##
  ## Inserting a new key-value pair:
  ##
  ##     let mut map = HashMap.new
  ##
  ##     map['name'] = 'Alice' # => 'Alice'
  def []=(key: K, value: V) -> V {
    @table[key] = value
  }
}

impl Length for HashMap!(K, V) {
  ## Returns the number of key-value pairs in this map.
  ##
  ## # Examples
  ##
  ## Using an empty map:
  ##
  ##     let map = HashMap.new
  ##
  ##     map.length # => 0
  ##
  ## Using a map with one key-value pair:
  ##
  ##     let mut map = HashMap.new
  ##
  ##     map['name'] = 'Alice'
  ##
  ##     map.length # => 1
  def length -> Integer {
    @table.length
  }
}

## Returns a `HashMap` using two arrays: one containing the keys and one
## containing the values.
##
## Using this method is semantically equivalent to creating a `HashMap` using
## `HashMap.new` and sending `[]=` to the `HashMap` for every key-value pair.
## In other words, this:
##
##     %['name': 'Alice']
##
## Is the same as this:
##
##     let mut map = HashMap.new
##
##     map['name'] = 'Alice'
##
## # Compiler optimisation
##
## To remove the need for allocating two arrays for `HashMap` literals, the
## compiler may decide to optimise this method into separate `[]=` message sends
## as illustrated above.
##
## # Examples
##
## Creating a `HashMap` from two arrays:
##
##     import std::hash_map
##
##     hash_map.from_array(['name'], ['Alice']) # => %['name': 'Alice']
def from_array!(K: Hash + Equal, V)(
  keys: Array!(K),
  values: Array!(V)
) -> HashMap!(K, V) {
  let mut map = HashMap.new
  let max_index = values.length - 1

  keys.length == values.length
    .if_false {
      process.panic('An equal number of keys and values must be specified')
    }

  keys.each_with_index do (key: K, index: Integer) {
    index > max_index
      .if_true {
        return map
      }

    map[key] = *values[index]
  }

  map
}
