# The Nil type.
#
# Nil is used to represent nothingness. Unlike the usual `NULL` value found
# elsewhere `Nil` is an actual object you can send messages to.
#
# # Sending Messages
#
# `Nil` implements a variety of methods, but sending any unknown messages to
# `Nil` will return another `Nil`. This makes it easy to work with methods that
# may return `Nil` without having to include checks for `Nil` values all over
# the place.
import std::conversion::(ToString, ToFloat, ToInteger)
import std::hash::Hash
import std::operators::(Equal, Match)

impl NilType {
  # Always returns `Nil` itself.
  #
  # # Examples
  #
  # Obtaining a new `Nil`:
  #
  #     NilType.new # => Nil
  #
  # You should not have to do this though, as `Nil` is already an instance of
  # `NilType`.
  static def new -> Self {
    self
  }

  def truthy? -> Boolean {
    False
  }
}

impl ToInteger for NilType {
  # Always return `0`.
  #
  # # Examples
  #
  # Converting a `Nil` to an `Integer`:
  #
  #     Nil.to_integer # => 0
  def to_integer -> Integer {
    0
  }
}

impl ToFloat for NilType {
  # Always returns `0.0`.
  #
  # # Examples
  #
  # Converting a `Nil` to a `Float`:
  #
  #     Nil.to_float # => 0.0
  def to_float -> Float {
    0.0
  }
}

impl ToString for NilType {
  # Always returns an empty string.
  def to_string -> String {
    ''
  }
}

impl Equal for NilType {
  def ==(other: Any) -> Boolean {
    _INKOC.object_equals(self, other)
  }
}

impl Hash for NilType {}

impl Match!(Object) for NilType {
  # Returns `True` if the given argument is `Nil`.
  def =~(other: Object) -> Boolean {
    _INKOC.object_equals(Nil, other)
  }
}
