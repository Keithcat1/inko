# The Nil type.
#
# Nil (an instance of NilType) is used to signal the absence of a value, such as
# when a method doesn't specify a return type.
#
# A Nil is not the same as NULL. NULL represents memory address 0x0, while Nil
# is just a regular Inko object like any other.
#
# Most of the time you won't be interacting with Nil. Instead, you'll be using
# the `Option` type as defined in the `std::option` module.
import std::operators::Equal

impl NilType {
  # Always returns `Nil` itself.
  static def new -> Self {
    self
  }

  # Always returns `False`.
  def truthy? -> Boolean {
    False
  }
}

impl Equal for NilType {
  def ==(other: Self) -> Boolean {
    _INKOC.object_equals(self, other)
  }
}
