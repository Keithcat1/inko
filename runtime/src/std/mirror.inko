# ObjectMirror based reflection for objects
#
# This module provides a reflection API based on the concept of
# [Mirrors](https://en.wikipedia.org/wiki/Mirror_(programming)). Mirrors are not
# exposed unless this module is imported.
#
# The use of mirrors for reflection provides several benefits:
#
# 1. Reflection is decoupled from the objects reflected upon.
# 2. Objects won't be polluted with reflection specific attributes.
# 3. It's possible to reflect on remote objects (e.g. an object in another
#    process or on another computer).
# 4. One can remove the mirror system entirely if desired, whereas removing
#    random methods defined on `Object` is much harder.
#
# Let's illustrate the differences between a mirror based API and the usual
# reflection APIs found in most languages. Say we have a class based language
# and we want to obtain the class of an object. In most languages we would
# achieve this by writing code along the lines of the following:
#
#     some_object.class
#
# Here the "class" message would return whatever the class is of the receiving
# object. Another example would be dynamically retrieving an attribute by its
# name. Typically this is done as follows:
#
#     some_object.get_attribute('my_attribute')
#
# In both cases the methods are exposed directly to the object.
#
# When using mirrors there are two steps required to perform reflection:
#
# 1. Create a mirror for a certain object.
# 2. Use the mirror's API to perform reflection.
#
# For our first example this means we'd end up with code along the lines of the
# following:
#
#     reflect(some_object).class
#
# Here the `reflect` method would return some kind of mirror and the `class`
# message would return the class of the object reflected upon. Translating the
# second example to a mirror based approach results in similar code:
#
#     reflect(some_object).get_attribute('my_attribute')
#
# # Using Mirrors
#
# Using mirrors in Inko is straightforward. Let's say we want to obtain the
# value of an attribute using the mirror API. We can do so as follows:
#
#     import std::mirror
#
#     class Person {
#       @name: String
#
#       static def new(name: String) -> Self {
#         Self { @name = name }
#       }
#     }
#
#     let person = Person.new('alice')
#
#     mirror.reflect(person).get_attribute('@name') # => 'Alice'
#
# You can also use mirrors to format objects in a human-readable way. This is
# useful when debugging or using a REPL:
#
#     import std::mirror
#
#     class Person {
#       @name: String
#
#       static def new(name: String) -> Self {
#         Self { @name = name }
#       }
#     }
#
#     let person = Person.new('alice')
#
#     reflect(person).inspect # => 'Person { @name = "Alice" }'
#
# # Performance
#
# Like most reflection systems mirrors do come with overhead. In particular, a
# mirror has to be allocated every time you need one. As such we recommend
# against using mirrors/reflection in performance critical code.
import std::format::(DefaultFormatter, Format, Formatter)
import std::fs::path::Path
import std::hash::Hash
import std::loop::(loop)
import std::map::Map
import std::module::Module
import std::operators::Equal
import std::option::Option
import std::pair::(Triple, Pair)
import std::set::Set

# The default name to use for objects that don't have an explicit name.
let DEFAULT_OBJECT_NAME = 'Object'

# The name of the attribute that contains the name of an object.
let OBJECT_NAME_ATTRIBUTE = '@_object_name'

# The name of the attribute that stores all the implemented traits.
let IMPLEMENTED_TRAITS_ATTRIBUTE = '@_implemented_traits'

# An object for reflecting upon another object.
trait Mirror: Format {
  # Returns the object reflected upon.
  def subject -> Any

  # Returns `True` if the subject is the exact same object as the given
  # argument.
  #
  # This method works for any two objects, and doesn't depend on the
  # `same_object?` and `==` methods.
  def subject_same_object?(other: Any) -> Boolean {
    _INKOC.object_equals(subject, other)
  }

  # Returns the object the subject is an instance of.
  #
  # # Examples
  #
  # Obtaining the object a subject is an instance of:
  #
  #     import std::mirror::ObjectMirror
  #
  #     ObjectMirror.new('hello').instance_of # => String
  def instance_of -> Any {
    _INKOC.get_prototype(subject)
  }

  # Returns the value of an attribute.
  #
  # Since attributes may not be set this method can return a value of any type.
  #
  # # Examples
  #
  # Getting the value of an undefined attribute:
  #
  #     import std::mirror::ObjectMirror
  #
  #     class Dummy {}
  #
  #     let obj = Dummy {}
  #     let mirror = ObjectMirror.new(obj)
  #
  #     mirror.get_attribute(obj, 'name') # => Nil
  #
  # Getting the value of an existing attribute:
  #
  #     import std::mirror::ObjectMirror
  #
  #     class Dummy {
  #       @name: String
  #     }
  #
  #     let obj = Dummy { @name = 'Alice' }
  #     let mirror = ObjectMirror.new(obj)
  #
  #     mirror.get_attribute('name') # => 'Alice'
  def get_attribute(name: String) -> Any {
    _INKOC.get_attribute(subject, name)
  }

  # Returns the names of all the attributes defined directly on the subject.
  #
  # # Examples
  #
  # Getting the attributes of an object:
  #
  #     import std::mirror::ObjectMirror
  #
  #     class Person {
  #       @name: String
  #
  #       static def new(name: String) -> Self {
  #         Self { @name = name }
  #       }
  #     }
  #
  #     let person = Person.new('Alice')
  #     let mirror = ObjectMirror.new(person)
  #
  #     mirror.attributes # => Array.new('@name')
  def attributes -> Array!(String) {
    _INKOC.get_attribute_names(subject) as Array!(String)
  }

  # Returns `True` if the subject is an instance of the given object.
  #
  # # Examples
  #
  # Checking if a `String` is an instance of `String`:
  #
  #     import std::mirror::ObjectMirror
  #
  #     let string_mirror = ObjectMirror.new('hello')
  #
  #     string_mirror.instance_of?(String) # => True
  #     string_mirror.instance_of?(Integer) # => False
  def instance_of?(other: Any) -> Boolean {
    let mut proto = _INKOC.get_prototype(subject)

    loop {
      _INKOC.object_equals(proto, other).if_true { return True }

      proto = _INKOC.get_prototype(proto) as Object

      _INKOC.object_equals(proto, Nil).if_true { return False }
    }
  }

  # Returns `True` if the subject implements the given trait.
  #
  # # Examples
  #
  # Checking if an object implements a trait:
  #
  #     import std::mirror::ObjectMirror
  #
  #     trait Trait1 {}
  #     trait Trait2 {}
  #
  #     class ExampleObject impl Trait1 {}
  #
  #     let mirror = ObjectMirror.new(ExampleObject.new)
  #
  #     mirror.implements_trait?(Trait1) # => True
  #     mirror.implements_trait?(Trait2) # => False
  def implements_trait?(find: Trait) -> Boolean {
    let mut subject = subject

    loop {
      let traits = _INKOC.get_attribute(subject, IMPLEMENTED_TRAITS_ATTRIBUTE)

      traits.if_true {
        let exists = _INKOC.get_attribute(traits, find)

        _INKOC.object_equals(exists, True).if_true { return True }
      }

      subject = _INKOC.get_prototype(subject)

      # If an object does not have a prototype (e.g. Object), Nil will be
      # returned. Since we don't know the difference between "has no prototype"
      # and "the prototype is Nil", we will just bail out once we hit Nil as the
      # prototype. This works fine for Nil itself, because there is only a
      # single instance of it.
      _INKOC.object_equals(subject, Nil).if_true { return False }
    }
  }

  # Returns the traits implemented by the subject.
  #
  # # Examples
  #
  # Obtaining the implemented traits of an object:
  #
  #     import std::conversion::ToString
  #     import std::mirror::ObjectMirror
  #
  #     class Person impl ToString {
  #       def to_string -> String {
  #         'Alice'
  #       }
  #     }
  #
  #     ObjectMirror.new(Person).implemented_traits # => Array.new(ToString)
  def implemented_traits -> Array!(Trait) {
    let impl_set = get_attribute(IMPLEMENTED_TRAITS_ATTRIBUTE) as Any

    _INKOC.object_equals(impl_set, Nil).if_true { return Array.new }

    _INKOC.get_attribute_names(impl_set) as Array!(Trait)
  }

  # Returns the names of all instance attributes defined directly on the
  # subject.
  #
  # Getting the attributes of an object:
  #
  #     import std::mirror::ObjectMirror
  #
  #     class Person {
  #       @name: String
  #
  #       static def new(name: String) -> Self {
  #         Self { @name = name }
  #       }
  #     }
  #
  #     let person = Person.new('Alice')
  #
  #     ObjectMirror.new(person).attributes # => Array.new('@name')
  #     ObjectMirror.new(Person).attributes # => Array.new('@_object_name')
  def instance_attributes -> Array!(String) {
    let instance_attributes = Array.new

    attributes.each do (attribute) {
      attribute.starts_with?('@').if_true {
        instance_attributes.push(attribute)
      }
    }

    instance_attributes
  }

  # Formats the mirrored object in a human-readable format for debugging
  # purposes.
  def inspect -> String {
    format(DefaultFormatter.new).to_string
  }
}

# An object that can be mirrored.
#
# This trait can be implemented by objects wishing to provide a custom mirror.
trait Mirrored {
  # Returns a mirror for `self`.
  def mirror -> Mirror
}

# A generic mirror for a regular object.
class ObjectMirror {
  # The object that is being mirrored.
  @subject: Any

  static def new(subject: Any) -> Self {
    Self { @subject = subject }
  }

  # Sets the attribute of an object to the given value, returning the stored
  # value.
  #
  # # Examples
  #
  # Setting an attribute:
  #
  #     import std::mirror::ObjectMirror
  #
  #     let mut obj = Object.new
  #
  #     ObjectMirror.new(obj).set_attribute('name', 'Alice') # => 'Alice'
  def set_attribute!(V)(name: String, value: V) -> V {
    _INKOC.set_attribute(@subject, name, value)
  }

  # Returns the name of the subject.
  #
  # # Examples
  #
  # Returning the name of an object:
  #
  #     import std::mirror::ObjectMirror
  #
  #     class Person {}
  #
  #     ObjectMirror.new(Person).name # => 'Person'
  def name -> String {
    match(let name = get_attribute(OBJECT_NAME_ATTRIBUTE)) {
      as String -> { name }
      else -> { DEFAULT_OBJECT_NAME }
    }
  }
}

impl Format for ObjectMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    let attributes = instance_attributes

    formatter.push(name)

    attributes.empty?.if_true { return formatter }

    formatter.push(' {')

    attributes.each_with_index do (attr_name, index) {
      index.positive?.if_true { formatter.push(',') }

      formatter.push(' ')
      formatter.push(attr_name)
      formatter.push(' = ')

      formatter.descend {
        reflect(get_attribute(attr_name)).format(formatter)
      }
    }

    formatter.push(' }')
    formatter
  }
}

impl Mirror for ObjectMirror {
  def subject -> Any {
    @subject
  }
}

# A mirror for a `Block`.
class BlockMirror {
  # The block that is being mirrored.
  @subject: Block

  static def new(subject: Block) -> Self {
    Self { @subject = subject }
  }

  # Returns the file path of the file the block is defined in.
  #
  # # Examples
  #
  # Returning the file path of a method:
  #
  #     import std::mirror::BlockMirror
  #
  #     let method = def example {}
  #     let mirror = BlockMirror.new(method)
  #
  #     mirror.path # => Path
  def path -> Path {
    let path_str = _INKOC.block_metadata(@subject, 1) as String

    Path.new(path_str)
  }

  # Returns the line number the block is defined on.
  #
  # # Examples
  #
  # Returning the line number of a method:
  #
  #     import std::mirror::BlockMirror
  #
  #     let method = def example {}
  #     let mirror = BlockMirror.new(method)
  #
  #     mirror.line # => 3
  def line -> Integer {
    _INKOC.block_metadata(@subject, 2) as Integer
  }

  # Returns the argument names of the block.
  #
  # # Examples
  #
  # Returning the argument names of a method:
  #
  #     import std::mirror::BlockMirror
  #
  #     let method = def example(number) {}
  #     let mirror = BlockMirror.new(method)
  #
  #     mirror.argument_names # => Array.new('@subject', 'number')
  def argument_names -> Array!(String) {
    _INKOC.block_metadata(@subject, 3) as Array!(String)
  }

  # Returns the number of required arguments.
  #
  # # Examples
  #
  # Returning the argument names of a method:
  #
  #     import std::mirror::BlockMirror
  #
  #     let method = def example(number) {}
  #     let mirror = BlockMirror.new(method)
  #
  #     mirror.required_arguments # => 2
  def required_arguments -> Integer {
    _INKOC.block_metadata(@subject, 4) as Integer
  }

  # Returns the name of the block.
  #
  # # Examples
  #
  # Returning the name of a method:
  #
  #     import std::mirror::BlockMirror
  #
  #     let method = def example {}
  #     let mirror = BlockMirror.new(method)
  #
  #     mirror.name # => 'example'
  def name -> String {
    _INKOC.block_metadata(@subject, 0) as String
  }
}

impl Format for BlockMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push('Block')
    formatter
  }
}

impl Mirror for BlockMirror {
  def subject -> Block {
    @subject
  }
}

# A mirror for a `Module`.
class ModuleMirror {
  @subject: Module

  static def new(subject: Module) -> Self {
    Self { @subject = subject }
  }

  # Returns the name of the module.
  def name -> String {
    _INKOC.module_info(@subject, 0)
  }

  # Returns the path of the source file that defined the module.
  def source_path -> Path {
    Path.new(_INKOC.module_info(@subject, 1))
  }
}

impl Format for ModuleMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push('Module { ')
    formatter.push(name)
    formatter.push(' }')
    formatter
  }
}

impl Mirror for ModuleMirror {
  def subject -> Module {
    @subject
  }
}

# A mirror for an `Array`.
class ArrayMirror!(T) {
  # The `Array` that is mirrored.
  @subject: Array!(T)

  static def new(subject: Array!(T)) -> Self {
    Self { @subject = subject }
  }
}

impl Format for ArrayMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push('Array')

    @subject.empty?.if_true { return formatter }

    formatter.push(' { ')

    @subject.each_with_index do (value, index) {
      index.positive?.if_true { formatter.push(', ') }

      formatter.descend {
        reflect(value).format(formatter)
      }
    }

    formatter.push(' }')
    formatter
  }
}

impl Mirror for ArrayMirror {
  def subject -> Array!(T) {
    @subject
  }
}

# A mirror for a `ByteArray`.
class ByteArrayMirror {
  # The `ByteArray` that is mirrored.
  @subject: ByteArray

  static def new(subject: ByteArray) -> Self {
    Self { @subject = subject }
  }
}

impl Format for ByteArrayMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push('ByteArray { ')
    formatter.push(@subject.length.to_string)
    formatter.push(' bytes }')
    formatter
  }
}

impl Mirror for ByteArrayMirror {
  def subject -> ByteArray {
    @subject
  }
}

# A mirror for a `Map`
class MapMirror!(K: Hash + Equal, V) {
  # The `Map` that is mirrored.
  @subject: Map!(K, V)

  static def new!(K: Hash + Equal, V)(subject: Map!(K, V)) -> MapMirror!(K, V) {
    Self { @subject = subject }
  }
}

impl Format for MapMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    let mut index = 0

    formatter.push('Map')

    @subject.empty?.if_true { return formatter }

    formatter.push(' { ')

    @subject.each do (key, value) {
      index.positive?.if_true { formatter.push(', ') }

      formatter.descend {
        reflect(key).format(formatter)
      }

      formatter.push(': ')

      formatter.descend {
        reflect(value).format(formatter)
      }

      index += 1
    }

    formatter.push(' }')
    formatter
  }
}

impl Mirror for MapMirror {
  def subject -> Map!(K, V) {
    @subject
  }
}

# A mirror for a `Set`.
class SetMirror!(V: Hash + Equal) {
  # The `Set` that is mirrored.
  @subject: Set!(V)

  static def new!(V: Hash + Equal)(subject: Set!(V)) -> SetMirror!(V) {
    Self { @subject = subject }
  }
}

impl Format for SetMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    let mut index = 0

    formatter.push('Set')

    @subject.empty?.if_true { return formatter }

    formatter.push(' { ')

    @subject.each do (value) {
      index.positive?.if_true { formatter.push(', ') }

      formatter.descend {
        reflect(value).format(formatter)
      }

      index += 1
    }

    formatter.push(' }')
    formatter
  }
}

impl Mirror for SetMirror {
  def subject -> Set!(V) {
    @subject
  }
}

# A mirror for a `Pair`.
class PairMirror!(A, B) {
  # The `Pair` that is mirrored
  @subject: Pair!(A, B)

  static def new!(A, B)(subject: Pair!(A, B)) -> PairMirror!(A, B) {
    Self { @subject = subject }
  }
}

impl Format for PairMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push('Pair { ')

    formatter.descend {
      reflect(@subject.first).format(formatter)
    }

    formatter.push(', ')

    formatter.descend {
      reflect(@subject.second).format(formatter)
    }

    formatter.push(' }')
    formatter
  }
}

impl Mirror for PairMirror {
  def subject -> Pair!(A, B) {
    @subject
  }
}

# A mirror for a `Triple`.
class TripleMirror!(A, B, C) {
  # The `Triple` that is mirrored
  @subject: Triple!(A, B, C)

  static def new!(A, B, C)(
    subject: Triple!(A, B, C)
  ) -> TripleMirror!(A, B, C) {
    Self { @subject = subject }
  }
}

impl Format for TripleMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push('Triple { ')

    formatter.descend {
      reflect(@subject.first).format(formatter)
    }

    formatter.push(', ')

    formatter.descend {
      reflect(@subject.second).format(formatter)
    }

    formatter.push(', ')

    formatter.descend {
      reflect(@subject.third).format(formatter)
    }

    formatter.push(' }')
    formatter
  }
}

impl Mirror for TripleMirror {
  def subject -> Triple!(A, B, C) {
    @subject
  }
}

# A mirror for an `Integer`.
class IntegerMirror {
  # The `Integer` that is mirrored.
  @subject: Integer

  static def new(subject: Integer) -> Self {
    Self { @subject = subject }
  }
}

impl Format for IntegerMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push(@subject.to_string)
    formatter
  }
}

impl Mirror for IntegerMirror {
  def subject -> Integer {
    @subject
  }
}

# A mirror for a `Float`.
class FloatMirror {
  # The `Float` that is mirrored.
  @subject: Float

  static def new(subject: Float) -> Self {
    Self { @subject = subject }
  }
}

impl Format for FloatMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push(@subject.to_string)
    formatter
  }
}

impl Mirror for FloatMirror {
  def subject -> Float {
    @subject
  }
}

# A mirror for a `String`.
class StringMirror {
  # The `String` that is mirrored.
  @subject: String

  static def new(subject: String) -> Self {
    Self { @subject = subject }
  }
}

impl Format for StringMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push(_INKOC.string_format_debug(@subject))
    formatter
  }
}

impl Mirror for StringMirror {
  def subject -> String {
    @subject
  }
}

# A mirror for a `Boolean`
class BooleanMirror {
  # The `Boolean` that is mirrored.
  @subject: Boolean

  static def new(subject: Boolean) -> Self {
    Self { @subject = subject }
  }
}

impl Format for BooleanMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push(@subject.to_string)
    formatter
  }
}

impl Mirror for BooleanMirror {
  def subject -> Boolean {
    @subject
  }
}

# A mirror for `Nil`
class NilMirror {
  # The `Nil` that is mirrored.
  @subject: Nil

  static def new(subject: Nil) -> Self {
    Self { @subject = subject }
  }
}

impl Format for NilMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    formatter.push('Nil')
    formatter
  }
}

impl Mirror for NilMirror {
  def subject -> Nil {
    @subject
  }
}

# A mirror for an `Option`.
class OptionMirror!(T) {
  @subject: ?T

  static def new!(T)(subject: ?T) -> OptionMirror!(T) {
    Self { @subject = subject }
  }
}

impl Format for OptionMirror {
  def format!(F: Formatter)(formatter: F) -> F {
    @subject.some?.if(
      true: {
        formatter.push('Some(')
        formatter.descend { reflect(@subject.get).format(formatter) }
        formatter.push(')')
      },
      false: { formatter.push('None') }
    )

    formatter
  }
}

impl Mirror for OptionMirror {
  def subject -> ?T {
    @subject
  }
}

# Returns a mirror for the given object.
#
# If an object implements the `Mirrored` trait, the implementation is used to
# determine what mirror to return. If the trait isn't implemented, a mirror is
# returned based on the `subject` argument type.
def reflect(subject: Any) -> Mirror {
  match(let matched = subject) {
    as Integer -> { IntegerMirror.new(matched) }
    as Float -> { FloatMirror.new(matched) }
    as String -> { StringMirror.new(matched) }
    as Boolean -> { BooleanMirror.new(matched) }
    as NilType -> { NilMirror.new(matched) }
    as Array -> { ArrayMirror.new(matched) }
    as ByteArray -> { ByteArrayMirror.new(matched) }
    as Map -> { MapMirror.new(matched) }
    as Set -> { SetMirror.new(matched) }
    as Pair -> { PairMirror.new(matched) }
    as Triple -> { TripleMirror.new(matched) }
    as Block -> { BlockMirror.new(matched) }
    as Module -> { ModuleMirror.new(matched) }
    as Option -> { OptionMirror.new(matched) }
    as Mirrored -> { matched.mirror }
    else -> { ObjectMirror.new(subject) }
  } as Mirror
}
