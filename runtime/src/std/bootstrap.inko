# A module for setting up the basic building blocks other modules depend on.
#
# This module is the very first module imported and executed. Common constructs
# such as `object` and `trait` are not yet available at this point.

# All these constants will be available as globals to all other modules.
let Trait = _INKOC.get_trait_prototype
let Boolean = _INKOC.get_boolean_prototype
let True = _INKOC.get_true
let False = _INKOC.get_false
let Nil = _INKOC.get_nil
let NilType = _INKOC.get_nil_prototype
let String = _INKOC.get_string_prototype
let Integer = _INKOC.get_integer_prototype
let Float = _INKOC.get_float_prototype
let Block = _INKOC.get_block_prototype
let Array = _INKOC.get_array_prototype
let ByteArray = _INKOC.get_byte_array_prototype

# Set the object names for the various built-in objects. Normally this is done
# automatically when creating an object using the `object` keyword. Since these
# built-ins are set up in the VM we must do this manually.
_INKOC.set_object_name(Trait, 'Trait')
_INKOC.set_object_name(Boolean, 'Boolean')
_INKOC.set_object_name(String, 'String')
_INKOC.set_object_name(NilType, 'NilType')
_INKOC.set_object_name(Integer, 'Integer')
_INKOC.set_object_name(Float, 'Float')
_INKOC.set_object_name(Array, 'Array')
_INKOC.set_object_name(Block, 'Block')
_INKOC.set_object_name(ByteArray, 'ByteArray')

# The Object trait provides basic functionality for all user-defined objects.
#
# The methods of this trait are _only_ available to instances of objects. Traits
# and objects themselves (e.g. the String type) don't have access to these
# methods. The are three reasons for this:
#
# 1. There is no common behaviour between traits and objects, each one is unique
#    (e.g. objects aren't required to all respond to `new`).
# 2. If simplifies method lookups, leading to better method call performance.
# 3. It simply isn't useful. For example, what's the point of `Object.truthy?`?
#    It's always going to be true anyway.
#
# This type is defined in `std::bootstrap` as it's needed early on in the
# runtime bootstrapping process, and must be available to all modules.
trait Object {
  # Returns a boolean indicating if this object evaluates to True in a boolean
  # context.
  #
  # # Examples
  #
  #     10.truthy?    # => True
  #     False.truthy? # => False
  def truthy? -> Boolean {
    True
  }

  # Calls the `true` block if the receiver evaluates to `True`, otherwise the
  # `false` block is called.
  #
  # The return value is whatever the block returned. Both the blocks must
  # return a value of the same type.
  def if!(R)(true: do -> R, false: do -> R) -> R {
    _INKOC.if(truthy?, true.call, false.call)
  }

  # Calls the supplied block if the receiver evaluates to `True`.
  def if_true!(R)(block: do -> R) {
    _INKOC.if(truthy?, block.call, Nil)
  }

  # Calls the supplied block if the receiver evaluates to `False`.
  def if_false!(R)(block: do -> R) {
    _INKOC.if(truthy?, Nil, block.call)
  }

  # Returns `True` if `self` and the given object are the exact same objects.
  #
  # Two objects are considered identical if they reside at the exact same
  # memory address. This is also known as referential equality.
  #
  # This method should not be redefined by other objects, as doing so can break
  # various parts of the Inko runtime.
  def same_object?(other: Self) -> Boolean {
    _INKOC.object_equals(self, other)
  }
}

impl Object for Boolean {}
impl Object for NilType {}
impl Object for String {}
impl Object for Integer {}
impl Object for Float {}
impl Object for Block {}
impl Object for Array {}
impl Object for ByteArray {}
