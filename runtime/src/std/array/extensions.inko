# Extensions for the `Array` type that can only be defined later on in the
# bootstrapping process.
#
# These types and methods are defined separately as otherwise `std::iterator`
# would depend on `std::array` while `std::array` would depend on
# `std::iterator`.
import std::conversion::ToString
import std::iterator::(self, Iterator)
import std::string_buffer::StringBuffer

impl Array!(T) {
  # Returns an `Iterator` that iterates over all values in `self`.
  #
  # # Examples
  #
  # Iterating over an `Array`:
  #
  #     let numbers = Array.new(10, 20, 30)
  #     let iter = numbers.iter
  #
  #     iter.next # => 10
  #     iter.next # => 20
  #     iter.next # => 30
  #     iter.next # => Nil
  def iter -> Iterator!(T) {
    iterator.index_enumerator(length) do (index) {
      self[index]
    }
  }

  # Returns an `Iterator` that iterates over all values in `self` in reverse
  # order.
  #
  # # Examples
  #
  # Iterating over an `Array` in reverse order:
  #
  #     let numbers = Array.new(10, 20, 30)
  #     let iter = numbers.iter
  #
  #     iter.next # => 30
  #     iter.next # => 20
  #     iter.next # => 10
  #     iter.next # => Nil
  def reverse_iter -> Iterator!(T) {
    iterator.reverse_index_enumerator(length) do (index) {
      self[index]
    }
  }

  # Joins the values of `self` together using the separator.
  #
  # # Examples
  #
  # Joining an empty `Array`:
  #
  #     Array.new.join(',') # => ''
  #
  # Joining an `Array` with multiple values:
  #
  #     Array.new(10, 20, 30).join(',') # => '10,20,30'
  def join(separator: String) -> String where T: ToString {
    let buffer = StringBuffer.new

    each_with_index do (value, index) {
      index.positive?.if_true {
        buffer.push(separator)
      }

      buffer.push(value.to_string)
    }

    buffer.to_string
  }
}
