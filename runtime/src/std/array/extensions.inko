# Extensions for the `Array` type that can only be defined later on in the
# bootstrapping process.
#
# These types and methods are defined separately as otherwise `std::iterator`
# would depend on `std::array` while `std::array` would depend on
# `std::iterator`.
import std::conversion::ToString

impl Array {
  # Returns an `Iterator` that iterates over all values in `self`.
  #
  # # Examples
  #
  # Iterating over an `Array`:
  #
  #     let numbers = Array.new(10, 20, 30)
  #     let iter = numbers.iter
  #
  #     iter.next # => 10
  #     iter.next # => 20
  #     iter.next # => 30
  #     iter.next # => Nil
  def iter => T {
    each do (value) { yield value }
  }

  # Returns an `Iterator` that iterates over all values in `self` in reverse
  # order.
  #
  # # Examples
  #
  # Iterating over an `Array` in reverse order:
  #
  #     let numbers = Array.new(10, 20, 30)
  #     let iter = numbers.reverse_iter
  #
  #     iter.next # => 30
  #     iter.next # => 20
  #     iter.next # => 10
  #     iter.next # => Nil
  def reverse_iter => T {
    let mut index = length - 1

    { index > -1 }.while_true {
      yield self[index]
      index -= 1
    }
  }
}
