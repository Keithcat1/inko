#! Types for tokens produced by the lexer.
import std::compiler::source_location::SourceLocation
import std::format::Inspect

## A single token produced by a `Lexer`.
trait Token: Inspect {
  ## Returns the type of the token.
  def type -> String

  ## Returns the value of the token.
  def value -> String

  ## Returns the source location of this token.
  def location -> SourceLocation

  ## Returns a `Boolean` indicating if this token is a keyword.
  def keyword? -> Boolean {
    False
  }

  ## Returns a `Boolean` indicating if this token is valid..
  def valid? -> Boolean {
    True
  }

  ## Returns a `Boolean` indicating if this token is a null token..
  def null? -> Boolean {
    False
  }
}

## A regular token used for a variety of inputs.
object RegularToken {
  def init(
    type: String,
    value: String,
    location: SourceLocation,
  ) {
    let @type = type
    let @value = value
    let @location = location
  }
}

impl Token for RegularToken {
  ## Returns the type of token.
  def type -> String {
    @type
  }

  ## Returns the value of this token.
  def value -> String {
    @value
  }

  ## Returns the source location of this token.
  def location -> SourceLocation {
    @location
  }
}

## A token used for keywords.
object KeywordToken {
  def init(
    keyword: String,
    location: SourceLocation,
  ) {
    let @keyword = keyword
    let @location = location
  }
}

impl Token for KeywordToken {
  ## Returns the type of token.
  def type -> String {
    @keyword
  }

  ## Returns the value of this token.
  def value -> String {
    @keyword
  }

  ## Returns the source location of this token.
  def location -> SourceLocation {
    @location
  }

  ## Returns `True` if the token is a keyword, such as "import".
  def keyword? -> Boolean {
    True
  }
}

## A token used for invalid input values.
object InvalidToken {
  def init(value: String, location: SourceLocation) {
    let @value = value
    let @location = location
  }
}

impl Token for InvalidToken {
  ## Returns the type of token.
  def type -> String {
    'invalid'
  }

  ## Returns the value of this token.
  def value -> String {
    @value
  }

  ## Returns the source location of this token.
  def location -> SourceLocation {
    @location
  }

  ## Returns `True` if this token is for a valid value.
  def valid? -> Boolean {
    False
  }

  ## Returns `True` if the token is a keyword, such as "import".
  def keyword? -> Boolean {
    False
  }
}

## A token used for indicating a lexer has consumed all input.
object NullToken {
  def init(location: SourceLocation) {
    let @location = location
  }
}

impl Token for NullToken {
  ## Returns the type of token.
  def type -> String {
    'null'
  }

  ## Returns the value of this token.
  def value -> String {
    ''
  }

  ## Returns the source location of this token.
  def location -> SourceLocation {
    @location
  }

  ## Returns `True` if this token is for a valid value.
  def valid? -> Boolean {
    False
  }

  ## Returns `True` if the token is a keyword, such as "import".
  def keyword? -> Boolean {
    False
  }

  ## Returns a `Boolean` indicating if this token is a null token..
  def null? -> Boolean {
    True
  }
}
