# AST types for operators.
import std::compiler::ast::node::*
import std::compiler::ast::variables::Constant
import std::compiler::source_location::SourceLocation
import std::compiler::types::Type

# An expression to cast from `?T` to `T`.
object NotNil {
  # The expression to convert to a non-Nil type.
  @expression: Node

  # The source location of the cast.
  @location: SourceLocation

  # The type of the expression.
  @resolved_type: ?Type

  static def new(expression: Node, location: SourceLocation) -> Self {
    Self {
      @expression = expression,
      @location = location,
      @resolved_type = Nil
    }
  }

  def expression -> Node {
    @expression
  }
}

impl Node for NotNil {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = value
  }
}

# An expression that should be casted to a different type.
object TypeCast {
  # The expression of which the type should be casted to something else.
  @expression: Node

  # The type to cast the expression to.
  @cast_to: TypeNode

  # The source location of the type cast.
  @location: SourceLocation

  # The type of the expression.
  @resolved_type: ?Type

  static def new(
    expression: Node,
    cast_to: TypeNode,
    location: SourceLocation
  ) -> Self {
    Self {
      @expression = expression,
      @cast_to = cast_to,
      @location = location,
      @resolved_type = Nil
    }
  }

  def expression -> Node {
    @expression
  }

  def cast_to -> TypeNode {
    @cast_to
  }
}

impl Node for TypeCast {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = value
  }
}

# The Nil coalescing operator.
object CoalesceNil {
  # The expression producing an optional value.
  @expression: Node

  # The default expression to evaluate.
  @default: Node

  # The source location of this operator.
  @location: SourceLocation

  # The return type of the operation.
  @resolved_type: ?Type

  static def new(
    expression: Node,
    default: Node,
    location: SourceLocation
  ) -> Self {
    Self {
      @expression = expression,
      @default = default,
      @location = location,
      @resolved_type = Nil
    }
  }

  def expression -> Node {
    @expression
  }

  def default -> Node {
    @default
  }
}

impl Node for CoalesceNil {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = value
  }
}
