# AST types for methods, closures, and lambdas.
import std::compiler::ast::body::Body
import std::compiler::ast::node::*
import std::compiler::ast::variables::DefineTypeParameter
import std::compiler::source_location::SourceLocation
import std::compiler::types::(
  ClosureType, LambdaType, MethodType, TypeScope, Type
)

# A AST node that defines an argument.
trait DefineArgument: Node {
  # Returns the name of the arguments.
  def name -> String

  # Returns `True` if this argument defines a default value.
  def default_value? -> Boolean {
    False
  }
}

# The definition of an argument that has neither a default value, nor an
# explicit type.
#
# Untyped arguments are only valid for closures and lambdas, and their types are
# inferred based on the use of the block.
object DefineUntypedArgument {
  # The name of the argument.
  @name: String

  # A boolean indicating if the argument is mutable (True) or immutable (False).
  @mutable: Boolean

  # The source location of the argument.
  @location: SourceLocation

  # The type of this argument.
  @resolved_type: ?Type

  static def new(
    name: String,
    mutable: Boolean,
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @mutable = mutable,
      @location = location,
      @resolved_type = Nil
    }
  }

  def name -> String {
    @name
  }

  def mutable? -> Boolean {
    @mutable
  }
}

impl Node for DefineUntypedArgument {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = value
  }
}

impl DefineArgument for DefineUntypedArgument {}

# The definition of a required argument.
object DefineRequiredArgument {
  # The name of the argument.
  @name: String

  # The explicit type of the argument.
  @value_type: TypeNode

  # A boolean indicating if the argument is mutable (True) or immutable (False).
  @mutable: Boolean

  # The source location of the argument.
  @location: SourceLocation

  # The type of this argument.
  @resolved_type: ?Type

  static def new(
    name: String,
    value_type: TypeNode,
    mutable: Boolean,
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @value_type = value_type,
      @mutable = mutable,
      @location = location,
      @resolved_type = Nil
    }
  }

  def name -> String {
    @name
  }

  def value_type -> TypeNode {
    @value_type
  }

  def mutable? -> Boolean {
    @mutable
  }
}

impl Node for DefineRequiredArgument {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(type: Type) -> Type {
    @resolved_type = type
  }
}

impl DefineArgument for DefineRequiredArgument {}

# The definition of a rest argument
object DefineRestArgument {
  # The name of the argument.
  @name: String

  # The explicit type of the argument.
  @value_type: TypeNode

  # A boolean indicating if the argument is mutable (True) or immutable (False).
  @mutable: Boolean

  # The source location of the argument.
  @location: SourceLocation

  # The type of this argument.
  @resolved_type: ?Type

  static def new(
    name: String,
    value_type: TypeNode,
    mutable: Boolean,
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @value_type = value_type,
      @mutable = mutable,
      @location = location,
      @resolved_type = Nil
    }
  }

  def name -> String {
    @name
  }

  def value_type -> TypeNode {
    @value_type
  }

  def mutable? -> Boolean {
    @mutable
  }
}

impl Node for DefineRestArgument {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(type: Type) -> Type {
    @resolved_type = type
  }
}

impl DefineArgument for DefineRestArgument {}

# An argument definition with a default value.
object DefineOptionalArgument {
  # The name of the argument.
  @name: String

  # The explicit type of the argument, if specified.
  @value_type: ?TypeNode

  # The default value of the argument.
  @default_value: Node

  # A boolean indicating if the argument is mutable (True) or immutable (False).
  @mutable: Boolean

  # The source location of the argument.
  @location: SourceLocation

  # The type of this argument.
  @resolved_type: ?Type

  static def new(
    name: String,
    value_type: ?TypeNode,
    default_value: Node,
    mutable: Boolean,
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @value_type = value_type,
      @default_value = default_value,
      @mutable = mutable,
      @location = location,
      @resolved_type = Nil
    }
  }

  def name -> String {
    @name
  }

  def value_type -> ?TypeNode {
    @value_type
  }

  def default_value -> Node {
    @default_value
  }

  def mutable? -> Boolean {
    @mutable
  }
}

impl Node for DefineOptionalArgument {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(type: Type) -> Type {
    @resolved_type = type
  }
}

impl DefineArgument for DefineOptionalArgument {
  def default_value? -> Boolean {
    True
  }
}

# A closure that was created without the `do` or `lambda` keyword.
object BasicClosure {
  # The expressions in the block's body.
  @body: Body

  # The source location of the block.
  @location: SourceLocation

  # The type of this closure.
  @resolved_type: ?ClosureType

  static def new(body: Body, location: SourceLocation) -> Self {
    Self { @body = body, @location = location, @resolved_type = Nil }
  }

  # Returns the expressions in the block's body.
  def body -> Body {
    @body
  }
}

impl Node for BasicClosure {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?ClosureType {
    @resolved_type
  }

  def resolved_type=(value: ClosureType) -> ClosureType {
    @resolved_type = value
  }
}

# A closure created with the `do` keyword.
object Closure {
  # The type parameters of the closure.
  @type_parameters: Array!(DefineTypeParameter)

  # The arguments of the closure.
  @arguments: Array!(DefineArgument)

  # The expressions in the closure's body.
  @body: Body

  # The type of the value this closure might throw.
  @throw_type: ?TypeNode

  # The return type of this closure.
  @return_type: ?TypeNode

  # The source location of the closure.
  @location: SourceLocation

  # The type of this closure.
  @resolved_type: ?ClosureType

  static def new(
    type_parameters: Array!(DefineTypeParameter),
    arguments: Array!(DefineArgument),
    body: Body,
    throw_type: ?TypeNode,
    return_type: ?TypeNode,
    location: SourceLocation
  ) -> Self {
    Self {
      @type_parameters = type_parameters,
      @arguments = arguments,
      @body = body,
      @throw_type = throw_type,
      @return_type = return_type,
      @location = location,
      @resolved_type = Nil
    }
  }

  def type_parameters -> Array!(DefineTypeParameter) {
    @type_parameters
  }

  def arguments -> Array!(DefineArgument) {
    @arguments
  }

  def body -> Body {
    @body
  }

  def return_type -> ?TypeNode {
    @return_type
  }

  def throw_type -> ?TypeNode {
    @throw_type
  }
}

impl Node for Closure {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?ClosureType {
    @resolved_type
  }

  def resolved_type=(value: ClosureType) -> ClosureType {
    @resolved_type = value
  }
}

# A lambda created with the `do` keyword.
object Lambda {
  # The type parameters of the lambda.
  @type_parameters: Array!(DefineTypeParameter)

  # The arguments of the lambda.
  @arguments: Array!(DefineArgument)

  # The expressions in the lambda's body.
  @body: Body

  # The type of the value this lambda might throw.
  @throw_type: ?TypeNode

  # The return type of this lambda.
  @return_type: ?TypeNode

  # The source location of the lambda.
  @location: SourceLocation

  # The type of this lambda.
  @resolved_type: ?LambdaType

  static def new(
    type_parameters: Array!(DefineTypeParameter),
    arguments: Array!(DefineArgument),
    body: Body,
    throw_type: ?TypeNode,
    return_type: ?TypeNode,
    location: SourceLocation
  ) -> Self {
    Self {
      @type_parameters = type_parameters,
      @arguments = arguments,
      @body = body,
      @throw_type = throw_type,
      @return_type = return_type,
      @location = location,
      @resolved_type = Nil
    }
  }

  def type_parameters -> Array!(DefineTypeParameter) {
    @type_parameters
  }

  def arguments -> Array!(DefineArgument) {
    @arguments
  }

  def body -> Body {
    @body
  }

  def return_type -> ?TypeNode {
    @return_type
  }

  def throw_type -> ?TypeNode {
    @throw_type
  }
}

impl Node for Lambda {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?LambdaType {
    @resolved_type
  }

  def resolved_type=(value: LambdaType) -> LambdaType {
    @resolved_type = value
  }
}

# A method created using the `def` keyword.
object DefineMethod {
  # The name of the method.
  @name: String

  # The type parameters of the method.
  @type_parameters: Array!(DefineTypeParameter)

  # Additional type parameter bounds that a concrete type must implement for
  # this method to be available.
  @type_parameter_bounds: Array!(DefineTypeParameter)

  # The arguments of the method.
  @arguments: Array!(DefineArgument)

  # The expressions in the method's body.
  @body: Body

  # The type of the value this method might throw.
  @throw_type: ?TypeNode

  # The return type of this method.
  @return_type: ?TypeNode

  # The type of value this method might yield.
  @yield_type: ?TypeNode

  # The source location of the method.
  @location: SourceLocation

  # A boolean indicating if the method is a static method (True) or not
  # (False).
  @static_method: Boolean

  # The type of this method.
  @resolved_type: ?MethodType

  static def new(
    name: String,
    type_parameters: Array!(DefineTypeParameter),
    type_parameter_bounds: Array!(DefineTypeParameter),
    arguments: Array!(DefineArgument),
    throw_type: ?TypeNode,
    return_type: ?TypeNode,
    yield_type: ?TypeNode,
    static_method: Boolean,
    body: Body,
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @type_parameters = type_parameters,
      @type_parameter_bounds = type_parameter_bounds,
      @arguments = arguments,
      @body = body,
      @throw_type = throw_type,
      @return_type = return_type,
      @yield_type = yield_type,
      @static_method = static_method,
      @location = location,
      @resolved_type = Nil
    }
  }

  # Returns the name of the method.
  def name -> String {
    @name
  }

  def type_parameters -> Array!(DefineTypeParameter) {
    @type_parameters
  }

  def type_parameter_bounds -> Array!(DefineTypeParameter) {
    @type_parameter_bounds
  }

  def arguments -> Array!(DefineArgument) {
    @arguments
  }

  def body -> Body {
    @body
  }

  def return_type -> ?TypeNode {
    @return_type
  }

  def throw_type -> ?TypeNode {
    @throw_type
  }

  def yield_type -> ?TypeNode {
    @yield_type
  }

  def static_method? -> Boolean {
    @static_method
  }

  def instance_method? -> Boolean {
    @static_method.false?
  }
}

impl Node for DefineMethod {
  def resolved_type -> ?MethodType {
    @resolved_type
  }

  def resolved_type=(value: MethodType) -> MethodType {
    @resolved_type = value
  }

  def location -> SourceLocation {
    @location
  }
}

# A required method created using the `def` keyword.
object DefineRequiredMethod {
  # The name of the method.
  @name: String

  # The type parameters of the method.
  @type_parameters: Array!(DefineTypeParameter)

  # Additional type parameter bounds that a concrete type must implement for
  # this method to be available.
  @type_parameter_bounds: Array!(DefineTypeParameter)

  # The arguments of the method.
  @arguments: Array!(DefineArgument)

  # The type of the value this method might throw.
  @throw_type: ?TypeNode

  # The return type of this method.
  @return_type: ?TypeNode

  # The type of value this method might yield.
  @yield_type: ?TypeNode

  # The source location of the method.
  @location: SourceLocation

  # The type of this method.
  @resolved_type: ?MethodType

  # The type scope to use for this method. This is stored directly in this node,
  # as it doesn't have a Body node.
  @type_scope: ?TypeScope

  static def new(
    name: String,
    type_parameters: Array!(DefineTypeParameter),
    type_parameter_bounds: Array!(DefineTypeParameter),
    arguments: Array!(DefineArgument),
    throw_type: ?TypeNode,
    return_type: ?TypeNode,
    yield_type: ?TypeNode,
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @type_parameters = type_parameters,
      @type_parameter_bounds = type_parameter_bounds,
      @arguments = arguments,
      @throw_type = throw_type,
      @return_type = return_type,
      @yield_type = yield_type,
      @location = location,
      @resolved_type = Nil,
      @type_scope = Nil
    }
  }

  def name -> String {
    @name
  }

  def type_parameters -> Array!(DefineTypeParameter) {
    @type_parameters
  }

  def type_parameter_bounds -> Array!(DefineTypeParameter) {
    @type_parameter_bounds
  }

  def arguments -> Array!(DefineArgument) {
    @arguments
  }

  def return_type -> ?TypeNode {
    @return_type
  }

  def throw_type -> ?TypeNode {
    @throw_type
  }

  def yield_type -> ?TypeNode {
    @yield_type
  }

  def type_scope -> ?TypeScope {
    @type_scope
  }

  def type_scope=(value: TypeScope) -> TypeScope {
    @type_scope = value
  }
}

impl Node for DefineRequiredMethod {
  def resolved_type -> ?MethodType {
    @resolved_type
  }

  def resolved_type=(value: MethodType) -> MethodType {
    @resolved_type = value
  }

  def location -> SourceLocation {
    @location
  }
}
