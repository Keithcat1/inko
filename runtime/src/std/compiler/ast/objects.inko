# AST types for objects and traits.
import std::compiler::ast::blocks::DefineMethod
import std::compiler::ast::body::Body
import std::compiler::ast::node::*
import std::compiler::ast::variables::(Constant, DefineTypeParameter)
import std::compiler::source_location::SourceLocation
import std::compiler::types::(ObjectInstance, ObjectType, Type, TraitType)

# A named object defined using the "object" keyword.
object DefineObject {
  # The name of the defined object.
  @name: String

  # The type parameters of the defined object.
  @type_parameters: Array!(DefineTypeParameter)

  # The expressions inside the object body.
  @body: Body

  # The source location of the definition.
  @location: SourceLocation

  # The type of this AST node.
  @resolved_type: ?ObjectType

  static def new(
    name: String,
    type_parameters: Array!(DefineTypeParameter),
    body: Body,
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @type_parameters = type_parameters,
      @body = body,
      @location = location,
      @resolved_type = Nil
    }
  }

  # Returns the name of this object.
  def name -> String {
    @name
  }

  # Returns the type parameters of this object.
  def type_parameters -> Array!(DefineTypeParameter) {
    @type_parameters
  }

  # Returns the expressions contained in this object definition.
  def body -> Body {
    @body
  }

  def resolved_type=(type: ObjectType) -> ObjectType {
    @resolved_type = type
  }
}

impl Node for DefineObject {
  def resolved_type -> ?ObjectType {
    @resolved_type
  }

  def location -> SourceLocation {
    @location
  }
}

# The definition of an attribute in an object.
object DefineAttribute {
  # The name of the attribute.
  @name: String

  # The type node of the attribute.
  @value_type: TypeNode

  # The source location of the definition.
  @location: SourceLocation

  # The type of this attribute.
  @resolved_type: ?Type

  static def new(
    name: String,
    value_type: TypeNode,
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @value_type = value_type,
      @location = location,
      @resolved_type = Nil
    }
  }

  # Returns the name of the attribute.
  def name -> String {
    @name
  }

  # Returns the value type node of the attribute.
  def value_type -> TypeNode {
    @value_type
  }

  def resolved_type=(type: Type) -> Type {
    @resolved_type = type
  }
}

impl Node for DefineAttribute {
  def resolved_type -> ?Type {
    @resolved_type
  }

  def location -> SourceLocation {
    @location
  }
}

# A trait defined using the "trait" keyword.
object DefineTrait {
  # The name of the trait that is defined.
  @name: String

  # The type parameters of the trait.
  @type_parameters: Array!(DefineTypeParameter)

  # The list of traits that must be implemented before implementing this trait.
  @required_traits: Array!(Constant)

  # The expressions inside the trait's body.
  @body: Body

  # The source location of the trait definition.
  @location: SourceLocation

  # The type of this AST node.
  @resolved_type: ?TraitType

  static def new(
    name: String,
    type_parameters: Array!(DefineTypeParameter),
    required_traits: Array!(Constant),
    body: Body,
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @type_parameters = type_parameters,
      @required_traits = required_traits,
      @body = body,
      @location = location,
      @resolved_type = Nil
    }
  }

  # Returns the name of this object.
  def name -> String {
    @name
  }

  # Returns the type parameters of this object.
  def type_parameters -> Array!(DefineTypeParameter) {
    @type_parameters
  }

  # Returns the traits required by this trait.
  def required_traits -> Array!(Constant) {
    @required_traits
  }

  # Returns the expressions contained in this object definition.
  def body -> Body {
    @body
  }

  def resolved_type=(type: TraitType) -> TraitType {
    @resolved_type = type
  }
}

impl Node for DefineTrait {
  def resolved_type -> ?TraitType {
    @resolved_type
  }

  def location -> SourceLocation {
    @location
  }
}


# The implementation of a trait for an object.
object ImplementTrait {
  # The name of the trait that is implemented.
  @trait_name: Constant

  # The name of the object to implement the trait for.
  @object_name: Constant

  # Additional type parameter bounds that a concrete type must implement for
  # this trait to be available.
  @type_parameter_bounds: Array!(DefineTypeParameter)

  # The expressions contained in the body of the implementation.
  @body: Body

  # The source location of the implementation.
  @location: SourceLocation

  static def new(
    trait_name: Constant,
    object_name: Constant,
    type_parameter_bounds: Array!(DefineTypeParameter),
    body: Body,
    location: SourceLocation
  ) -> Self {
    Self {
      @trait_name = trait_name,
      @object_name = object_name,
      @type_parameter_bounds = type_parameter_bounds,
      @body = body,
      @location = location
    }
  }

  # Returns the name of the trait being implemented.
  def trait_name -> Constant {
    @trait_name
  }

  # Returns the name of the object the trait is implemented for.
  def object_name -> Constant {
    @object_name
  }

  # Returns the type parameter bounds of the implementation.
  def type_parameter_bounds -> Array!(DefineTypeParameter) {
    @type_parameter_bounds
  }

  # Returns the expressions contained in this implementation.
  def body -> Body {
    @body
  }

  # Returns the node that defines the required method, if any.
  def method_node(name: String) -> ?DefineMethod {
    @body.children.each do (node) {
      match(let matched = node) {
        as DefineMethod when matched.name == name -> { return matched }
        else -> {}
      }
    }

    Nil
  }
}

impl Node for ImplementTrait {
  def location -> SourceLocation {
    @location
  }
}

# An object that is reopened.
object ReopenObject {
  # The name of the object that is reopened.
  @name: Constant

  # The expressions contained in the body of the object.
  @body: Body

  # The source location of the implementation.
  @location: SourceLocation

  # The type of this AST node.
  @resolved_type: ?ObjectType

  static def new(name: Constant, body: Body, location: SourceLocation) -> Self {
    Self {
      @name = name,
      @body = body,
      @location = location,
      @resolved_type = Nil
    }
  }

  # Returns the name of the object that is reopened.
  def name -> Constant {
    @name
  }

  # Returns the body of the `impl` expression.
  def body -> Body {
    @body
  }

  def resolved_type=(type: ObjectType) -> ObjectType {
    @resolved_type = type
  }
}

impl Node for ReopenObject {
  def resolved_type -> ?ObjectType {
    @resolved_type
  }

  def location -> SourceLocation {
    @location
  }
}

# An attribute that is assigned in a constructor.
object ConstructorAttribute {
  # The name of the attribute.
  @name: String

  # The value assigned to the attribute.
  @value: Node

  # The location of the assignment.
  @location: SourceLocation

  static def new(name: String, value: Node, location: SourceLocation) -> Self {
    Self { @name = name, @value = value, @location = location }
  }

  def name -> String {
    @name
  }

  def value -> Node {
    @value
  }
}

impl Node for ConstructorAttribute {
  def resolved_type -> ?Type {
    @value.resolved_type
  }

  def location -> SourceLocation {
    @location
  }
}

# An object constructor.
object Constructor {
  # The name of the type to create an instance of.
  @name: String

  # The attributes to assign.
  @attributes: Array!(ConstructorAttribute)

  # The location of the constructor.
  @location: SourceLocation

  # The type that is constructed.
  @resolved_type: ?Type

  static def new(
    name: String,
    attributes: Array!(ConstructorAttribute),
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @attributes = attributes,
      @location = location,
      @resolved_type = Nil
    }
  }

  def name -> String {
    @name
  }

  def attributes -> Array!(ConstructorAttribute) {
    @attributes
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = value
  }
}

impl Node for Constructor {
  def resolved_type -> ?Type {
    @resolved_type
  }

  def location -> SourceLocation {
    @location
  }
}
