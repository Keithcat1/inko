# AST types for type parameters.
import std::compiler::ast::node::Node
import std::compiler::ast::variables::Constant
import std::compiler::source_location::SourceLocation

# A type parameter and its required traits.
object TypeParameter {
  # The name of the type parameter.
  @name: String

  # The traits required by this type parameter.
  @required_traits: Array!(Constant)

  # The source location of the type parameter.
  @location: SourceLocation

  static def new(
    name: String,
    required_traits: Array!(Constant),
    location: SourceLocation
  ) -> Self {
    Self {
      @name = name,
      @required_traits = required_traits,
      @location = location
    }
  }

  # Returns the name of the type parameter.
  def name -> String {
    @name
  }

  # Returns the traits required by the type parameter.
  def required_traits -> Array!(Constant) {
    @required_traits
  }
}

impl Node for TypeParameter {
  def location -> SourceLocation {
    @location
  }
}
