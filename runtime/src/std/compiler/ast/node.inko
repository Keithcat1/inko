# Types for Abstract Syntax Trees produced by the parser.
import std::compiler::source_location::SourceLocation
import std::compiler::symbol_table::Symbol
import std::compiler::types::Type
import std::operators::Equal
import std::option::Option

# A trait for providing and adhering to common behaviour across AST nodes.
trait Node {
  # Returns the location of the AST node.
  def location -> SourceLocation

  # Returns the type of this node, if any.
  def resolved_type -> ?Type {
    Option.none
  }

  # Sets the type of this node, if any.
  def resolved_type=(value: Type) -> Type {
    value
  }

  # The type this node may throw.
  def resolved_throw_type -> ?Type {
    Option.none
  }

  # Sets the type this node may throw.
  def resolved_throw_type=(value: Type) -> Type {
    value
  }
}

# A type of node that can be used in type signatures.
trait TypeNode: Node {}

# A node that maps to a symbol, such as a local variable.
trait SymbolNode: Node {
  # Returns the symbol of this node.
  def symbol -> ?Symbol!(Type)

  # Sets the symbol of this node.
  def symbol=(value: Symbol!(Type)) -> Symbol!(Type)
}

# A node that can appear as the expression for a try/try!.
trait TryExpressionNode: Node {
  # Marks this node as residing in a `try` expression.
  def inside_try

  # Returns `True` is this node resides in a `try` expression.
  def inside_try? -> Boolean
}
