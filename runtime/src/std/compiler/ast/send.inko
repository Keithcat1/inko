# AST types message sends.
import std::compiler::ast::node::*
import std::compiler::ast::variables::*
import std::compiler::config::INSTRUCTION_RECEIVER_NAME
import std::compiler::source_location::SourceLocation
import std::compiler::types::Type

# A keyword argument and its value.
object KeywordArgument {
  # The name of the keyword argument.
  @name: Identifier

  # The value of the argument.
  @value: Node

  # The source location of the send operation.
  @location: SourceLocation

  static def new(
    name: Identifier,
    value: Node,
    location: SourceLocation
  ) -> Self {
    Self { @name = name, @value = value, @location = location }
  }

  # Returns the name of the keyword argument.
  def name -> Identifier {
    @name
  }

  # Returns the value of the keyword argument.
  def value -> Node {
    @value
  }
}

impl Node for KeywordArgument {
  def location -> SourceLocation {
    @location
  }
}

# A message sent to a receiver.
object Send {
  # The name of the message that is sent.
  @message: String

  # The receiver the message is sent to.
  @receiver: Node

  # The arguments passed with the message.
  @arguments: Array!(Node)

  # Any type arguments to assign to type parameters.
  @type_arguments: Array!(TypeNode)

  # The source location of the send operation.
  @location: SourceLocation

  # The type returned by this message.
  @resolved_type: ?Type

  # The type thrown by this message.
  @throw_type: ?Type

  # A boolean indicating that this node resides in a `try` expression.
  @inside_try: Boolean

  static def new(
    message: String,
    receiver: Node,
    arguments: Array!(Node),
    type_arguments: Array!(TypeNode),
    location: SourceLocation
  ) -> Self {
    Self {
      @message = message,
      @receiver = receiver,
      @arguments = arguments,
      @type_arguments = type_arguments,
      @location = location,
      @resolved_type = Nil,
      @throw_type = Nil,
      @inside_try = False
    }
  }

  def message -> String {
    @message
  }

  def receiver -> Node {
    @receiver
  }

  def arguments -> Array!(Node) {
    @arguments
  }

  def type_arguments -> Array!(TypeNode) {
    @type_arguments
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = value
  }

  def instruction? -> Boolean {
    match(let matched = @receiver) {
      as Constant when matched.name == INSTRUCTION_RECEIVER_NAME -> { True }
      else -> { False }
    }
  }
}

impl Node for Send {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }
}

impl ThrowingNode for Send {
  def throw_type -> ?Type {
    @throw_type
  }

  def throw_type=(value: ?Type) -> ?Type {
    @throw_type = value
  }

  def inside_try {
    @inside_try = True
  }

  def inside_try? -> Boolean {
    @inside_try
  }
}
