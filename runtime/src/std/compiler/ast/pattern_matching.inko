# AST types for pattern matching expressions.
import std::compiler::ast::body::Body
import std::compiler::ast::node::*
import std::compiler::ast::variables::(Constant, Identifier)
import std::compiler::source_location::SourceLocation
import std::compiler::types::Type
import std::option::Option

# A node that can be used as a pattern matching case.
trait MatchCase: Node {}

# A pattern matching expression.
class Match {
  # The expression that the match is performed on.
  @expression: ?Node

  # The variable to bind the input expression to.
  @binding: ?Identifier

  # The pattern matching cases.
  @cases: Array!(MatchCase)

  # The code to run when no patterns matched the input.
  @else_branch: ?MatchElse

  # The source location of the pattern match expression.
  @location: SourceLocation

  # The type returned by the pattern match expression.
  @resolved_type: ?Type

  static def new(
    expression: ?Node,
    binding: ?Identifier,
    cases: Array!(MatchCase),
    else_branch: ?MatchElse,
    location: SourceLocation
  ) -> Self {
    Self {
      @expression = expression,
      @binding = binding,
      @cases = cases,
      @else_branch = else_branch,
      @location = location,
      @resolved_type = Option.none
    }
  }

  def expression -> ?Node {
    @expression
  }

  def binding -> ?Identifier {
    @binding
  }

  def cases -> Array!(MatchCase) {
    @cases
  }

  def else_branch -> ?MatchElse {
    @else_branch
  }
}

impl Node for Match {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = Option.some(value)
    value
  }
}

# A pattern matching case for matching a type.
class MatchType {
  # The type that is expected by this case.
  @pattern: Constant

  # An additional guard to apply before running the body.
  @guard: ?Node

  # The body to run when the case is met.
  @body: Body

  # The source location of the case.
  @location: SourceLocation

  # The type returned by the case.
  @resolved_type: ?Type

  static def new(
    pattern: Constant,
    guard: ?Node,
    body: Body,
    location: SourceLocation
  ) -> Self {
    Self {
      @pattern = pattern,
      @guard = guard,
      @body = body,
      @location = location,
      @resolved_type = Option.none
    }
  }

  def pattern -> Constant {
    @pattern
  }

  def guard -> ?Node {
    @guard
  }

  def body -> Body {
    @body
  }
}

impl Node for MatchType {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = Option.some(value)
    value
  }
}

impl MatchCase for MatchType {}

# A pattern matching case for matching one or more expression.
class MatchExpressions {
  # The patterns to match.
  @patterns: Array!(Node)

  # An additional guard to apply before running the body.
  @guard: ?Node

  # The body to run when the case is met.
  @body: Body

  # The source location of the case.
  @location: SourceLocation

  # The type returned by the case.
  @resolved_type: ?Type

  static def new(
    patterns: Array!(Node),
    guard: ?Node,
    body: Body,
    location: SourceLocation
  ) -> Self {
    Self {
      @patterns = patterns,
      @guard = guard,
      @body = body,
      @location = location,
      @resolved_type = Option.none
    }
  }

  def patterns -> Array!(Node) {
    @patterns
  }

  def guard -> ?Node {
    @guard
  }

  def body -> Body {
    @body
  }
}

impl Node for MatchExpressions {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = Option.some(value)
    value
  }
}

impl MatchCase for MatchExpressions {}

# An "else" case in a pattern match.
class MatchElse {
  # The body to run when the case is met.
  @body: Body

  # The source location of the match case.
  @location: SourceLocation

  # The type returned by the case.
  @resolved_type: ?Type

  static def new(body: Body, location: SourceLocation) -> Self {
    Self { @body = body, @location = location, @resolved_type = Option.none }
  }

  def body -> Body {
    @body
  }
}

impl Node for MatchElse {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = Option.some(value)
    value
  }
}
