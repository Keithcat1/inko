# AST types for collections of expressions.
import std::compiler::ast::imports::Import
import std::compiler::ast::node::*
import std::compiler::variable_scope::VariableScope
import std::compiler::source_location::SourceLocation
import std::compiler::types::(Type, TypeScope)

# A collection of different expressions.
object Body {
  # The nodes stored in this collection of expressions.
  @children: Array!(Node)

  # The source location of the start of the collection of expressions.
  @location: SourceLocation

  # The local variables defined in/available to this body.
  @variable_scope: VariableScope

  # The type scope to use for nodes inside this Body.
  #
  # Type scopes require data not yet known when producing an AST. Compiler
  # passes will populate this data as they process the AST.
  @type_scope: ?TypeScope

  # The return type of the body.
  @resolved_type: ?Type

  static def new(children: Array!(Node), location: SourceLocation) -> Self {
    Self {
      @children = children,
      @location = location,
      @variable_scope = VariableScope.new,
      @type_scope = Option.none,
      @resolved_type = Option.none
    }
  }

  def children -> Array!(Node) {
    @children
  }

  def children=(nodes: Array!(Node)) -> Array!(Node) {
    @children = nodes
  }

  def type_scope -> ?TypeScope {
    @type_scope
  }

  def type_scope=(value: TypeScope) -> TypeScope {
    @type_scope = Option.some(value)
    value
  }

  def imports -> Array!(Import) {
    let imports = Array.new

    @children.each do (node) {
      match(let matched = node) {
        as Import -> { imports.push(matched) }
        else -> {}
      }
    }

    imports
  }

  def variable_scope -> VariableScope {
    @variable_scope
  }

  def location_of_last_expression -> SourceLocation {
    @children.get(-1).map do (node) { node.location }.get_or(@location)
  }
}

impl Node for Body {
  def location -> SourceLocation {
    @location
  }

  def resolved_type -> ?Type {
    @resolved_type
  }

  def resolved_type=(value: Type) -> Type {
    @resolved_type = Option.some(value)
    value
  }
}
