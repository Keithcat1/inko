# AST types for type Inko types, such as optional types.
import std::compiler::ast::node::*
import std::compiler::ast::variables::DefineTypeParameter
import std::compiler::source_location::SourceLocation
import std::compiler::types::(
  ClosureType as ResolvedClosureType, LambdaType as ResolvedLambdaType, Type
)
import std::option::Option

# A closure type created using the `do` keyword.
object ClosureType {
  # The argument types of this closure.
  @arguments: Array!(TypeNode)

  # The type parameters of this closure.
  @type_parameters: Array!(DefineTypeParameter)

  # The type of the value this closure might throw.
  @throw_type: ?TypeNode

  # The return type of this closure.
  @return_type: ?TypeNode

  # The source location of the constant.
  @location: SourceLocation

  # The type of this closure.
  @resolved_type: ?ResolvedClosureType

  static def new(
    type_parameters: Array!(DefineTypeParameter),
    arguments: Array!(TypeNode),
    throw_type: ?TypeNode,
    return_type: ?TypeNode,
    location: SourceLocation
  ) -> Self {
    Self {
      @type_parameters = type_parameters,
      @arguments = arguments,
      @throw_type = throw_type,
      @return_type = return_type,
      @location = location,
      @resolved_type = Option.none
    }
  }

  # Returns the argument types of this closure.
  def arguments -> Array!(TypeNode) {
    @arguments
  }

  # Returns the type parameters of this closure.
  def type_parameters -> Array!(DefineTypeParameter) {
    @type_parameters
  }

  # Returns the return type of this closure.
  def return_type -> ?TypeNode {
    @return_type
  }

  # Returns the throw type of this closure.
  def throw_type -> ?TypeNode {
    @throw_type
  }
}

impl Node for ClosureType {
  def resolved_type -> ?ResolvedClosureType {
    @resolved_type
  }

  def resolved_type=(value: ResolvedClosureType) -> ResolvedClosureType {
    @resolved_type = Option.some(value)
    value
  }

  def location -> SourceLocation {
    @location
  }
}

impl TypeNode for ClosureType {}

# A lambda type created using the `lambda` keyword.
object LambdaType {
  # The argument types of this lambda.
  @arguments: Array!(TypeNode)

  # The type parameters of this lambda.
  @type_parameters: Array!(DefineTypeParameter)

  # The type of the value this lambda might throw.
  @throw_type: ?TypeNode

  # The return type of this lambda.
  @return_type: ?TypeNode

  # The source location of the constant.
  @location: SourceLocation

  # The type of this lambda.
  @resolved_type: ?ResolvedLambdaType

  static def new(
    type_parameters: Array!(DefineTypeParameter),
    arguments: Array!(TypeNode),
    throw_type: ?TypeNode,
    return_type: ?TypeNode,
    location: SourceLocation
  ) -> Self {
    Self {
      @type_parameters = type_parameters,
      @arguments = arguments,
      @throw_type = throw_type,
      @return_type = return_type,
      @location = location,
      @resolved_type = Option.none
    }
  }

  # Returns the argument types of this lambda.
  def arguments -> Array!(TypeNode) {
    @arguments
  }

  # Returns the type parameters of this lambda.
  def type_parameters -> Array!(DefineTypeParameter) {
    @type_parameters
  }

  # Returns the return type of this lambda.
  def return_type -> ?TypeNode {
    @return_type
  }

  # Returns the throw type of this lambda.
  def throw_type -> ?TypeNode {
    @throw_type
  }
}

impl Node for LambdaType {
  def resolved_type -> ?ResolvedLambdaType {
    @resolved_type
  }

  def resolved_type=(value: ResolvedLambdaType) -> ResolvedLambdaType {
    @resolved_type = Option.some(value)
    value
  }

  def location -> SourceLocation {
    @location
  }
}

impl TypeNode for LambdaType {}
