# AST types for literal values, such as integers and strings.
import std::compiler::ast::node::*
import std::compiler::source_location::SourceLocation
import std::compiler::types::ObjectInstance

# A simple literal value, such as an integer or a float.
trait Literal: Node {
  # Returns the value of the literal.
  def value -> String
}

# AST node for integer literals.
object IntegerLiteral {
  # The value of the literal.
  @value: String

  # The source location of the literal.
  @location: SourceLocation

  # The type of this AST node.
  @resolved_type: ?ObjectInstance

  static def new(value: String, location: SourceLocation) -> Self {
    Self { @value = value, @location = location, @resolved_type = Option.none }
  }
}

impl Node for IntegerLiteral {
  def resolved_type -> ?ObjectInstance {
    @resolved_type
  }

  def resolved_type=(value: ObjectInstance) -> ObjectInstance {
    @resolved_type = Option.some(value)
    value
  }

  def location -> SourceLocation {
    @location
  }
}

impl Literal for IntegerLiteral {
  def value -> String {
    @value
  }
}

# AST node for float literals.
object FloatLiteral {
  # The value of the literal.
  @value: String

  # The source location of the literal.
  @location: SourceLocation

  # The type of this AST node.
  @resolved_type: ?ObjectInstance

  static def new(value: String, location: SourceLocation) -> Self {
    Self { @value = value, @location = location, @resolved_type = Option.none }
  }
}

impl Node for FloatLiteral {
  def resolved_type=(value: ObjectInstance) -> ObjectInstance {
    @resolved_type = Option.some(value)
    value
  }

  def resolved_type -> ?ObjectInstance {
    @resolved_type
  }

  def location -> SourceLocation {
    @location
  }
}

impl Literal for FloatLiteral {
  def value -> String {
    @value
  }
}

# AST node for string literals.
object StringLiteral {
  # The value of the literal.
  @value: String

  # The source location of the literal.
  @location: SourceLocation

  # The type of this AST node.
  @resolved_type: ?ObjectInstance

  static def new(value: String, location: SourceLocation) -> Self {
    Self { @value = value, @location = location, @resolved_type = Option.none }
  }
}

impl Node for StringLiteral {
  def resolved_type -> ?ObjectInstance {
    @resolved_type
  }

  def resolved_type=(value: ObjectInstance) -> ObjectInstance {
    @resolved_type = Option.some(value)
    value
  }

  def location -> SourceLocation {
    @location
  }
}

impl Literal for StringLiteral {
  def value -> String {
    @value
  }
}
