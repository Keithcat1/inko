# Types for Inko source modules.
import std::compiler::config::SOURCE_EXTENSION
import std::compiler::source_location::SourceLocation
import std::conversion::ToString
import std::fs::path::(Path, ToPath, SEPARATOR)
import std::hash::*
import std::operators::Equal

# The name of a module.
object ModuleName {
  # The components of the module name.
  #
  # For example, the module name `std::foo` would translate to
  # `Array.new('std', 'foo')`.
  @components: Array!(String)

  static def new(components: Array!(String)) -> Self {
    Self { @components = components }
  }

  # The components that make up the name of a module
  def components -> Array!(String) {
    @components
  }

  # Returns the relative path to the module's source code.
  def relative_source_path -> Path {
    Path.new(@components.iter.join(SEPARATOR) + SOURCE_EXTENSION)
  }

  # Returns the absolute source path to this module.
  def absolute_source_path(directories: Array!(Path)) -> ?Path {
    let rel_path = relative_source_path

    directories.each do (directory) {
      let source_path = directory.join(rel_path)

      source_path.file?.if_true {
        return source_path
      }
    }

    Nil
  }

  def bootstrap? -> Boolean {
    self == STD_BOOTSTRAP
  }

  def prelude? -> Boolean {
    self == STD_PRELUDE
  }

  def allow_instructions? -> Boolean {
    @components.get(0) == 'std'
  }

  # Returns the last component of the module name, such as `foo` in `std::foo`.
  def tail -> String {
    @components.get(-1).to_string
  }
}

impl ToString for ModuleName {
  def to_string -> String {
    @components.iter.join('::')
  }
}

impl Equal for ModuleName {
  def ==(other: Self) -> Boolean {
    @components == other.components
  }
}

impl Hash for ModuleName {
  def hash(hasher: Hasher) {
    @components.hash(hasher)
  }
}

# The name of the bootstrap module.
let STD_BOOTSTRAP = ModuleName.new(Array.new('std', 'bootstrap'))

# The name of the prelude module.
let STD_PRELUDE = ModuleName.new(Array.new('std', 'prelude'))
