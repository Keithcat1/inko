# A hash set implemented using a Map.
import std::format::(self, Formatter, Inspect)
import std::hash::Hash
import std::iterator::Iterator
import std::length::Length
import std::operators::Equal

# A hash set implemented using a Map.
#
# The order of values in this Set are not guaranteed. For values to be stored in
# a `Set` they must implement the `Hash` and `Equal` traits.
object Set!(V: Hash + Equal) {
  # The Map used for storing values.
  #
  # The keys are the values inserted in this `Set`, the values are always set to
  # `True`.
  @map: Map!(V, Boolean)

  def init {
    @map = Map.new
  }

  # Inserts a new value into the `Set`.
  #
  # The returned value is `True` if the value was inserted, `False` otherwise.
  #
  # # Examples
  #
  # Inserting a value into a `Set`:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.insert(10)
  def insert(value: V) -> Boolean {
    @map[value].if(true: { False }, false: { @map[value] = True })
  }

  # Removes a value from this `Set`.
  #
  # If the value was removed `True` is returned, otherwise `False` is returned.
  #
  # # Examples
  #
  # Removing an existing value from a `Set`:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.insert(10)
  #     set.remove(10) # => True
  #     set.remove(10) # => False
  #
  # Removing a non-existing value from a `Set`:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.remove(10) # => False
  def remove(value: V) -> ?V {
    @map.remove(value).not_nil?
  }

  # Calls the supplied `Block` for every value in this `Set`.
  #
  # # Examples
  #
  # Iterating over the values in a `Set`:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.insert(10)
  #     set.insert(20)
  #
  #     set.each do (value) {
  #       value # => 10, 20
  #     }
  def each(block: do (V)) -> Self {
    @map.each do (key, _) {
      block.call(key)
    }

    self
  }

  # Returns an `Iterator` over the values in this `Set`.
  #
  # # Examples
  #
  # Creating an `Iterator` for the values:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.insert(10)
  #     set.insert(20)
  #
  #     set.iter.next # => 10
  def iter -> Iterator!(V) {
    @map.keys
  }

  # Returns `True` if this `Set` contains the given value.
  #
  # # Examples
  #
  # Checking if a `Set` contains a value:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.contains?(10) # => False
  #     set.insert(10)
  #     set.contains?(10) # => True
  def contains?(value: V) -> Boolean {
    @map.key?(value)
  }
}

impl Equal for Set!(V) {
  # Returns `True` if `self` and the given `Set` are identical to each
  # other.
  #
  # # Examples
  #
  # Comparing two `Set` instances:
  #
  #     import std::set::Set
  #
  #     let set1 = Set.new
  #     let set2 = Set.new
  #
  #     set1.insert(10)
  #     set2.insert(10)
  #
  #     set1 == set2 # => True
  def ==(other: Self) -> Boolean {
    (length == other.length).if_false {
      return False
    }

    each do (value) {
      other.contains?(value).if_false {
        return False
      }
    }

    True
  }
}

impl Length for Set!(V) {
  # Returns the number of values in this `Set`.
  #
  # # Examples
  #
  # Using an empty `Set`:
  #
  #     import std::set::Set
  #
  #     Set.new.length # => 0
  #
  # Using a `Set` with one value:
  #
  #     let set = Set.new
  #
  #     set.insert('Alice')
  #
  #     set.length # => 1
  def length -> Integer {
    @map.length
  }
}

impl Inspect for Set!(V) {
  # Returns a human-readable representation of this `Set`.
  #
  # # Examples
  #
  # Inspecting a `Set`:
  #
  #     let set = Set.new
  #
  #     set.insert('Alice')
  #     set.insert('Foo Street')
  #
  #     set.inspect # => 'Set { "Alice", "Foo Street" }'
  def inspect -> String where V: Inspect {
    ::format.inspect(self)
  }

  # Formats this `Set` into a human-readable representation.
  def format_for_inspect(formatter: Formatter) where V: Inspect {
    let last = length - 1
    let mut index = 0

    formatter.push('Set')

    empty?.if_true {
      return
    }

    formatter.push(' { ')

    each do (value) {
      formatter.descend {
        value.format_for_inspect(formatter)
      }

      (index < last).if_true {
        formatter.push(', ')
      }

      index += 1
    }

    formatter.push(' }')
  }
}
