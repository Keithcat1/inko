# Unit testing of Inko source code
#
# This module provides simple unit testing facilities. Each test is run in a
# separate process, with an upper limit on the number of tests that are run
# concurrently.
#
# # Writing unit tests
#
# Here's how to write a simple unit test:
#
#     import std::test::*
#
#     def tests(t: Tests) {
#       t.group('The description of a test group') do (g) {
#         g.test('The description of a test') {
#           try assert_equal(10, 10)
#         }
#       }
#     }
#
# The `tests` method is used for registering tests. This method is called
# automatically when running the `inko test` command. Creating a test file
# without a `tests` method results in a compiler error when running `inko test`.
#
# The `t` argument is of type `Tests`, which is used for configuring the rest
# runner and registering test groups and tests.
#
# Assertion methods are imported from `std::test`, and require the use of `try`.
#
# # Unit test files
#
# Unit test files must be prefixed with `test_` and use the extension `.inko`.
# The root directory of your unit tests can be called whatever you like, but the
# convention is to call it "tests". This directory must contain a "test"
# directory, which in turn contains all your unit tests. The "test" directory
# can also contain subdirectories.
#
# Here's an example of what a tests directory may look like:
#
#     tests
#     └── test
#         └── std
#             ├── fs
#             │   ├── path
#             │   │   └── test_bits.inko
#             │   ├── test_bits.inko
#             │   ├── test_dir.inko
#             │   ├── test_file.inko
#             │   └── test_path.inko
#             ├── net
#             │   ├── test_ip.inko
#             │   ├── test_socket.inko
#             │   └── test_unix.inko
#             └── test
#                 ├── test_assert.inko
#                 ├── test_config.inko
#                 ├── test_error.inko
#                 ├── test_formatters.inko
#                 ├── test_runner.inko
#                 ├── test_test_group.inko
#                 └── test_test.inko
#
# The root namespace of all unit tests is `test`.
#
# # Configuration
#
# To configure unit tests, create a module called "config.inko" in the "test"
# directory, without the "test_" prefix. This module is imported before all unit
# tests have been registered.
#
# Using this module, you can configure tests like so:
#
#     import std::test::Tests
#
#     def setup(t: Tests) {
#       t.concurrency = 16
#     }
import std::env
import std::loop::(while)
import std::mirror::(ObjectMirror)
import std::operators::(Equal, Greater)
import std::os::Command
import std::process
import std::test::test::(
  DEFAULT_CONCURRENCY, FailedTest, Failure, Formatter, Group, ProgressFormatter,
  Test, TestResult, failure_location, inspect
)
import std::time::Instant
import std::vm

# A type used for registering and running unit tests.
class Tests {
  # The number of tests to run concurrently.
  @concurrency: Integer

  # The formatter to use for displaying test results.
  @formatter: Formatter

  # If the current program should exit when there are test failures.
  @exit_on_failure: Boolean

  # All unit tests to run.
  @tests: Array!(Test)

  static def new -> Self {
    Self {
      @concurrency = DEFAULT_CONCURRENCY,
      @formatter = ProgressFormatter.new,
      @tests = Array.new,
      @exit_on_failure = True
    }
  }

  # Returns the number of tests to run concurrently.
  def concurrency -> Integer {
    @concurrency
  }

  # Sets the number of tests to run concurrently.
  def concurrency=(value: Integer) -> Integer {
    @concurrency = value
  }

  # Returns the `Formatter` to use for displaying test results.
  def formatter -> Formatter {
    @formatter
  }

  # Sets the `Formatter` to use for displaying test results.
  def formatter=(value: Formatter) -> Formatter {
    @formatter = value
  }

  # Sets whether the program should exit when there are test failures.
  def exit_on_failure=(value: Boolean) -> Boolean {
    @exit_on_failure = value
  }

  # Returns whether the program should exit when there are test failures.
  def exit_on_failure? -> Boolean {
    @exit_on_failure
  }

  # Adds a new group of unit tests.
  def group(description: String, body: do (Group)) {
    body.call(Group.new(description, @tests))
  }

  # Runs all the tests.
  def run {
    let start_time = Instant.new
    let failures = Array.new

    @tests.iter.chunks(@concurrency).each do (tests) {
      let mut pending = tests.length

      tests.each do (test) { test.schedule }

      while({ pending > 0 }) {
        match(let result = process.receive) {
          as TestResult when result.failure.none? -> {
            @formatter.passed(@tests[result.id])
          }
          as TestResult when result.failure.some? -> {
            let test = FailedTest.new(@tests[result.id], result.failure.get)

            @formatter.failed(test)
            failures.push(test)
          }
          else -> {}
        }

        pending -= 1
      }
    }

    let failed = failures.length.positive?

    failed.if_true { @formatter.failures(failures) }
    @formatter.finished(tests: @tests, duration: start_time.elapsed)
    failed.and { @exit_on_failure }.if_true { vm.exit(1) }
  }
}

# Asserts that the given arguments are equal to each other.
def assert_equal!(T: Equal)(given: T, expected: T) !! Failure {
  (given == expected).if_true { return }

  let error = `Expected {inspect(given)} to equal {inspect(expected)}`

  throw Failure.new(error, failure_location)
}

# Asserts that the given arguments are not equal to each other.
def assert_not_equal!(T: Equal)(given: T, expected: T) !! Failure {
  (given == expected).if_false { return }

  let error = `Expected {inspect(given)} not to equal {inspect(expected)}`

  throw Failure.new(error, failure_location)
}

# Asserts that the given arguments are the exact same objects.
def assert_same_object!(T: Object)(given: T, expected: T) !! Failure {
  given.same_object?(expected).if_true { return }

  let error = `Expected {inspect(given)} to be the exact same \
    object as {inspect(expected)}`

  throw Failure.new(error, failure_location)
}

# Asserts that the first argument is greater than the second argument.
def assert_greater!(T: Greater)(given: T, minimum: T) !! Failure {
  (given > minimum).if_true { return }

  let error = `Expected {inspect(given)} to be greater than {inspect(minimum)}`

  throw Failure.new(error, failure_location)
}

# Asserts that the given value is something that evaluates to be truthy.
def assert_true(value: Object) !! Failure {
  value.if_true { return }

  throw Failure.new(`Expected {inspect(value)} to be truthy`, failure_location)
}

# Asserts that the given value is something that evaluates to be falsy.
def assert_false(value: Object) !! Failure {
  value.if_false { return }

  throw Failure.new(`Expected {inspect(value)} to be falsy`, failure_location)
}

# Asserts that the given Inko code produces a panic.
#
# This method takes a String and runs it in a separate OS process.
def assert_panic(program: String) !! Failure {
  let exe = try! env.executable
  let cmd = Command
    .new(exe)
    .argument('run')
    .argument('-e')
    .argument(program)
    .ignore_stdin
    .ignore_stdout
    .pipe_stderr

  let child = try! cmd.spawn

  try! child.wait

  let err = try! child.stderr.read_string

  err.starts_with?('Stack trace').if_true { return }

  throw Failure.new(`The program didn't panic: {err}`, failure_location)
}

# Asserts that the given closure throws a value.
def assert_throw!(E)(block: do !! E) !! Failure {
  try block.call else return

  throw Failure.new("This block is expected to throw", failure_location)
}

# Asserts that the given closure doesn't throw a value.
def assert_no_throw!(E)(block: do !! E) !! Failure {
  try block.call else {
    throw Failure
      .new("This block isn't expected to throw", failure_location(skip: 4))
  }
}

# Asserts that an object is an instance of another object.
def assert_instance_of(given: Any, expected: Any) !! Failure {
  let giv_mirror = ObjectMirror.new(given)

  giv_mirror.instance_of?(expected).if_true { return }

  let exp_mirror = ObjectMirror.new(expected)

  throw Failure.new(
    `Expected {giv_mirror.name} to be an instance of {exp_mirror.name}`,
    failure_location
  )
}
