#! Assertions for writing unit tests.
#!
#! Assertions can be used to define requirements that must be met for a unit
#! test to pass. For example, the `equal` method can be used to assert that two
#! values must be equal to each other.
#!
#! Assertions will throw in the event of a failure, requiring the use of the
#! `try` keyword. The use of `try!` is discouraged as it will result in the
#! entire test suite terminating in the event of an assertion failing.
import std::debug::(self, CallFrame)
import std::format::Inspect
import std::operators::(Equal, Greater)
import std::process
import std::string_buffer::StringBuffer
import std::test::error::TestFailure

## A test to verify if a block will panic or not.
object PanicTest {
  def init(owner: Integer, block: lambda) {
    let @owner = owner
    let @block = block
  }

  ## Runs the test, reporting the result back to the owning process.
  def run {
    process.panicking do (_) {
      notify(panicked: True)
    }

    @block.call

    notify(panicked: False)
  }

  def notify(panicked: Boolean) {
    process.send(pid: @owner, message: panicked)
  }
}

## Returns a `CallFrame` pointing to the location of the failed assertion.
def location_of_failure -> CallFrame {
  *debug.stacktrace(skip: 3, limit: 1)[0]
}

## Asserts that the given arguments are equal to each other.
def equal!(T: Inspect + Equal)(given: T, expected: T) !! TestFailure {
  given == expected
    .if_true {
      return
    }

  let buffer = StringBuffer.new([
    'Expected ',
    given.inspect,
    ' to equal ',
    expected.inspect
  ])

  throw TestFailure
    .new(message: buffer.to_string, location: location_of_failure)
}

## Asserts that the given arguments are not equal to each other.
def not_equal!(T: Inspect + Equal)(given: T, expected: T) !! TestFailure {
  given == expected
    .if_false {
      return
    }

  let buffer = StringBuffer.new([
    'Expected ',
    given.inspect,
    ' not to equal ',
    expected.inspect
  ])

  throw TestFailure
    .new(message: buffer.to_string, location: location_of_failure)
}

## Asserts that the first argument is greater than the second argument.
def greater!(T: Inspect + Greater)(given: T, minimum: T) !! TestFailure {
  given > minimum
    .if_true {
      return
    }

  let buffer = StringBuffer.new([
    'Expected ',
    given.inspect,
    ' to be greater than ',
    minimum.inspect
  ])

  throw TestFailure
    .new(message: buffer.to_string, location: location_of_failure)
  }

## Asserts that the given lambda panics.
def panic(block: lambda) !! TestFailure {
  let sender = process.channel!(PanicTest) lambda (receiver) {
    receiver.receive.run
  }

  sender.send(PanicTest.new(owner: process.current, block: block))

  process.receive.if_true {
    return
  }

  throw TestFailure.new(
    message: 'The provided block did not panic',
    location: location_of_failure
  )
}
