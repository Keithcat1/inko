#! Registering and running of unit tests
#!
#! This module provides various types and methods for working with test runners.
#! A runner is an object that manages a list of tests, executes them, and
#! displays the results using a `std::test::formatter::Formatter`.
#!
#! A runner is made out of three components:
#!
#! 1. A `RunnerState` object, which stores the state of a `Runner`.
#! 2. A `Runner` object, which runs in a separate process and is responsible for
#!    executing tests.
#! 3. A `Client` object, which sends messages to a `Runner`. A `Client` can be
#!    copied to other processes, but each `Client` always belongs to a single
#!    `Runner`.
#!
#! A `Client` communicates with a `Runner` by sending it objects that implement
#! the `Command` trait. A `Runner` in turn will send the `run` message to these
#! objects, passing its instance of `RunnerState`. This allows for type-safe
#! message passing, without the need for pattern matching.
import std::process::(self, Process)
import std::test::config::Configuration
import std::test::formatter::Formatter
import std::test::test::Test
import std::time
import std::time::duration
import std::vm

## The exit status to use if one or more tests failed to run.
let FAILURE_EXIT_STATUS = 1

## The internal state of a `Runner`.
object RunnerState {
  def init {
    ## All the tests registered with this runner.
    let @tests: Array!(Test) = []

    ## The configuration details for this runner.
    let @configuration = Configuration.new
  }

  ## Adds a new `Test` to this `Runner`.
  def add_test(test: Test) {
    @tests.push(test)
  }

  ## Returns all the currently registered tests.
  def tests -> Array!(Test) {
    @tests
  }

  ## Returns the `Configuration` of a `Runner`.
  def configuration -> Configuration {
    @configuration
  }

  ## Returns the number of tests to be executed concurrently
  def concurrency -> Integer {
    @configuration.concurrency
  }

  ## Returns the `Formatter` to use for formatting test results.
  def formatter -> Formatter {
    @configuration.formatter
  }
}

## A command sent from a runner client to the server.
trait Command {
  ## Runs the command.
  def run(state: RunnerState)
}

## A Command for setting configuration options of a `Runner`.
object ConfigureRunner impl Command {
  def init(option: String, value) {
    ## The name of the option to set.
    let @option = option

    ## The value to set the option to. The type of this value is Dynamic and can
    ## vary based on the name of the option.
    let @value = value
  }

  def run(state: RunnerState) {
    state.configuration[@option] = @value
  }
}

## A command for adding a new test to a runner.
object AddTest impl Command {
  def init(test: Test) {
    ## The test to add.
    let @test = test
  }

  def run(state: RunnerState) {
    state.add_test(@test)
  }
}

## A command for running all tests currently registered with a `Runner`.
object RunTests impl Command {
  def init(notify: Process) {
    ## The `Process` to notify once all tests have been completed.
    let @notify = notify
  }

  ## Runs all the tests currently registered, returning once they have been
  ## completed.
  ##
  ## Once this method has been called, no new tests can be registered.
  def run(state: RunnerState) {
    let mut pending = 0
    let start_time = time.instant
    let last_index = state.tests.length - 1
    let executed = []
    let failed = []

    state.tests.each_with_index do (test, index) {
      let proc = process.spawn {
        let test = process.receive as Test

        test.run
      }

      proc.send(test)

      pending += 1

      pending == state.concurrency
        .or { index == last_index }
        .if_true {
          { pending > 0 }.while_true {
            let finished_test = process.receive as Test

            state.formatter.test(finished_test)

            finished_test.passed?.if_false {
              failed.push(finished_test)
            }

            executed.push(finished_test)

            pending -= 1
          }
        }
    }

    let duration = start_time.elapsed

    failed.length.positive?.if_true {
      state.formatter.failures(failed)
    }

    state.formatter.summary(tests: executed, duration: duration)

    notify_client(failed.length.positive?)
  }

  def notify_client(failures: Boolean) {
    let finished_message = RunnerFinished
      .new(runner: process.current, failures: failures)

    @notify.send(finished_message)
  }
}

## A message sent by a `Runner` to inform a process that the `Runner` has
## finished.
object RunnerFinished {
  def init(runner: Process, failures: Boolean) {
    ## The runner `Process` that sent the message.
    let @runner = runner

    ## A boolean indicating if there were any test failures.
    let @failures = failures
  }

  ## Returns the `Process` of the `Runner` that sent the message.
  def runner -> Process {
    @runner
  }

  ## Returns `True` if one or more tests failed, `False` otherwise.
  def failures? -> Boolean {
    @failures
  }
}

## An object for executing test commands, such as setting configuring options or
## running the tests.
##
## A test runner consists out of two components: a server (an instance of
## `Runner`), and one or more clients (instances of `Client`). The state of a
## `Runner` is stored in a separate `RunnerState` instance.
object Runner {
  def init {
    ## The internal state of a Runner.
    let @state = RunnerState.new
  }

  ## Starts the runner.
  ##
  ## This method will not return until a command has instructed this Runner to
  ## terminate.
  def run {
    let command = process.receive as Command

    command.run(@state)

    run
  }
}

## A client that communicates with a certain `Runner`.
object Client {
  def init(runner: Process) {
    ## The `Process` to use for communicating with the `Runner`.
    let @runner = runner

    ## A boolean indicating if the test suite is running or not.
    let mut @running = False
  }

  ## Returns the jrocess of the `Runner`.
  def runner -> Process {
    @runner
  }

  ## Sets a configuration option to the given value.
  def configure(option: String, value: Dynamic) {
    running?.if_true {
      process.panic(
        'Configuration settings can not be changed for a running test suite'
      )
    }

    @runner.send(ConfigureRunner.new(option, value))
  }

  ## Adds a new test to the `Runner`.
  def add_test(test: Test) {
    running?.if_true {
      process.panic('New tests can not be added to a running test suite')
    }

    @runner.send(AddTest.new(test))
  }

  ## Schedules all tests for execution and waits for them to complete.
  def run {
    mark_as_running

    @runner.send(RunTests.new(process.current))

    wait_for_tests
  }

  ## Blocks the current process until all tests have finished running.
  ##
  ## If any tests failed to run, this method will terminate the VM with exit
  ## status code 1.
  def wait_for_tests {
    let message = process.receive as RunnerFinished

    message.failures?.if_true {
      vm.exit(FAILURE_EXIT_STATUS)
    }
  }

  def running? -> Boolean {
    @running
  }

  def mark_as_running {
    @running = True
  }
}

## Starts a new `Runner` in a separate process.
def start -> Client {
  let proc = process.spawn {
    Runner.new.run
  }

  Client.new(proc)
}
