# Types and methods for writing unit tests.
#
# This module defines the various internal types and methods used by
# `std::test`.
import std::ansi::(self, BOLD, CYAN, GREEN, RED)
import std::conversion::ToString
import std::debug::(self, StackFrame)
import std::mirror::(self, BlockMirror, ObjectMirror)
import std::option::Option
import std::process::(self, Process)
import std::stdio::stdout
import std::time::Duration

# The minimum amount of time (in seconds) the test suite should run, before
# displaying the execution time in seconds.
let TIME_IN_SECONDS_THRESHOLD = 1.0

# The default number of processes to run concurrently.
let DEFAULT_CONCURRENCY = 32

# Formats the given object as a `String`.
def inspect(value: Any) -> String {
  mirror.reflect(value).inspect
}

# Returns the call frame of an assertion failure.
def failure_location(skip = 3) -> StackFrame {
  debug.stacktrace(skip)[-1]
}

# A type for formatting the results of tests.
trait Formatter {
  # Displays the result of a passed test.
  def passed(test: Test)

  # Displays the result of a failed test.
  def failed(test: FailedTest)

  # Displays all of the failed tests after the test suite has finished.
  def failures(tests: Array!(FailedTest))

  # Displays a summary of all the tests that have been executed.
  #
  # The `tests` argument will be passed an `Array` of all `Test` objects
  # (including failed tests) that were executed.
  def finished(tests: Array!(Test), duration: Duration)
}

# A formatter that displays tests similar to a progress bar.
#
# The produced output is inspired by existing test frameworks such as RSpec and
# ExUnit. Output is colorised using ANSI escape sequences, though this can be
# disabled if necessary.
#
# Passed tests are displayed as a ".", while failed tests are displayed as "F".
# All output is written to STDOUT.
class ProgressFormatter {
  # The number of failed tests.
  @failed: Integer

  # When set to `True`, certain parts of the output will be wrapped in ANSI
  # escape sequences.
  @colors: Boolean

  static def new(colors = True) -> Self {
    Self { @failed = 0, @colors = colors }
  }

  # Returns the location of a test failure.
  def format_location(location: StackFrame) -> String {
    `{location.path}:{location.line}`
  }

  # Returns the unit of time to use for displaying the test suite execution
  # time.
  def duration_unit(duration: Duration) -> String {
    (duration.to_seconds > TIME_IN_SECONDS_THRESHOLD)
      .if(true: { 'seconds' }, false: { 'milliseconds' })
  }

  # Returns the duration of the test suite as a Float.
  #
  # If the test suite took more than 1 second to execute, then the returned
  # value is in seconds. If the suite took less than 1 second, then the value is
  # in milliseconds instead.
  def duration_time(duration: Duration) -> Float {
    let time = duration.to_seconds

    (time > TIME_IN_SECONDS_THRESHOLD)
      .if(true: { time }, false: { duration.to_milliseconds })
  }

  # Returns a `String` containing some statistics about the test suite.
  def test_suite_statistics(tests: Array!(Test)) -> String {
    let stats = `{tests.length} tests, {@failed} failures`

    @failed.positive?.if(true: { red(stats) }, false: { green(stats) })
  }

  def green(string: ToString) -> String {
    color(string, GREEN)
  }

  def red(string: ToString) -> String {
    color(string, RED)
  }

  def cyan(string: ToString) -> String {
    color(string, CYAN)
  }

  def bold(string: ToString) -> String {
    color(string, BOLD)
  }

  def color(string: ToString, code: String) -> String {
    @colors.if(true: { ansi.wrap(string, code) }, false: { string.to_string })
  }
}

impl Formatter for ProgressFormatter {
  def passed(test: Test) {
    stdout.write_string(green('.'))
  }

  def failed(test: FailedTest) {
    @failed += 1

    stdout.write_string(red('F'))
  }

  # Displays a list of all the failed tests.
  def failures(tests: Array!(FailedTest)) {
    stdout.write_string("\n\nFailures:")

    tests.each_with_index do (failed, index) {
      let failure = failed.failure
      let output = `

  Group:            {failed.test.group_description}
  Test:             {bold(failed.test.description)}
  Test location:    {cyan(format_location(failed.test.defined_at))}
  Failure location: {cyan(format_location(failure.failed_at))}
  Failure:          {red(failure.description)}`

      stdout.write_string(output)
    }
  }

  # Displays a summary of the test suite, once the suite has finished running.
  def finished(tests: Array!(Test), duration: Duration) {
    let output = `

Finished running in {duration_time(duration)} {duration_unit(duration)}
{test_suite_statistics(tests)}`

    stdout.print(output)
  }
}

# An assertion that failed.
class Failure {
  # The description of the assertion failure.
  @description: String

  # The location on which the failure happened.
  @failed_at: StackFrame

  static def new(description: String, failed_at: StackFrame) -> Self {
    Self { @description = description, @failed_at = failed_at }
  }

  # Returns the message describing the failure.
  def description -> String {
    @description
  }

  # Returns the location of the assertion failure.
  def failed_at -> StackFrame {
    @failed_at
  }
}

# The result of a single unit test.
class TestResult {
  # The unique ID of the test.
  @id: Integer

  # The test failure, if any.
  #
  # If the failure is a None, it means the test passed.
  @failure: ?Failure

  static def new(id: Integer, failure: ?Failure = Option.none) -> Self {
    Self { @id = id, @failure = failure }
  }

  # Returns the unique ID of the test this result belongs to.
  def id -> Integer {
    @id
  }

  # Returns the test failure, if any.
  def failure -> ?Failure {
    @failure
  }
}

# A test that failed.
class FailedTest {
  # The test that failed.
  @test: Test

  # The failure reason.
  @failure: Failure

  static def new(test: Test, failure: Failure) -> Self {
    Self { @test = test, @failure = failure }
  }

  # Returns the test that failed.
  def test -> Test {
    @test
  }

  # Returns the test failure.
  def failure -> Failure {
    @failure
  }
}

# A request to run a unit test.
class TestRequest {
  # The unique ID of the unit test.
  @id: Integer

  # The code to run.
  @code: fn !! Failure

  # The process to send the results back to.
  @reply_to: Process

  static def new(id: Integer, code: fn !! Failure, reply_to: Process) -> Self {
    Self { @id = id, @code = code, @reply_to = reply_to }
  }

  # Runs the test request, and sends the results back to a process.
  def run {
    try @code.call else (error) {
      @reply_to.send(TestResult.new(@id, failure: Option.some(error)))
      return
    }

    @reply_to.send(TestResult.new(@id, failure: Option.none))
  }
}

# A single unit test to run in a process.
class Test {
  # The unique ID of the test.
  @id: Integer

  # The description of the test.
  @description: String

  # The description of the test group this test belongds to.
  @group_description: String

  # The code to run for this test.
  @code: fn !! Failure

  static def new(
    id: Integer,
    description: String,
    group_description: String,
    code: fn !! Failure
  ) -> Self {
    Self {
      @id = id,
      @description = description,
      @group_description = group_description,
      @code = code
    }
  }

  # Returns the description of the test.
  def description -> String {
    @description
  }

  # Returns the group description of the test.
  def group_description -> String {
    @group_description
  }

  # Returns the location of the test definition.
  def defined_at -> StackFrame {
    let mirror = BlockMirror.new(@code)

    StackFrame.new(path: mirror.path, name: mirror.name, line: mirror.line)
  }

  # Schedules the test for execution in a separate process.
  def schedule {
    let runner = process.spawn {
      match(let request = process.receive) {
        as TestRequest -> { request.run }
        else -> {}
      }
    }

    runner.send(TestRequest.new(@id, @code, reply_to: process.current))
  }
}

# A group of tests related to one another.
class Group {
  # The description of the test group.
  @description: String

  # The collection of tests to add new tests to.
  @tests: Array!(Test)

  static def new(description: String, tests: Array!(Test)) -> Self {
    Self { @description = description, @tests = tests }
  }

  # Add a new test to this group.
  def test(description: String, code: fn !! Failure) {
    let test = Test.new(
      id: @tests.length,
      description: description,
      group_description: @description,
      code: code
    )

    @tests.push(test)
  }
}
