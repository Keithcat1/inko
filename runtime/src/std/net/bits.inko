# Types, constants and methods reused by IP and Unix sockets.
#
# This module should not be used directly, instead one should use
# `std::net::socket` and `std::net::unix`.
import std::io::(Error as IoError)

# A raw socket.
#
# This trait is a marker trait not meant to be used directly. Instead, you
# should use socket types such as `std::net::socket::Socket`.
trait Socket {}

# The socket type for socket streams.
let SOCK_STREAM = 0

# The socket type for datagram sockets.
let SOCK_DGRAM = 1

# The socket type for sequential packet sockets.
let SOCK_SEQPACKET = 2

# The socket type for raw sockets.
let SOCK_RAW = 3

# The maximum value valid for a listen() call.
#
# Linux and FreeBSD do not allow for values greater than this as they
# internally use an u16, so we'll limit the backlog to this value. We don't use
# SOMAXCONN because it might be hardcoded. This means that setting
# `net.core.somaxconn` on Linux (for example) would have no effect.
let MAXIMUM_LISTEN_BACKLOG = 65_535

extern def socket_read(
  socket: Socket,
  bytes: ByteArray,
  size: Integer
) !! String -> Integer

extern def socket_write_string(
  socket: Socket,
  input: String
) !! String -> Integer

extern def socket_write_bytes(
  socket: Socket,
  input: ByteArray,
) !! String -> Integer

extern def socket_listen(socket: Socket, backlog: Integer) !! String -> Integer
extern def socket_bind(socket: Socket, address: String, port: Integer) !! String
extern def socket_connect(
  socket: Socket,
  address: String,
  port: Integer
) !! String

extern def socket_receive_from(
  socket: Socket,
  bytes: ByteArray,
  size: Integer
) !! String -> Array!(Any)

extern def socket_send_bytes_to(
  socket: Socket,
  input: ByteArray,
  address: String,
  port: Integer
) !! String -> Integer

extern def socket_send_string_to(
  socket: Socket,
  input: String,
  address: String,
  port: Integer
) !! String -> Integer

extern def socket_shutdown_read(socket: Socket) !! String
extern def socket_shutdown_write(socket: Socket) !! String
extern def socket_shutdown_read_write(socket: Socket) !! String
extern def socket_local_address(socket: Socket) !! String -> Array!(Any)
extern def socket_peer_address(socket: Socket) !! String -> Array!(Any)

extern def socket_get_ttl(socket: Socket) !! String -> Integer
extern def socket_get_only_v6(socket: Socket) !! String -> Boolean
extern def socket_get_nodelay(socket: Socket) !! String -> Boolean
extern def socket_get_broadcast(socket: Socket) !! String -> Boolean
extern def socket_get_linger(socket: Socket) !! String -> Float
extern def socket_get_recv_size(socket: Socket) !! String -> Integer
extern def socket_get_send_size(socket: Socket) !! String -> Integer
extern def socket_get_keepalive(socket: Socket) !! String -> Float
extern def socket_get_multicast_loop_v4(socket: Socket) !! String -> Boolean
extern def socket_get_multicast_loop_v6(socket: Socket) !! String -> Boolean
extern def socket_get_multicast_ttl_v4(socket: Socket) !! String -> Integer
extern def socket_get_multicast_hops_v6(socket: Socket) !! String -> Integer
extern def socket_get_multicast_if_v4(socket: Socket) !! String -> String
extern def socket_get_multicast_if_v6(socket: Socket) !! String -> Integer
extern def socket_get_unicast_hops_v6(socket: Socket) !! String -> Integer
extern def socket_get_reuse_address(socket: Socket) !! String -> Boolean
extern def socket_get_reuse_port(socket: Socket) !! String -> Boolean

extern def socket_set_ttl(socket: Socket, value: Integer) !! String -> Integer
extern def socket_set_only_v6(
  socket: Socket,
  value: Boolean
) !! String -> Boolean

extern def socket_set_nodelay(
  socket: Socket,
  value: Boolean
) !! String -> Boolean

extern def socket_set_broadcast(
  socket: Socket,
  value: Boolean
) !! String -> Boolean

extern def socket_set_linger(socket: Socket, value: Float) !! String -> Float
extern def socket_set_recv_size(
  socket: Socket,
  value: Integer
) !! String -> Integer

extern def socket_set_send_size(
  socket: Socket,
  value: Integer
) !! String -> Integer

extern def socket_set_keepalive(
  socket: Socket,
  value: Float
) !! String -> Float

extern def socket_set_multicast_loop_v4(
  socket: Socket,
  value: Boolean
) !! String -> Boolean

extern def socket_set_multicast_loop_v6(
  socket: Socket,
  value: Boolean
) !! String -> Boolean

extern def socket_set_multicast_ttl_v4(
  socket: Socket,
  value: Integer
) !! String -> Integer

extern def socket_set_multicast_hops_v6(
  socket: Socket,
  value: Integer
) !! String -> Integer

extern def socket_set_multicast_if_v4(
  socket: Socket,
  value: String
) !! String -> String

extern def socket_set_multicast_if_v6(
  socket: Socket,
  value: Integer
) !! String -> Integer

extern def socket_set_unicast_hops_v6(
  socket: Socket,
  value: Integer
) !! String -> Integer

extern def socket_set_reuse_address(
  socket: Socket,
  value: Boolean
) !! String -> Boolean

extern def socket_set_reuse_port(
  socket: Socket,
  value: Boolean
) !! String -> Boolean

def get_ttl(socket: Socket) !! IoError -> Integer {
  try socket_get_ttl(socket) else (error) throw IoError.new(error)
}

def get_only_v6(socket: Socket) !! IoError -> Boolean {
  try socket_get_only_v6(socket) else (error) throw IoError.new(error)
}

def get_nodelay(socket: Socket) !! IoError -> Boolean {
  try socket_get_nodelay(socket) else (error) throw IoError.new(error)
}

def get_broadcast(socket: Socket) !! IoError -> Boolean {
  try socket_get_broadcast(socket) else (error) throw IoError.new(error)
}

def get_linger(socket: Socket) !! IoError -> Float {
  try socket_get_linger(socket) else (error) throw IoError.new(error)
}

def get_recv_size(socket: Socket) !! IoError -> Integer {
  try socket_get_recv_size(socket) else (error) throw IoError.new(error)
}

def get_send_size(socket: Socket) !! IoError -> Integer {
  try socket_get_send_size(socket) else (error) throw IoError.new(error)
}

def get_keepalive(socket: Socket) !! IoError -> Float {
  try socket_get_keepalive(socket) else (error) throw IoError.new(error)
}

def get_multicast_loop_v4(socket: Socket) !! IoError -> Boolean {
  try socket_get_multicast_loop_v4(socket) else (error) throw IoError.new(error)
}

def get_multicast_loop_v6(socket: Socket) !! IoError -> Boolean {
  try socket_get_multicast_loop_v6(socket) else (error) throw IoError.new(error)
}

def get_multicast_ttl_v4(socket: Socket) !! IoError -> Integer {
  try socket_get_multicast_ttl_v4(socket) else (error) throw IoError.new(error)
}

def get_multicast_hops_v6(socket: Socket) !! IoError -> Integer {
  try socket_get_multicast_hops_v6(socket) else (error) throw IoError.new(error)
}

def get_multicast_if_v4(socket: Socket) !! IoError -> String {
  try socket_get_multicast_if_v4(socket) else (error) throw IoError.new(error)
}

def get_multicast_if_v6(socket: Socket) !! IoError -> Integer {
  try socket_get_multicast_if_v6(socket) else (error) throw IoError.new(error)
}

def get_unicast_hops_v6(socket: Socket) !! IoError -> Integer {
  try socket_get_unicast_hops_v6(socket) else (error) throw IoError.new(error)
}

def get_reuse_address(socket: Socket) !! IoError -> Boolean {
  try socket_get_reuse_address(socket) else (error) throw IoError.new(error)
}

def get_reuse_port(socket: Socket) !! IoError -> Boolean {
  try socket_get_reuse_port(socket) else (error) throw IoError.new(error)
}

def set_ttl(socket: Socket, value: Integer) !! IoError -> Integer {
  try socket_set_ttl(socket, value) else (e) throw IoError.new(e)
}

def set_only_v6(socket: Socket, value: Boolean) !! IoError -> Boolean {
  try socket_set_only_v6(socket, value) else (e) throw IoError.new(e)
}

def set_nodelay(socket: Socket, value: Boolean) !! IoError -> Boolean {
  try socket_set_nodelay(socket, value) else (e) throw IoError.new(e)
}

def set_broadcast(socket: Socket, value: Boolean) !! IoError -> Boolean {
  try socket_set_broadcast(socket, value) else (e) throw IoError.new(e)
}

def set_linger(socket: Socket, value: Float) !! IoError -> Float {
  try socket_set_linger(socket, value) else (e) throw IoError.new(e)
}

def set_recv_size(socket: Socket, value: Integer) !! IoError -> Integer {
  try socket_set_recv_size(socket, value) else (e) throw IoError.new(e)
}

def set_send_size(socket: Socket, value: Integer) !! IoError -> Integer {
  try socket_set_send_size(socket, value) else (e) throw IoError.new(e)
}

def set_keepalive(socket: Socket, value: Float) !! IoError -> Float {
  try socket_set_keepalive(socket, value) else (e) throw IoError.new(e)
}

def set_multicast_loop_v4(socket: Socket, value: Boolean) !! IoError -> Boolean {
  try socket_set_multicast_loop_v4(socket, value) else (e) throw IoError.new(e)
}

def set_multicast_loop_v6(socket: Socket, value: Boolean) !! IoError -> Boolean {
  try socket_set_multicast_loop_v6(socket, value) else (e) throw IoError.new(e)
}

def set_multicast_ttl_v4(socket: Socket, value: Integer) !! IoError -> Integer {
  try socket_set_multicast_ttl_v4(socket, value) else (e) throw IoError.new(e)
}

def set_multicast_hops_v6(socket: Socket, value: Integer) !! IoError -> Integer {
  try socket_set_multicast_hops_v6(socket, value) else (e) throw IoError.new(e)
}

def set_multicast_if_v4(socket: Socket, value: String) !! IoError -> String {
  try socket_set_multicast_if_v4(socket, value) else (e) throw IoError.new(e)
}

def set_multicast_if_v6(socket: Socket, value: Integer) !! IoError -> Integer {
  try socket_set_multicast_if_v6(socket, value) else (e) throw IoError.new(e)
}

def set_unicast_hops_v6(socket: Socket, value: Integer) !! IoError -> Integer {
  try socket_set_unicast_hops_v6(socket, value) else (e) throw IoError.new(e)
}

def set_reuse_address(socket: Socket, value: Boolean) !! IoError -> Boolean {
  try socket_set_reuse_address(socket, value) else (e) throw IoError.new(e)
}

def set_reuse_port(socket: Socket, value: Boolean) !! IoError -> Boolean {
  try socket_set_reuse_port(socket, value) else (e) throw IoError.new(e)
}

def local_address(socket: Socket) !! IoError -> Array!(Any) {
  try socket_local_address(socket) else (error) throw IoError.new(error)
}

def peer_address(socket: Socket) !! IoError -> Array!(Any) {
  try socket_peer_address(socket) else (error) throw IoError.new(error)
}

def bind(socket: Socket, address: String, port: Integer) !! IoError {
  try socket_bind(socket, address, port) else (error) throw IoError.new(error)
}

def connect(socket: Socket, address: String, port: Integer) !! IoError {
  try socket_connect(socket, address, port) else (error) throw IoError.new(error)
}

def listen(socket: Socket, backlog: Integer) !! IoError -> Integer {
  try socket_listen(socket, backlog) else (error) throw IoError.new(error)
}

def send_bytes_to(
  socket: Socket,
  bytes: ByteArray,
  address: String,
  port: Integer
) !! IoError -> Integer {
  try {
    socket_send_bytes_to(socket, bytes, address, port)
  } else (error) {
    throw IoError.new(error)
  }
}

def send_string_to(
  socket: Socket,
  string: String,
  address: String,
  port: Integer
) !! IoError -> Integer {
  try {
    socket_send_string_to(socket, string, address, port)
  } else (error) {
    throw IoError.new(error)
  }
}

def receive_from(
  socket: Socket,
  bytes: ByteArray,
  size: Integer
) !! IoError -> Array!(Any) {
  try socket_receive_from(socket, bytes, size) else (e) throw IoError.new(e)
}

def read_bytes(
  socket: Socket,
  bytes: ByteArray,
  size: Integer
) !! IoError -> Integer {
  try socket_read(socket, bytes, size) else (error) throw IoError.new(error)
}

def write_bytes(socket: Socket, bytes: ByteArray) !! IoError -> Integer {
  try socket_write_bytes(socket, bytes) else (error) throw IoError.new(error)
}

def write_string(socket: Socket, string: String) !! IoError -> Integer {
  try socket_write_string(socket, string) else (error) throw IoError.new(error)
}

def shutdown_read(socket: Socket) !! IoError {
  try socket_shutdown_read(socket) else (error) throw IoError.new(error)
}

def shutdown_write(socket: Socket) !! IoError {
  try socket_shutdown_write(socket) else (error) throw IoError.new(error)
}

def shutdown(socket: Socket) !! IoError {
  try socket_shutdown_read_write(socket) else (error) throw IoError.new(error)
}
