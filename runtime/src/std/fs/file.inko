# Types and methods for manipulating files on a filesystem.
#
# This module contains various types and methods that can be used for operating
# on files stored in the local filesystem.
#
# Unlike many other languages there's no single "File" type to represent a
# file, instead there are different types that are used based on the mode a
# file is opened in. For example, when opening a file in read-only mode you
# will be given a `ReadOnlyFile` object while opening a file in write-only mode
# produces a `WriteOnlyFile` object.
import std::conversion::ToString
import std::fs::path::Path
import std::io::(Close, Error as IOError, Read, Seek, Size, Write)
import std::process::(blocking)

# A file that can only be used for read operations.
let ReadOnlyFile = _INKOC.get_read_only_file_prototype

# A file that can only be used for write (or append) operations.
let WriteOnlyFile = _INKOC.get_write_only_file_prototype

# A file that can be used for both read and write operations.
let ReadWriteFile = _INKOC.get_read_write_file_prototype

_INKOC.set_object_name(ReadOnlyFile, 'ReadOnlyFile')
_INKOC.set_object_name(WriteOnlyFile, 'WriteOnlyFile')
_INKOC.set_object_name(ReadWriteFile, 'ReadWriteFile')

extern def file_open_read_only(path: String) !! String -> ReadOnlyFile
extern def file_open_write_only(path: String) !! String -> WriteOnlyFile
extern def file_open_append_only(path: String) !! String -> WriteOnlyFile
extern def file_open_read_write(path: String) !! String -> ReadWriteFile
extern def file_open_read_append(path: String) !! String -> ReadWriteFile
extern def file_copy(from: String, to: String) !! String -> Integer
extern def file_remove(path: String) !! String
extern def file_path(file: File) -> String
extern def file_flush(file: File) !! String -> Nil
extern def file_seek(file: File, offset: Integer) !! String -> Integer
extern def file_size(path: String) !! String -> Integer
extern def file_write_string(file: File, input: String) !! String -> Integer
extern def file_write_bytes(file: File, input: ByteArray) !! String -> Integer
extern def file_read(
  file: File,
  bytes: ByteArray,
  size: Integer
) !! String -> Integer

# A file stored on the file system.
trait File {
  # Returns the path of the file.
  def path -> Path
}

# A file that can be removed from the file system.
trait Remove {
  # Removes the file from the underlying file system.
  def remove !! IOError
}

impl ReadOnlyFile {
  # Returns a new `ReadOnlyFile`.
  #
  # # Examples
  #
  # Opening a file in read-only mode:
  #
  #     import std::fs::file::ReadOnlyFile
  #
  #     let handle = try! ReadOnlyFile.new('/dev/null')
  static def new(path: ToString) !! IOError -> Self {
    blocking {
      try file_open_read_only(path.to_string) else (err) throw IOError.new(err)
    }
  }
}

impl Object for ReadOnlyFile {}

impl Read for ReadOnlyFile {
  def read_bytes(bytes: ByteArray, size = 0) !! IOError -> Integer {
    blocking {
      try file_read(self, bytes, size) else (err) throw IOError.new(err)
    }
  }
}

impl Seek for ReadOnlyFile {
  def seek(position: Integer) !! IOError -> Integer {
    blocking {
      try file_seek(self, position) else (err) throw IOError.new(err)
    }
  }
}

impl Size for ReadOnlyFile {
  def size !! IOError -> Integer {
    blocking {
      try file_size(file_path(self)) else (err) throw IOError.new(err)
    }
  }
}

impl File for ReadOnlyFile {
  def path -> Path {
    Path.new(file_path(self))
  }
}

impl Close for ReadOnlyFile {
  def close {
    _INKOC.close(self)
  }
}

impl WriteOnlyFile {
  # Opens a file in write-only mode.
  #
  # # Examples
  #
  #     import std::fs::file::WriteOnlyFile
  #
  #     let file = try! WriteOnlyFile.new('/dev/null')
  static def new(path: ToString) !! IOError -> Self {
    blocking {
      try file_open_write_only(path.to_string) else (e) throw IOError.new(e)
    }
  }

  # Opens a file in append-only mode.
  #
  # # Examples
  #
  #     import std::fs::file::WriteOnlyFile
  #
  #     let file = try! WriteOnlyFile.append('/dev/null')
  static def append(path: ToString) !! IOError -> Self {
    blocking {
      try file_open_append_only(path.to_string) else (e) throw IOError.new(e)
    }
  }
}

impl Object for WriteOnlyFile {}

impl Write for WriteOnlyFile {
  def write_bytes(bytes: ByteArray) !! IOError -> Integer {
    blocking { try file_write_bytes(self, bytes) else (e) throw IOError.new(e) }
  }

  def write_string(data: ToString) !! IOError -> Integer {
    blocking {
      try file_write_string(self, data.to_string) else (e) throw IOError.new(e)
    }
  }

  def flush !! IOError {
    blocking {
      try file_flush(self) else (err) throw IOError.new(err)
    }
  }
}

impl Seek for WriteOnlyFile {
  def seek(position: Integer) !! IOError -> Integer {
    blocking {
      try file_seek(self, position) else (err) throw IOError.new(err)
    }
  }
}

impl Size for WriteOnlyFile {
  def size !! IOError -> Integer {
    blocking {
      try file_size(file_path(self)) else (err) throw IOError.new(err)
    }
  }
}

impl File for WriteOnlyFile {
  def path -> Path {
    Path.new(file_path(self))
  }
}

impl Close for WriteOnlyFile {
  def close {
    _INKOC.close(self)
  }
}

impl Remove for WriteOnlyFile {
  def remove !! IOError {
    try ThisModule.remove(file_path(self))
  }
}

impl ReadWriteFile {
  # Opens a file for both reading and writing:
  #
  # # Examples
  #
  #     import std::fs::file::ReadWriteFile
  #
  #     let handle = try! ReadWriteFile.new('/dev/null')
  static def new(path: ToString) !! IOError -> Self {
    blocking {
      try file_open_read_write(path.to_string) else (e) throw IOError.new(e)
    }
  }

  # Opens a file for both reading and appending:
  #
  # # Examples
  #
  #     import std::fs::file::ReadWriteFile
  #
  #     let handle = try! ReadWriteFile.append('/dev/null')
  static def append(path: ToString) !! IOError -> Self {
    blocking {
      try file_open_read_append(path.to_string) else (e) throw IOError.new(e)
    }
  }
}

impl Object for ReadWriteFile {}

impl Read for ReadWriteFile {
  def read_bytes(bytes: ByteArray, size = 0) !! IOError -> Integer {
    blocking {
      try file_read(self, bytes, size) else (err) throw IOError.new(err)
    }
  }
}

impl Write for ReadWriteFile {
  def write_bytes(bytes: ByteArray) !! IOError -> Integer {
    blocking { try file_write_bytes(self, bytes) else (e) throw IOError.new(e) }
  }

  def write_string(data: ToString) !! IOError -> Integer {
    blocking {
      try file_write_string(self, data.to_string) else (e) throw IOError.new(e)
    }
  }

  def flush !! IOError {
    blocking {
      try file_flush(self) else (err) throw IOError.new(err)
    }
  }
}

impl Seek for ReadWriteFile {
  def seek(position: Integer) !! IOError -> Integer {
    blocking {
      try file_seek(self, position) else (err) throw IOError.new(err)
    }
  }
}

impl Size for ReadWriteFile {
  def size !! IOError -> Integer {
    blocking {
      try file_size(file_path(self)) else (err) throw IOError.new(err)
    }
  }
}

impl File for ReadWriteFile {
  def path -> Path {
    Path.new(file_path(self))
  }
}

impl Close for ReadWriteFile {
  def close {
    _INKOC.close(self)
  }
}

impl Remove for ReadWriteFile {
  def remove !! IOError {
    try ThisModule.remove(file_path(self))
  }
}

# Removes the file for the given file path.
#
# # Examples
#
# Removing a file:
#
#     import std::fs::file::(self, WriteOnlyFile)
#
#     let handle = try! WriteOnlyFile.new('/tmp/test.txt')
#
#     try! handle.write('hello')
#     try! file.remove('/tmp/test.txt')
def remove(path: ToString) !! IOError {
  blocking {
    try file_remove(path.to_string) else (err) throw IOError.new(err)
  }
}

# Copies a file from the source destination to the target destination,
# returning the number of copied bytes.
#
# # Examples
#
# Copying a file:
#
#     import std::fs::file::(self, WriteOnlyFile)
#
#     let handle = try! WriteOnlyFile.new('/tmp/test.txt')
#
#     try! handle.write('hello')
#     try! file.copy(from: '/tmp/test.txt', to: '/tmp/test2.txt')
def copy(from: ToString, to: ToString) !! IOError -> Integer {
  blocking {
    try {
      file_copy(from.to_string, to.to_string)
    } else (err) {
      throw IOError.new(err)
    }
  }
}
