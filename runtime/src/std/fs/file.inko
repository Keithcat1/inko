# Types and methods for manipulating files on a filesystem.
#
# This module contains various types and methods that can be used for operating
# on files stored in the local filesystem.
#
# Unlike many other languages there's no single "File" type to represent a
# file, instead there are different types that are used based on the mode a
# file is opened in. For example, when opening a file in read-only mode you
# will be given a `ReadOnlyFile` object while opening a file in write-only mode
# produces a `WriteOnlyFile` object.
import std::conversion::ToString
import std::fs::bits::(self, READ_ONLY, File as RawFile)
import std::fs::path::Path
import std::io::(Close, Error as IOError, Read, Seek, Size, Write)
import std::process

# A file that can only be used for read operations.
let ReadOnlyFile = _INKOC.get_read_only_file_prototype

# A file that can only be used for write (or append) operations.
let WriteOnlyFile = _INKOC.get_write_only_file_prototype

# A file that can be used for both read and write operations.
let ReadWriteFile = _INKOC.get_read_write_file_prototype

_INKOC.set_object_name(ReadOnlyFile, 'ReadOnlyFile')
_INKOC.set_object_name(WriteOnlyFile, 'WriteOnlyFile')
_INKOC.set_object_name(ReadWriteFile, 'ReadWriteFile')

impl Object for ReadOnlyFile {}
impl Object for WriteOnlyFile {}
impl Object for ReadWriteFile {}

# Trait for returning the file path of a file object.
trait FilePath {
  # Returns the `Path` of the file.
  def path -> Path
}

# An object that allows the removal of an associated file on the filesystem.
trait Remove {
  # Removes the file from the underlying file system.
  def remove !! IOError
}

impl ReadOnlyFile {
  # Returns a new `ReadOnlyFile`.
  #
  # # Examples
  #
  # Opening a file in read-only mode:
  #
  #     import std::fs::file::ReadOnlyFile
  #
  #     let handle = try! ReadOnlyFile.new('/dev/null')
  static def new(path: ToString) !! IOError -> Self {
    let file = try bits.open(path: path.to_string, mode: READ_ONLY)

    file as ReadOnlyFile
  }
}

impl RawFile for ReadOnlyFile {}

impl Read for ReadOnlyFile {
  def read_bytes(bytes: ByteArray, size = 0) !! IOError -> Integer {
    try bits.read_bytes(file: self, bytes: bytes, size: size)
  }
}

impl Seek for ReadOnlyFile {
  def seek(position: Integer) !! IOError -> Integer {
    try bits.seek(file: self, position: position)
  }
}

impl Size for ReadOnlyFile {
  def size !! IOError -> Integer {
    try bits.size(_INKOC.file_path(self))
  }
}

impl FilePath for ReadOnlyFile {
  def path -> Path {
    Path.new(_INKOC.file_path(self))
  }
}

impl Close for ReadOnlyFile {
  def close {
    _INKOC.close(self)
  }
}

impl WriteOnlyFile {
  # Returns a new `WriteOnlyFile`.
  #
  # # Examples
  #
  # Opening a file in write-only mode:
  #
  #     import std::fs::file::WriteOnlyFile
  #
  #     let handle = try! WriteOnlyFile.new('/dev/null')
  static def new(path: ToString, append = False) !! IOError -> Self {
    let mode = bits.mode_for_write(append)
    let file = try bits.open(path: path.to_string, mode: mode)

    file as WriteOnlyFile
  }
}

impl RawFile for WriteOnlyFile {}

impl Write for WriteOnlyFile {
  def write_bytes(bytes: ByteArray) !! IOError -> Integer {
    try bits.write_bytes(file: self, bytes: bytes)
  }

  def write_string(data: ToString) !! IOError -> Integer {
    try bits.write_string(file: self, data: data.to_string)
  }

  def flush !! IOError {
    try bits.flush(self)
  }
}

impl Seek for WriteOnlyFile {
  def seek(position: Integer) !! IOError -> Integer {
    try bits.seek(file: self, position: position)
  }
}

impl Size for WriteOnlyFile {
  def size !! IOError -> Integer {
    try bits.size(_INKOC.file_path(self))
  }
}

impl FilePath for WriteOnlyFile {
  def path -> Path {
    Path.new(_INKOC.file_path(self))
  }
}

impl Close for WriteOnlyFile {
  def close {
    _INKOC.close(self)
  }
}

impl Remove for WriteOnlyFile {
  def remove !! IOError {
    try ThisModule.remove(_INKOC.file_path(self))
  }
}

impl ReadWriteFile {
  # Returns a new `ReadWriteFile`.
  #
  # # Examples
  #
  # Opening a file for both reads and writes:
  #
  #     import std::fs::file::ReadWriteFile
  #
  #     let handle = try! ReadWriteFile.new('/dev/null')
  static def new(path: ToString, append = False) !! IOError -> Self {
    let mode = bits.mode_for_read_write(append)
    let file = try bits.open(path: path.to_string, mode: mode)

    file as ReadWriteFile
  }
}

impl RawFile for ReadWriteFile {}

impl Read for ReadWriteFile {
  def read_bytes(bytes: ByteArray, size = 0) !! IOError -> Integer {
    try bits.read_bytes(file: self, bytes: bytes, size: size)
  }
}

impl Write for ReadWriteFile {
  def write_bytes(bytes: ByteArray) !! IOError -> Integer {
    try bits.write_bytes(file: self, bytes: bytes)
  }

  def write_string(data: ToString) !! IOError -> Integer {
    try bits.write_string(file: self, data: data.to_string)
  }

  def flush !! IOError {
    try bits.flush(self)
  }
}

impl Seek for ReadWriteFile {
  def seek(position: Integer) !! IOError -> Integer {
    try bits.seek(file: self, position: position)
  }
}

impl Size for ReadWriteFile {
  def size !! IOError -> Integer {
    try bits.size(_INKOC.file_path(self))
  }
}

impl FilePath for ReadWriteFile {
  def path -> Path {
    Path.new(_INKOC.file_path(self))
  }
}

impl Close for ReadWriteFile {
  def close {
    _INKOC.close(self)
  }
}

impl Remove for ReadWriteFile {
  def remove !! IOError {
    try ThisModule.remove(_INKOC.file_path(self))
  }
}

# Removes the file for the given file path.
#
# # Examples
#
# Removing a file:
#
#     import std::fs::file
#
#     let handle = try! file.write_only('/tmp/test.txt')
#
#     try! handle.write('hello')
#     try! file.remove('/tmp/test.txt')
def remove(path: ToString) !! IOError {
  try bits.remove(path.to_string)
}

# Copies a file from the source destination to the target destination,
# returning the number of copied bytes.
#
# # Examples
#
# Copying a file:
#
#     import std::fs::file
#
#     let handle = try! file.write_only('/tmp/test.txt')
#
#     try! handle.write('hello')
#     try! file.copy(from: '/tmp/test.txt', to: '/tmp/test2.txt')
def copy(from: ToString, to: ToString) !! IOError -> Integer {
  try bits.copy(from: from.to_string, to: to.to_string)
}

# Opens a file that can only be used for reading data.
def read_only(path: ToString) !! IOError -> ReadOnlyFile {
  try ReadOnlyFile.new(path)
}

# Opens a file that can only be used for writing data.
def write_only(path: ToString) !! IOError -> WriteOnlyFile {
  try WriteOnlyFile.new(path)
}

# Opens a file that can only be used for appending data.
def append_only(path: ToString) !! IOError -> WriteOnlyFile {
  try WriteOnlyFile.new(path: path, append: True)
}

# Opens a file that can be used for both reading and writing data.
def read_write(path: ToString) !! IOError -> ReadWriteFile {
  try ReadWriteFile.new(path: path)
}

# Opens a file that can be used for both reading and appending data.
def read_append(path: ToString) !! IOError -> ReadWriteFile {
  try ReadWriteFile.new(path: path, append: True)
}
