# Arrays of bytes
#
# Byte arrays are arrays specialised for storing individual bytes in the most
# efficient way possible. Unlike a regular `Array` of `Integer` values, each
# value only requires a single byte of space, instead of requiring 8 bytes of
# space.
#
# Byte arrays are primarily meant for reading and writing data from/to a
# stream, such as a file or a socket. If you simply want to store a list of
# numbers, you're better off using the `Array` object.
import std::conversion::ToArray
import std::conversion::ToString
import std::index::(Index, SetIndex)
import std::length::Length
import std::operators::Equal

# A type that can be converted to a `ByteArray`.
trait ToByteArray {
  # Converts `self` to a `ByteArray`.
  def to_byte_array -> ByteArray
}

impl ByteArray {
  # Creates a new `ByteArray`.
  #
  # This method will panic if any of the `Integer` values passed to this method
  # are not in the range `0..256`.
  #
  # # Examples
  #
  # Creating an empty `ByteArray`:
  #
  #     ByteArray.new
  #
  # Creating a `ByteArray` with values:
  #
  #     ByteArray.new(10, 20, 30)
  static def new(*bytes: Integer) -> Self {
    _INKOC.byte_array_from_array(bytes)
  }

  # Removes all values from this `ByteArray`.
  #
  # # Examples
  #
  # Removing all values:
  #
  #     let bytes = ByteArray.new(10, 20, 30)
  #
  #     bytes.clear
  #     bytes.length # => 0
  def clear -> Self {
    _INKOC.byte_array_clear(self)
    self
  }

  # Pushes a value to the back of the `ByteArray`, returning the pushed value.
  #
  # # Examples
  #
  # Pushing a value into a `ByteArray`:
  #
  #     let bytes = ByteArray.new
  #
  #     bytes.push(10) # => 10
  #     bytes.length   # => 1
  def push(value: Integer) -> Integer {
    self[length] = value
  }

  # Removes a value from the back of the `ByteArray`, returning the removed
  # value.
  #
  # If no value was found, `Nil` is returned instead.
  #
  # # Examples
  #
  # Popping an existing value:
  #
  #     let bytes = ByteArray.new(10)
  #
  #     bytes.pop    # => 10
  #     bytes.length # => 0
  #
  # Popping a value when the `ByteArray` is empty:
  #
  #     let bytes = ByteArray.new
  #
  #     bytes.pop # => Nil
  def pop -> ?Integer {
    (length > 0).if(true: { remove_at(length - 1) }, false: { Nil })
  }

  # Removes the value at the given index, returning the removed value.
  #
  # # Examples
  #
  # Removing an existing value:
  #
  #     let bytes = ByteArray.new(10)
  #
  #     bytes.remove_at(0) # => 10
  #     bytes.length       # => 0
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  def remove_at(index: Integer) -> Integer {
    _INKOC.byte_array_remove(self, index)
  }

  # Yields all the bytes in this `ByteArray` to the supplied `Block`.
  #
  # While `std::iterator::Iterator` provides an `each` method using this would
  # require the allocation of an `Iterator`. Since iterating over an
  # `ByteArray` is so common we provide a specialised implementation for those
  # cases.
  #
  # # Examples
  #
  # Iterating over all the values in a `ByteArray`:
  #
  #     import std::stdio::stdout
  #
  #     ByteArray.new(10, 20, 30).each do (byte) {
  #       stdout.print(byte)
  #     }
  def each(block: do (Integer)) {
    let mut index = 0
    let max = length

    { index < max }.while_true {
      block.call(self[index])
      index += 1
    }
  }

  # Yields all the values and their indexes in this `ByteArray` to the supplied
  # `Block`.
  #
  # # Examples
  #
  # Iterating over the values of an `ByteArray` and their indexes:
  #
  #     import std::stdio::stdout
  #
  #     ByteArray.new(10, 20, 30).each_with_index do (byte, index) {
  #       stdout.print(index) # => 0, 1, 2
  #     }
  def each_with_index(block: do (Integer, Integer)) {
    let mut index = 0

    each do (value) {
      block.call(value, index)
      index += 1
    }
  }

  # Returns a new `String` using the bytes in this `ByteArray`, draining it in
  # the process.
  #
  # After this method is finished, `self` is left empty. This allows one to
  # convert a temporary `ByteArray` into a `String`, without requiring the list
  # of bytes to be allocated twice.
  #
  # # Examples
  #
  # Draining a `ByteArray` into a `String`:
  #
  #     let bytes = ByteArray.new(105, 110, 107, 111)
  #
  #     bytes.drain_to_string # => 'inko'
  #     bytes.empty?          # => True
  def drain_to_string -> String {
    _INKOC.byte_array_to_string(self, True)
  }

  # Slices `self` into a new `ByteArray`.
  #
  # Similar to slicing a `String`, slicing a `ByteArray` allows one to extract
  # a sub-array by providing a start position and the number of _bytes_ to
  # include starting at the start position.
  #
  # # Examples
  #
  # Slicing a `ByteArray`:
  #
  #     let bytes = ByteArray.new(1, 2, 3, 4)
  #     let sliced = bytes.slice(start: 1, length: 2)
  #
  #     sliced[0] # => 2
  #     sliced[1] # => 3
  def slice(start: Integer, length: Integer) -> ByteArray {
    let new_array = ByteArray.new
    let mut index =
      (start >= 0).if(true: { start }, false: { start % self.length })

    let mut until = index + length

    (until >= self.length).if_true { until = self.length }

    { index < until }.while_true {
      new_array.push(self[index])
      index += 1
    }

    new_array
  }

  # Returns the byte at the given index, returning Nil if the index is out of
  # bounds.
  #
  # # Examples
  #
  # Retrieving an existing byte:
  #
  #     let bytes = ByteArray.new(10, 20)
  #
  #     bytes.get(0) # => 10
  #
  # Retrieving a non-existing byte:
  #
  #     let bytes = ByteArray.new(10, 20)
  #
  #     bytes.get(5) # => Nil
  def get(index: Integer) -> ?Integer {
    try _INKOC.byte_array_at(self, index) else Nil
  }
}

impl Index!(Integer, Integer) for ByteArray {
  # Returns the byte at the given index.
  #
  # # Examples
  #
  # Retrieving an existing byte:
  #
  #     let bytes = ByteArray.new(10, 20)
  #
  #     bytes[0] # => 10
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  def [](index: Integer) -> Integer {
    try _INKOC.byte_array_at(self, index) else (err) _INKOC.panic(err as String)
  }
}

impl SetIndex!(Integer, Integer) for ByteArray {
  # Stores a byte at the given index, then returns it.
  #
  # # Examples
  #
  # Setting the value of an existing index:
  #
  #     let bytes = ByteArray.new(10, 20)
  #
  #     bytes[0] = 30 # => 30
  #     bytes[0]      # => 30
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  def []=(index: Integer, value: Integer) -> Integer {
    _INKOC.byte_array_set(self, index, value)
  }
}

impl ToString for ByteArray {
  # Returns a new `String` using the bytes in this `ByteArray`.
  #
  # Any invalid UTF-8 sequences will be replaced with `U+FFFD REPLACEMENT
  # CHARACTER`, which looks like this: ï¿½
  #
  # # Examples
  #
  # Converting a `ByteArray` into a `String`:
  #
  #     let bytes = ByteArray.new(105, 110, 107, 111)
  #
  #     bytes.to_string # => 'inko'
  def to_string -> String {
    _INKOC.byte_array_to_string(self, False)
  }
}

impl ToArray!(Integer) for ByteArray {
  # Converts the `ByteArray` to an `Array!(Integer)`.
  #
  # It is recommended to not use this method for very large byte arrays, as
  # an `Integer` requires 8 times more memory compared to a single byte. This
  # means that a 1 MB `ByteArray` would require roughly 8 MB of memory.
  #
  # # Examples
  #
  # Converting a `ByteArray`:
  #
  #     let bytes = ByteArray.new(105, 110, 107, 111)
  #
  #     bytes.to_array # => Array.new(105, 110, 107, 111)
  def to_array -> Array!(Integer) {
    let integers = Array.new

    each do (byte) { integers.push(byte) }

    integers
  }
}

impl Equal for ByteArray {
  # Returns `True` if two `ByteArray` objects are equal to each other.
  #
  # Two `ByteArray` objects are considered equal if they have the exact same
  # values in the exact same order.
  #
  # # Examples
  #
  # Comparing two `ByteArray` objects:
  #
  #     ByteArray.new(10) == ByteArray.new(10) # => True
  #     ByteArray.new(10) == ByteArray.new(20) # => False
  def ==(other: ByteArray) -> Boolean {
    _INKOC.byte_array_equals(self, other)
  }
}

impl Length for ByteArray {
  # Returns the number of bytes in this `ByteArray`.
  #
  # # Examples
  #
  # Obtaining the length of a `ByteArray`
  #
  #     ByteArray.new.length     # => 0
  #     ByteArray.new(10).length # => 1
  def length -> Integer {
    _INKOC.byte_array_length(self)
  }
}

impl ToByteArray for ByteArray {
  # Converts `self` to a `ByteArray`.
  def to_byte_array -> ByteArray {
    self
  }
}

impl ByteArray {
  # Returns an `Iterator` that iterates over all values in `self`.
  def iter => Integer {
    each do (byte) { yield byte }
  }
}
